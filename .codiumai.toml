[tests]

framework = "Vitest"
utility_library = "fast-check"
use_mocks = true
num_desired_tests = 20
plan_instructions = """
0. Note that The codebase uses a functional programming approach. It uses concepts of the functional programming, such as currying, monads, monoids, and immutability. Note that All classes in this codebase are monads and monoids.
1. WRITE ALL TEXT IN KOREAN LANGUAGE except for code. Such as strings, behaviors, behaviors coverage, text in quotes, etc. in Korean.
2. Devise edge cases, extreme cases that are vulnerable to error. Devise "what ifs" that the original coders would not have considered, that could lead to surprising or unexpected results.
3. The description contained in `it' should not be meaninglessly long and should be as short as possible. 존댓말을 쓰지 마라. 항상 문장을 명사형으로 끝내라. 예를 들어서, '~생성', '~초기화', '~확인', '~에러', '~유지', '~처리' 등으로. 예시에 없는 형태를 써야한다 하더라도, 가장 짧은 형태로 문장을 명사형으로 끝내라.
4. Whenever it makes sense to use Property Based Tests, always implement them using 'fast-check'. Use your knowledge of fast-check and its usage.
NOTE THIS: The syntax of fast-check in Vitest is `it.prop({myProperty: fc.something()})('description', (myProperty) => { ... })`. i.e., instead of using `fc.assert`, use `it.prop` and `expect`. Here's examples:
```
it.prop({ number1: fc.nat(), number2: fc.nat() })('교환법칙', ({ number1, number2 }) => {
	return (number1 + number2 === number2 + number1)
})
it.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('서브스트링이 포함', ({ a, b, c }) => {
	expect((a + b + c).includes(a)).toBe(true)
	expect((a + b + c).includes(b)).toBe(true)
	expect((a + b + c).includes(c)).toBe(true)
})
```
"""
example_test = """
import { expect } from 'vitest'
import { fc, test, it } from '@fast-check/vitest'

// --- 기본 설정 (선택 사항) ---
// 전역적으로 fast-check 설정을 변경할 수 있습니다.
// fc.configureGlobal({ seed: Date.now() }) // 테스트 실행 시마다 다른 시드 값 사용
// fc.configureGlobal({ numRuns: 50 }) // 기본 실행 횟수 변경 (기본값: 100)
// fc.configureGlobal({ endOnFailure: true }) // 첫 실패 시 즉시 종료 (Shrinking 비활성화)

// --- 1. 일회성 랜덤 모드 (One-time random mode) ---
// test 또는 it 함수 내에서 `g` 함수를 사용하여 랜덤 값을 생성합니다.
// 이 모드는 테스트를 한 번만 실행하며, 실패 시 동일한 시드 값으로 재현 가능합니다.
it('일회성 랜덤 모드 예시', () => {
  // 사용자 정보 객체를 랜덤하게 생성하여 테스트
  test('사용자 이름 표시 테스트 (g 함수 사용)', ({ g }) => {
    // Arrange: fc.string() 아비트러리를 사용하여 랜덤 문자열 생성
    const user = {
      firstName: g(fc.string({ minLength: 1 })), // 최소 길이 1 이상의 문자열
      lastName: g(fc.string({ minLength: 1 })),
      userId: g(fc.uuid()), // UUID 생성
    }

    function computeDisplayName(u: typeof user): string {
      return `${u.firstName} ${u.lastName} (${u.userId.substring(0, 8)})`
    }

    // Act
    const displayName = computeDisplayName(user)

    // Assert: 생성된 이름에 firstName과 lastName이 포함되어 있는지 확인
    expect(displayName).toContain(user.firstName)
    expect(displayName).toContain(user.lastName)
    expect(displayName).toContain(user.userId.substring(0, 8))
  })

  // 랜덤 값이 필요 없는 일반적인 Vitest 테스트도 함께 사용할 수 있습니다.
  test('랜덤 값 불필요 테스트', () => {
    expect(1 + 1).toBe(2)
  })
})

// --- 2. 전체 속성 기반 모드 (Full property-based mode) ---
// test.prop 또는 it.prop을 사용하여 속성 기반 테스트를 정의합니다.
// 여러 번의 랜덤 입력값에 대해 테스트를 실행하고, 실패 시 입력값을 축소하여 원인을 찾습니다.
it('전체 속성 기반 모드 예시', () => {
  // --- 2.1 기본 사용법 ---
  // 배열 형태의 아비트러리 전달
  test.prop([fc.integer(), fc.integer()])('덧셈의 교환 법칙 (배열)', (a, b) => {
    // 임의의 정수 a, b에 대해 a + b === b + a 여야 함
    expect(a + b).toBe(b + a)
  })

  // 객체 형태의 아비트러리 전달 (이름 지정)
  test.prop({ a: fc.nat(), b: fc.nat() })('덧셈의 결과는 입력값보다 크거나 같음 (객체)', ({ a, b }) => {
    // 임의의 자연수 a, b에 대해 a + b >= a 이고 a + b >= b 여야 함
    expect(a + b).toBeGreaterThanOrEqual(a)
    expect(a + b).toBeGreaterThanOrEqual(b)
  })

  // --- 2.2 다양한 아비트러리 활용 ---
  // 문자열과 배열 테스트
  test.prop([fc.string(), fc.array(fc.string())])('문자열 배열 길이 테스트', (prefix, arr) => {
    // 임의의 문자열 prefix와 문자열 배열 arr
    const result = arr.map(s => prefix + s)
    // 결과 배열의 길이는 원본 배열과 같아야 함
    expect(result.length).toBe(arr.length)
    // 결과 배열의 각 요소는 prefix로 시작해야 함
    result.forEach(item => {
      expect(item.startsWith(prefix)).toBe(true)
    })
  })

  // 객체 구조 테스트
  test.prop([fc.record({ id: fc.uuid(), score: fc.float({ min: 0, max: 100 }) })])('점수 객체 유효성 검사', (record) => {
    // id는 UUID 형식이어야 함
    expect(record.id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)
    // score는 0과 100 사이여야 함
    expect(record.score).toBeGreaterThanOrEqual(0)
    expect(record.score).toBeLessThanOrEqual(100)
  })

  // 불리언, 상수, 선택적 값 테스트
  test.prop([fc.boolean(), fc.constant(null), fc.oneof(fc.nat(), fc.string())])('다양한 타입 조합 테스트', (flag, nil, value) => {
    // flag는 true 또는 false
    expect(typeof flag).toBe('boolean')
    // nil은 항상 null
    expect(nil).toBeNull()
    // value는 자연수 또는 문자열
    expect(typeof value === 'number' || typeof value === 'string').toBe(true)
    if (typeof value === 'number') {
      expect(Number.isInteger(value)).toBe(true)
      expect(value).toBeGreaterThanOrEqual(0)
    }
  })

  // 튜플 테스트
  test.prop([fc.tuple(fc.string(), fc.integer())])('튜플 구조 및 타입 테스트', ([str, num]) => {
    expect(typeof str).toBe('string')
    expect(typeof num).toBe('number')
  })

  // --- 2.3 비동기 속성 테스트 ---
  // Promise를 반환하는 비동기 함수 테스트
  async function fetchData(id: number): Promise<{ id: number data: string }> {
    return new Promise(resolve => setTimeout(() => resolve({ id, data: `Data for ${id}` }), 10))
  }

  test.prop([fc.nat(100)])('비동기 데이터 가져오기 테스트', async (id) => {
    const result = await fetchData(id)
    expect(result.id).toBe(id)
    expect(result.data).toContain(String(id))
  })

  // --- 2.4 커스텀 파라미터 사용 ---
  // 특정 시드 값으로 테스트 재현 또는 실행 횟수 조절
  test.prop([fc.nat(), fc.nat()], { seed: 12345, numRuns: 50 })('특정 시드와 실행 횟수로 테스트', (a, b) => {
    // seed: 12345, numRuns: 50 설정으로 실행
    expect(a + b).toBe(b + a)
  })

  // --- 2.5 Vitest 모디파이어 사용 ---
  // .skip: 테스트 건너뛰기
  test.skip.prop([fc.string()])('이 테스트는 건너뜁니다', (text) => {
    expect(text.length).toBeGreaterThanOrEqual(0)
  })

  // .concurrent: 병렬 실행 (테스트 환경 설정에 따라 동작)
  test.concurrent.prop([fc.array(fc.integer())])('배열 정렬 테스트 (병렬)', (arr) => {
    const sorted = [...arr].sort((a, b) => a - b)
    for (let i = 0 i < sorted.length - 1 ++i) {
      expect(sorted[i]).toBeLessThanOrEqual(sorted[i + 1])
    }
  })

  // it.prop 사용 (test.prop과 동일)
  it('it.prop 사용 예시', () => {
    it.prop([fc.emailAddress()])('유효한 이메일 형식 테스트', (email) => {
      // 간단한 이메일 형식 검사 (실제로는 더 정교한 검사가 필요할 수 있음)
      expect(email).toContain('@')
      expect(email.split('@')[1]).toContain('.')
    })
  })

  // --- 2.6 전제 조건 (Preconditions) ---
  // 특정 조건을 만족하는 입력값에 대해서만 테스트 실행
  test.prop([fc.integer(), fc.integer()])('나눗셈 테스트 (0으로 나누지 않음)', (a, b) => {
    // 전제 조건: b는 0이 아니어야 함
    fc.pre(b !== 0)

    const result = a / b
    // 결과가 NaN, Infinity, -Infinity가 아닌 유한한 수여야 함
    expect(Number.isFinite(result)).toBe(true)
  })

  // --- 2.7 복잡한 아비트러리 조합 (letrec, mapToConstant 등) ---
  // 상호 재귀적인 데이터 구조 생성 예시 (트리 구조)
  const treeNodeArbitrary = fc.letrec<{ value: number children: TreeNode[] }>(tie => ({
    tree: fc.record({
      value: fc.nat(),
      children: fc.array(tie('tree'), { maxLength: 3 }), // 자식 노드는 최대 3개
    }),
  })).tree

  interface TreeNode { value: number children: TreeNode[] }

  function sumTreeValues(node: TreeNode): number {
    return node.value + node.children.reduce((sum, child) => sum + sumTreeValues(child), 0)
  }

  test.prop([treeNodeArbitrary])('트리 노드 값 합계 테스트', (root) => {
    const totalSum = sumTreeValues(root)
    // 합계는 항상 0 이상이어야 함
    expect(totalSum).toBeGreaterThanOrEqual(root.value)
  })

  // 상태 기반 테스트를 위한 fc.context() 예시 (카운터)
  // test.prop([fc.commands(commands)])('카운터 상태 테스트', (initialModel, run) => { ... })
  // fc.context()는 상태 기반 모델 테스트에 사용되지만, 설정이 복잡하여 간단한 예시에서는 생략합니다.
  // 필요시 fast-check 문서를 참고하세요.

})

// --- 3. Helper 함수 정의 및 사용 ---
// 테스트에 사용될 함수
function calculateDiscount(price: number, percentage: number): number {
  if (price < 0 || percentage < 0 || percentage > 100) {
    throw new Error('Invalid input for discount calculation')
  }
  return price * (1 - percentage / 100)
}

it('할인 계산 함수 테스트', () => {
  // 유효한 입력값에 대한 테스트
  test.prop({
    price: fc.float({ min: 0, max: 10000 }), // 가격: 0 ~ 10000
    percentage: fc.float({ min: 0, max: 100 }), // 할인율: 0 ~ 100
  })('유효한 입력값 할인 계산', ({ price, percentage }) => {
    const discountedPrice = calculateDiscount(price, percentage)
    expect(discountedPrice).toBeGreaterThanOrEqual(0) // 할인된 가격은 0 이상
    expect(discountedPrice).toBeLessThanOrEqual(price) // 할인된 가격은 원래 가격 이하
    expect(discountedPrice).toBeCloseTo(price * (1 - percentage / 100)) // 예상 값과 거의 같아야 함
  })

  // 잘못된 입력값에 대한 테스트 (예외 발생 확인)
  test.prop({
    // 가격 또는 할인율이 음수이거나 할인율이 100을 초과하는 경우
    price: fc.oneof(fc.float({ min: -1000, max: -0.01 }), fc.float({ min: 0 })),
    percentage: fc.oneof(fc.float({ min: -100, max: -0.01 }), fc.float({ min: 100.01, max: 200 }), fc.float({min: 0, max: 100}))
  })('잘못된 입력값 예외 발생', ({ price, percentage }) => {
    // 전제 조건: 가격이 음수이거나, 할인율이 음수 또는 100 초과
    fc.pre(price < 0 || percentage < 0 || percentage > 100)

    // 잘못된 입력으로 함수 호출 시 에러가 발생하는지 확인
    expect(() => calculateDiscount(price, percentage)).toThrow('Invalid input')
  })
})

// --- 4. fast-check 고급 기능 활용 ---
it('fast-check 고급 기능 예시', () => {

  // --- 4.1 fc.chain: 동적 값 생성 ---
  // 먼저 생성된 값에 따라 다음 아비트러리를 결정합니다.
  // 예를 들어, 배열의 길이를 먼저 생성하고, 그 길이에 맞는 배열을 생성합니다.
  test.prop([
    // 먼저 0 이상 10 이하의 길이를 생성
    fc.nat(10).chain(length =>
      // 생성된 길이를 사용하여 튜플 아비트러리를 만듭니다.
      // 첫 번째 요소는 길이 자신, 두 번째 요소는 해당 길이를 가지는 정수 배열입니다.
      fc.tuple(fc.constant(length), fc.array(fc.integer(), { minLength: length, maxLength: length }))
    )
  ])('배열 길이와 실제 배열 내용 일치 검증 (fc.chain)', ([expectedLength, arr]) => {
    expect(arr.length).toBe(expectedLength)
  })

  // 사용자 ID를 먼저 생성하고, 해당 ID를 포함하는 이벤트 객체를 생성
  test.prop([
    fc.uuid().chain(userId =>
      fc.record({
        userId: fc.constant(userId), // 생성된 userId를 상수로 사용
        eventType: fc.string({ minLength: 1 }),
        timestamp: fc.date(),
        payload: fc.jsonObject(), // 임의의 JSON 객체 생성
      })
    )
  ])('이벤트 객체 내 사용자 ID 일치 검증 (fc.chain)', (event) => {
    expect(typeof event.userId).toBe('string')
    expect(event.userId.length).toBeGreaterThan(0) // UUID는 길이가 있음
    expect(typeof event.eventType).toBe('string')
    expect(event.timestamp instanceof Date).toBe(true)
    expect(typeof event.payload).toBe('object') // jsonObject는 객체 타입
  })


  // --- 4.2 fc.letrec: 상호 재귀적 데이터 구조 (심화) ---
  // 복잡한 JSON과 유사한 구조를 재귀적으로 생성합니다.
  const jsonValueArbitrary = fc.letrec<unknown>(tie => ({
    json: fc.oneof(
      fc.boolean(),
      fc.integer(),
      fc.double(),
      fc.string(),
      fc.constant(null),
      // 재귀적으로 배열과 객체를 정의
      fc.array(tie('json')), // 배열의 요소는 다시 jsonValueArbitrary
      fc.dictionary(fc.string(), tie('json')) // 객체의 값은 다시 jsonValueArbitrary
    )
  })).json

  // 생성된 JSON 구조를 직렬화/역직렬화해도 동일한지 테스트
  test.prop([jsonValueArbitrary])('JSON 구조 직렬화/역직렬화 일관성 (fc.letrec)', (value) => {
    try {
      const stringified = JSON.stringify(value)
      const parsed = JSON.parse(stringified)
      // NaN 같은 특수 값은 JSON 직렬화 시 null이 되므로, 이를 고려하여 비교
      if (Number.isNaN(value)) {
        expect(parsed).toBeNull()
      } else {
        expect(parsed).toEqual(value)
      }
    } catch (e) {
      // JSON.stringify는 순환 참조가 있는 객체를 처리할 수 없음
      // fast-check가 생성하는 값에는 순환 참조가 없을 것으로 기대하지만, 예외 처리 추가
      if (e instanceof TypeError && e.message.includes('circular structure')) {
        // 순환 참조는 fc.letrec에서 발생할 수 있으나, 여기서는 기본적인 JSON 타입만 사용하므로
        // 실제로는 발생하기 어려움. 발생 시 테스트 통과 처리 (혹은 다른 로직)
        return
      }
      throw e // 다른 종류의 에러는 다시 던짐
    }
  })

  // --- 4.3 fc.scheduler: 비동기 코드 순서 제어 ---
  // 비동기 작업들의 실행 순서를 제어하여 레이스 컨디션 등을 테스트합니다.
  test.prop([fc.scheduler()])('스케줄러를 이용한 비동기 작업 순서 테스트', async (scheduler) => {
    let counter = 0
    const promises: Promise<void>[] = []

    // 여러 비동기 작업을 스케줄러에 등록
    for (let i = 0 i < 5 ++i) {
      promises.push(scheduler.schedule(Promise.resolve().then(() => {
        // 각 작업은 counter를 1 증가시킴
        counter++
      })))
    }

    // 스케줄러가 모든 작업을 완료할 때까지 기다림
    await scheduler.waitAll()

    // 모든 작업이 순서에 관계없이 완료되면 counter는 5가 되어야 함
    expect(counter).toBe(5)
  })

  // 비동기 작업 간의 잠재적 레이스 컨디션 테스트 예시 (간단 버전)
  test.prop([fc.scheduler()])('스케줄러를 이용한 레이스 컨디션 모의 테스트', async (scheduler) => {
    let sharedResource = 0
    let task1Done = false
    let task2Done = false

    // 작업 1: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task1 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task1Done = true
    }))

    // 작업 2: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task2 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task2Done = true
    }))

    await scheduler.waitAll()

    // 스케줄러가 실행 순서를 조절하므로, 최종 결과는 1 또는 2가 될 수 있음 (레이스 컨디션 발생 시 1)
    expect(sharedResource).toBeGreaterThanOrEqual(1)
    expect(sharedResource).toBeLessThanOrEqual(2)
    expect(task1Done).toBe(true)
    expect(task2Done).toBe(true)

    // 만약 항상 2가 되기를 기대한다면, 이 테스트는 레이스 컨디션 발생 시 실패하게 됨
    // expect(sharedResource).toBe(2) // 이 단언은 실패할 수 있음
  })


  // --- 4.4 fc.context: 간단한 모델 기반 테스트 ---
  // 시스템의 상태 변화를 모델링하고, 실제 구현과 모델의 동작이 일치하는지 확인합니다.
  // 여기서는 간단한 카운터 모델을 테스트합니다.

  // 카운터 Command 정의
  // Command 인터페이스: check(model) -> boolean, run(model, real) -> void
  class IncrementCommand implements fc.Command<CounterModel, Counter> {
    check = (_model: Readonly<CounterModel>) => true // 항상 실행 가능
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 increment 실행
      model.count++
      real.increment()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'increment'
  }

  class DecrementCommand implements fc.Command<CounterModel, Counter> {
    // check: count가 0보다 클 때만 실행 가능 (모델 상태 기반)
    check = (model: Readonly<CounterModel>) => model.count > 0
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 decrement 실행
      model.count--
      real.decrement()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'decrement'
  }

  // 실제 카운터 구현
  class Counter {
    private value = 0
    increment() { this.value++ }
    decrement() { if (this.value > 0) this.value-- } // 실제 구현 제약 조건
    getCount() { return this.value }
  }

  // 카운터 모델 정의 (간단한 상태 객체)
  interface CounterModel { count: number }

  // Command 아비트러리 생성
  const counterCommands = fc.commands([
    fc.constant(new IncrementCommand()),
    fc.constant(new DecrementCommand()),
  ])

  // 모델 기반 테스트 실행
  test.prop([counterCommands])('카운터 모델 기반 테스트 (fc.context)', (cmds) => {
    // 초기 모델 상태
    const initialModel: CounterModel = { count: 0 }
    // 실제 시스템(카운터) 생성 함수
    const setup = () => new Counter()

    // fc.modelBased 실행 (이전 버전의 fc.context 역할)
    fc.modelBased(setup, initialModel)(cmds)

    // 참고: fc.modelBased는 내부적으로 fc.assert와 유사하게 동작하며,
    // check와 run 내부의 expect 단언이 실패하면 테스트 실패로 이어집니다.
    // 반환값이 없어 별도의 expect 단언은 필요하지 않습니다.
  })

  // --- 4.5 fc.frequency: 가중치 기반 선택 ---
  // 다양한 아비트러리 중 특정 아비트러리가 더 자주 생성되도록 가중치를 부여합니다.
  test.prop([
    fc.frequency(
      { weight: 10, arbitrary: fc.nat(100) },          // 0~100 자연수가 나올 확률 (가중치 10)
      { weight: 5, arbitrary: fc.string() },           // 문자열이 나올 확률 (가중치 5)
      { weight: 1, arbitrary: fc.boolean() },          // 불리언 값이 나올 확률 (가중치 1)
      { weight: 2, arbitrary: fc.constant(null) }      // null 값이 나올 확률 (가중치 2)
    )
  ])('가중치 기반 랜덤 값 생성 테스트 (fc.frequency)', (value) => {
    // 생성된 값의 타입을 확인하는 것 외에 특별한 단언은 어려움
    // 통계적으로 nat(100)이 가장 많이 생성될 것을 기대할 수 있음
    expect(value !== undefined).toBe(true) // 값은 항상 생성되어야 함
  })

})

"""
reference_test = """
import { expect } from 'vitest'
import { fc, test, it } from '@fast-check/vitest'

// --- 기본 설정 (선택 사항) ---
// 전역적으로 fast-check 설정을 변경할 수 있습니다.
// fc.configureGlobal({ seed: Date.now() }) // 테스트 실행 시마다 다른 시드 값 사용
// fc.configureGlobal({ numRuns: 50 }) // 기본 실행 횟수 변경 (기본값: 100)
// fc.configureGlobal({ endOnFailure: true }) // 첫 실패 시 즉시 종료 (Shrinking 비활성화)

// --- 1. 일회성 랜덤 모드 (One-time random mode) ---
// test 또는 it 함수 내에서 `g` 함수를 사용하여 랜덤 값을 생성합니다.
// 이 모드는 테스트를 한 번만 실행하며, 실패 시 동일한 시드 값으로 재현 가능합니다.
it('일회성 랜덤 모드 예시', () => {
  // 사용자 정보 객체를 랜덤하게 생성하여 테스트
  test('사용자 이름 표시 테스트 (g 함수 사용)', ({ g }) => {
    // Arrange: fc.string() 아비트러리를 사용하여 랜덤 문자열 생성
    const user = {
      firstName: g(fc.string({ minLength: 1 })), // 최소 길이 1 이상의 문자열
      lastName: g(fc.string({ minLength: 1 })),
      userId: g(fc.uuid()), // UUID 생성
    }

    function computeDisplayName(u: typeof user): string {
      return `${u.firstName} ${u.lastName} (${u.userId.substring(0, 8)})`
    }

    // Act
    const displayName = computeDisplayName(user)

    // Assert: 생성된 이름에 firstName과 lastName이 포함되어 있는지 확인
    expect(displayName).toContain(user.firstName)
    expect(displayName).toContain(user.lastName)
    expect(displayName).toContain(user.userId.substring(0, 8))
  })

  // 랜덤 값이 필요 없는 일반적인 Vitest 테스트도 함께 사용할 수 있습니다.
  test('랜덤 값 불필요 테스트', () => {
    expect(1 + 1).toBe(2)
  })
})

// --- 2. 전체 속성 기반 모드 (Full property-based mode) ---
// test.prop 또는 it.prop을 사용하여 속성 기반 테스트를 정의합니다.
// 여러 번의 랜덤 입력값에 대해 테스트를 실행하고, 실패 시 입력값을 축소하여 원인을 찾습니다.
it('전체 속성 기반 모드 예시', () => {
  // --- 2.1 기본 사용법 ---
  // 배열 형태의 아비트러리 전달
  test.prop([fc.integer(), fc.integer()])('덧셈의 교환 법칙 (배열)', (a, b) => {
    // 임의의 정수 a, b에 대해 a + b === b + a 여야 함
    expect(a + b).toBe(b + a)
  })

  // 객체 형태의 아비트러리 전달 (이름 지정)
  test.prop({ a: fc.nat(), b: fc.nat() })('덧셈의 결과는 입력값보다 크거나 같음 (객체)', ({ a, b }) => {
    // 임의의 자연수 a, b에 대해 a + b >= a 이고 a + b >= b 여야 함
    expect(a + b).toBeGreaterThanOrEqual(a)
    expect(a + b).toBeGreaterThanOrEqual(b)
  })

  // --- 2.2 다양한 아비트러리 활용 ---
  // 문자열과 배열 테스트
  test.prop([fc.string(), fc.array(fc.string())])('문자열 배열 길이 테스트', (prefix, arr) => {
    // 임의의 문자열 prefix와 문자열 배열 arr
    const result = arr.map(s => prefix + s)
    // 결과 배열의 길이는 원본 배열과 같아야 함
    expect(result.length).toBe(arr.length)
    // 결과 배열의 각 요소는 prefix로 시작해야 함
    result.forEach(item => {
      expect(item.startsWith(prefix)).toBe(true)
    })
  })

  // 객체 구조 테스트
  test.prop([fc.record({ id: fc.uuid(), score: fc.float({ min: 0, max: 100 }) })])('점수 객체 유효성 검사', (record) => {
    // id는 UUID 형식이어야 함
    expect(record.id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)
    // score는 0과 100 사이여야 함
    expect(record.score).toBeGreaterThanOrEqual(0)
    expect(record.score).toBeLessThanOrEqual(100)
  })

  // 불리언, 상수, 선택적 값 테스트
  test.prop([fc.boolean(), fc.constant(null), fc.oneof(fc.nat(), fc.string())])('다양한 타입 조합 테스트', (flag, nil, value) => {
    // flag는 true 또는 false
    expect(typeof flag).toBe('boolean')
    // nil은 항상 null
    expect(nil).toBeNull()
    // value는 자연수 또는 문자열
    expect(typeof value === 'number' || typeof value === 'string').toBe(true)
    if (typeof value === 'number') {
      expect(Number.isInteger(value)).toBe(true)
      expect(value).toBeGreaterThanOrEqual(0)
    }
  })

  // 튜플 테스트
  test.prop([fc.tuple(fc.string(), fc.integer())])('튜플 구조 및 타입 테스트', ([str, num]) => {
    expect(typeof str).toBe('string')
    expect(typeof num).toBe('number')
  })

  // --- 2.3 비동기 속성 테스트 ---
  // Promise를 반환하는 비동기 함수 테스트
  async function fetchData(id: number): Promise<{ id: number data: string }> {
    return new Promise(resolve => setTimeout(() => resolve({ id, data: `Data for ${id}` }), 10))
  }

  test.prop([fc.nat(100)])('비동기 데이터 가져오기 테스트', async (id) => {
    const result = await fetchData(id)
    expect(result.id).toBe(id)
    expect(result.data).toContain(String(id))
  })

  // --- 2.4 커스텀 파라미터 사용 ---
  // 특정 시드 값으로 테스트 재현 또는 실행 횟수 조절
  test.prop([fc.nat(), fc.nat()], { seed: 12345, numRuns: 50 })('특정 시드와 실행 횟수로 테스트', (a, b) => {
    // seed: 12345, numRuns: 50 설정으로 실행
    expect(a + b).toBe(b + a)
  })

  // --- 2.5 Vitest 모디파이어 사용 ---
  // .skip: 테스트 건너뛰기
  test.skip.prop([fc.string()])('이 테스트는 건너뜁니다', (text) => {
    expect(text.length).toBeGreaterThanOrEqual(0)
  })

  // .concurrent: 병렬 실행 (테스트 환경 설정에 따라 동작)
  test.concurrent.prop([fc.array(fc.integer())])('배열 정렬 테스트 (병렬)', (arr) => {
    const sorted = [...arr].sort((a, b) => a - b)
    for (let i = 0 i < sorted.length - 1 ++i) {
      expect(sorted[i]).toBeLessThanOrEqual(sorted[i + 1])
    }
  })

  // it.prop 사용 (test.prop과 동일)
  it('it.prop 사용 예시', () => {
    it.prop([fc.emailAddress()])('유효한 이메일 형식 테스트', (email) => {
      // 간단한 이메일 형식 검사 (실제로는 더 정교한 검사가 필요할 수 있음)
      expect(email).toContain('@')
      expect(email.split('@')[1]).toContain('.')
    })
  })

  // --- 2.6 전제 조건 (Preconditions) ---
  // 특정 조건을 만족하는 입력값에 대해서만 테스트 실행
  test.prop([fc.integer(), fc.integer()])('나눗셈 테스트 (0으로 나누지 않음)', (a, b) => {
    // 전제 조건: b는 0이 아니어야 함
    fc.pre(b !== 0)

    const result = a / b
    // 결과가 NaN, Infinity, -Infinity가 아닌 유한한 수여야 함
    expect(Number.isFinite(result)).toBe(true)
  })

  // --- 2.7 복잡한 아비트러리 조합 (letrec, mapToConstant 등) ---
  // 상호 재귀적인 데이터 구조 생성 예시 (트리 구조)
  const treeNodeArbitrary = fc.letrec<{ value: number children: TreeNode[] }>(tie => ({
    tree: fc.record({
      value: fc.nat(),
      children: fc.array(tie('tree'), { maxLength: 3 }), // 자식 노드는 최대 3개
    }),
  })).tree

  interface TreeNode { value: number children: TreeNode[] }

  function sumTreeValues(node: TreeNode): number {
    return node.value + node.children.reduce((sum, child) => sum + sumTreeValues(child), 0)
  }

  test.prop([treeNodeArbitrary])('트리 노드 값 합계 테스트', (root) => {
    const totalSum = sumTreeValues(root)
    // 합계는 항상 0 이상이어야 함
    expect(totalSum).toBeGreaterThanOrEqual(root.value)
  })

  // 상태 기반 테스트를 위한 fc.context() 예시 (카운터)
  // test.prop([fc.commands(commands)])('카운터 상태 테스트', (initialModel, run) => { ... })
  // fc.context()는 상태 기반 모델 테스트에 사용되지만, 설정이 복잡하여 간단한 예시에서는 생략합니다.
  // 필요시 fast-check 문서를 참고하세요.

})

// --- 3. Helper 함수 정의 및 사용 ---
// 테스트에 사용될 함수
function calculateDiscount(price: number, percentage: number): number {
  if (price < 0 || percentage < 0 || percentage > 100) {
    throw new Error('Invalid input for discount calculation')
  }
  return price * (1 - percentage / 100)
}

it('할인 계산 함수 테스트', () => {
  // 유효한 입력값에 대한 테스트
  test.prop({
    price: fc.float({ min: 0, max: 10000 }), // 가격: 0 ~ 10000
    percentage: fc.float({ min: 0, max: 100 }), // 할인율: 0 ~ 100
  })('유효한 입력값 할인 계산', ({ price, percentage }) => {
    const discountedPrice = calculateDiscount(price, percentage)
    expect(discountedPrice).toBeGreaterThanOrEqual(0) // 할인된 가격은 0 이상
    expect(discountedPrice).toBeLessThanOrEqual(price) // 할인된 가격은 원래 가격 이하
    expect(discountedPrice).toBeCloseTo(price * (1 - percentage / 100)) // 예상 값과 거의 같아야 함
  })

  // 잘못된 입력값에 대한 테스트 (예외 발생 확인)
  test.prop({
    // 가격 또는 할인율이 음수이거나 할인율이 100을 초과하는 경우
    price: fc.oneof(fc.float({ min: -1000, max: -0.01 }), fc.float({ min: 0 })),
    percentage: fc.oneof(fc.float({ min: -100, max: -0.01 }), fc.float({ min: 100.01, max: 200 }), fc.float({min: 0, max: 100}))
  })('잘못된 입력값 예외 발생', ({ price, percentage }) => {
    // 전제 조건: 가격이 음수이거나, 할인율이 음수 또는 100 초과
    fc.pre(price < 0 || percentage < 0 || percentage > 100)

    // 잘못된 입력으로 함수 호출 시 에러가 발생하는지 확인
    expect(() => calculateDiscount(price, percentage)).toThrow('Invalid input')
  })
})

// --- 4. fast-check 고급 기능 활용 ---
it('fast-check 고급 기능 예시', () => {

  // --- 4.1 fc.chain: 동적 값 생성 ---
  // 먼저 생성된 값에 따라 다음 아비트러리를 결정합니다.
  // 예를 들어, 배열의 길이를 먼저 생성하고, 그 길이에 맞는 배열을 생성합니다.
  test.prop([
    // 먼저 0 이상 10 이하의 길이를 생성
    fc.nat(10).chain(length =>
      // 생성된 길이를 사용하여 튜플 아비트러리를 만듭니다.
      // 첫 번째 요소는 길이 자신, 두 번째 요소는 해당 길이를 가지는 정수 배열입니다.
      fc.tuple(fc.constant(length), fc.array(fc.integer(), { minLength: length, maxLength: length }))
    )
  ])('배열 길이와 실제 배열 내용 일치 검증 (fc.chain)', ([expectedLength, arr]) => {
    expect(arr.length).toBe(expectedLength)
  })

  // 사용자 ID를 먼저 생성하고, 해당 ID를 포함하는 이벤트 객체를 생성
  test.prop([
    fc.uuid().chain(userId =>
      fc.record({
        userId: fc.constant(userId), // 생성된 userId를 상수로 사용
        eventType: fc.string({ minLength: 1 }),
        timestamp: fc.date(),
        payload: fc.jsonObject(), // 임의의 JSON 객체 생성
      })
    )
  ])('이벤트 객체 내 사용자 ID 일치 검증 (fc.chain)', (event) => {
    expect(typeof event.userId).toBe('string')
    expect(event.userId.length).toBeGreaterThan(0) // UUID는 길이가 있음
    expect(typeof event.eventType).toBe('string')
    expect(event.timestamp instanceof Date).toBe(true)
    expect(typeof event.payload).toBe('object') // jsonObject는 객체 타입
  })


  // --- 4.2 fc.letrec: 상호 재귀적 데이터 구조 (심화) ---
  // 복잡한 JSON과 유사한 구조를 재귀적으로 생성합니다.
  const jsonValueArbitrary = fc.letrec<unknown>(tie => ({
    json: fc.oneof(
      fc.boolean(),
      fc.integer(),
      fc.double(),
      fc.string(),
      fc.constant(null),
      // 재귀적으로 배열과 객체를 정의
      fc.array(tie('json')), // 배열의 요소는 다시 jsonValueArbitrary
      fc.dictionary(fc.string(), tie('json')) // 객체의 값은 다시 jsonValueArbitrary
    )
  })).json

  // 생성된 JSON 구조를 직렬화/역직렬화해도 동일한지 테스트
  test.prop([jsonValueArbitrary])('JSON 구조 직렬화/역직렬화 일관성 (fc.letrec)', (value) => {
    try {
      const stringified = JSON.stringify(value)
      const parsed = JSON.parse(stringified)
      // NaN 같은 특수 값은 JSON 직렬화 시 null이 되므로, 이를 고려하여 비교
      if (Number.isNaN(value)) {
        expect(parsed).toBeNull()
      } else {
        expect(parsed).toEqual(value)
      }
    } catch (e) {
      // JSON.stringify는 순환 참조가 있는 객체를 처리할 수 없음
      // fast-check가 생성하는 값에는 순환 참조가 없을 것으로 기대하지만, 예외 처리 추가
      if (e instanceof TypeError && e.message.includes('circular structure')) {
        // 순환 참조는 fc.letrec에서 발생할 수 있으나, 여기서는 기본적인 JSON 타입만 사용하므로
        // 실제로는 발생하기 어려움. 발생 시 테스트 통과 처리 (혹은 다른 로직)
        return
      }
      throw e // 다른 종류의 에러는 다시 던짐
    }
  })

  // --- 4.3 fc.scheduler: 비동기 코드 순서 제어 ---
  // 비동기 작업들의 실행 순서를 제어하여 레이스 컨디션 등을 테스트합니다.
  test.prop([fc.scheduler()])('스케줄러를 이용한 비동기 작업 순서 테스트', async (scheduler) => {
    let counter = 0
    const promises: Promise<void>[] = []

    // 여러 비동기 작업을 스케줄러에 등록
    for (let i = 0 i < 5 ++i) {
      promises.push(scheduler.schedule(Promise.resolve().then(() => {
        // 각 작업은 counter를 1 증가시킴
        counter++
      })))
    }

    // 스케줄러가 모든 작업을 완료할 때까지 기다림
    await scheduler.waitAll()

    // 모든 작업이 순서에 관계없이 완료되면 counter는 5가 되어야 함
    expect(counter).toBe(5)
  })

  // 비동기 작업 간의 잠재적 레이스 컨디션 테스트 예시 (간단 버전)
  test.prop([fc.scheduler()])('스케줄러를 이용한 레이스 컨디션 모의 테스트', async (scheduler) => {
    let sharedResource = 0
    let task1Done = false
    let task2Done = false

    // 작업 1: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task1 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task1Done = true
    }))

    // 작업 2: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task2 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task2Done = true
    }))

    await scheduler.waitAll()

    // 스케줄러가 실행 순서를 조절하므로, 최종 결과는 1 또는 2가 될 수 있음 (레이스 컨디션 발생 시 1)
    expect(sharedResource).toBeGreaterThanOrEqual(1)
    expect(sharedResource).toBeLessThanOrEqual(2)
    expect(task1Done).toBe(true)
    expect(task2Done).toBe(true)

    // 만약 항상 2가 되기를 기대한다면, 이 테스트는 레이스 컨디션 발생 시 실패하게 됨
    // expect(sharedResource).toBe(2) // 이 단언은 실패할 수 있음
  })


  // --- 4.4 fc.context: 간단한 모델 기반 테스트 ---
  // 시스템의 상태 변화를 모델링하고, 실제 구현과 모델의 동작이 일치하는지 확인합니다.
  // 여기서는 간단한 카운터 모델을 테스트합니다.

  // 카운터 Command 정의
  // Command 인터페이스: check(model) -> boolean, run(model, real) -> void
  class IncrementCommand implements fc.Command<CounterModel, Counter> {
    check = (_model: Readonly<CounterModel>) => true // 항상 실행 가능
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 increment 실행
      model.count++
      real.increment()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'increment'
  }

  class DecrementCommand implements fc.Command<CounterModel, Counter> {
    // check: count가 0보다 클 때만 실행 가능 (모델 상태 기반)
    check = (model: Readonly<CounterModel>) => model.count > 0
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 decrement 실행
      model.count--
      real.decrement()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'decrement'
  }

  // 실제 카운터 구현
  class Counter {
    private value = 0
    increment() { this.value++ }
    decrement() { if (this.value > 0) this.value-- } // 실제 구현 제약 조건
    getCount() { return this.value }
  }

  // 카운터 모델 정의 (간단한 상태 객체)
  interface CounterModel { count: number }

  // Command 아비트러리 생성
  const counterCommands = fc.commands([
    fc.constant(new IncrementCommand()),
    fc.constant(new DecrementCommand()),
  ])

  // 모델 기반 테스트 실행
  test.prop([counterCommands])('카운터 모델 기반 테스트 (fc.context)', (cmds) => {
    // 초기 모델 상태
    const initialModel: CounterModel = { count: 0 }
    // 실제 시스템(카운터) 생성 함수
    const setup = () => new Counter()

    // fc.modelBased 실행 (이전 버전의 fc.context 역할)
    fc.modelBased(setup, initialModel)(cmds)

    // 참고: fc.modelBased는 내부적으로 fc.assert와 유사하게 동작하며,
    // check와 run 내부의 expect 단언이 실패하면 테스트 실패로 이어집니다.
    // 반환값이 없어 별도의 expect 단언은 필요하지 않습니다.
  })

  // --- 4.5 fc.frequency: 가중치 기반 선택 ---
  // 다양한 아비트러리 중 특정 아비트러리가 더 자주 생성되도록 가중치를 부여합니다.
  test.prop([
    fc.frequency(
      { weight: 10, arbitrary: fc.nat(100) },          // 0~100 자연수가 나올 확률 (가중치 10)
      { weight: 5, arbitrary: fc.string() },           // 문자열이 나올 확률 (가중치 5)
      { weight: 1, arbitrary: fc.boolean() },          // 불리언 값이 나올 확률 (가중치 1)
      { weight: 2, arbitrary: fc.constant(null) }      // null 값이 나올 확률 (가중치 2)
    )
  ])('가중치 기반 랜덤 값 생성 테스트 (fc.frequency)', (value) => {
    // 생성된 값의 타입을 확인하는 것 외에 특별한 단언은 어려움
    // 통계적으로 nat(100)이 가장 많이 생성될 것을 기대할 수 있음
    expect(value !== undefined).toBe(true) // 값은 항상 생성되어야 함
  })

})

"""



[tests.javascript]

overrideTestRunScript = "vitest --run TEST_FILEPATH"

# # A multiline string, delimited with triple-quotes ("""),
# # containing import declaration to use in each test file.
overrideImports = """
import { fc, test, it } from '@fast-check/vitest'
import { expect } from 'vitest'
"""
