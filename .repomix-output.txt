This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-05T00:50:20.732Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.browserslistrc
.codiumai.toml
.cursorignore
.gitignore
.markdownlint.json
.npmrc
.nvmrc
.prettierignore
.prettierrc
.stylelintignore
.stylelintrc.json
.syncpackrc
apps/boiler_plates/.npmrc
apps/boiler_plates/e2e/basic.test.js
apps/boiler_plates/e2e/traverse.test.js
apps/boiler_plates/package.json
apps/boiler_plates/playwright.config.js
apps/boiler_plates/postcss.config.js
apps/boiler_plates/src/app.html
apps/boiler_plates/src/base.test.js
apps/boiler_plates/src/hooks.client.ts
apps/boiler_plates/src/hooks.server.ts
apps/boiler_plates/src/hooks.ts
apps/boiler_plates/src/lib/index.js
apps/boiler_plates/src/paraglide.ts
apps/boiler_plates/src/routes/+layout.svelte
apps/boiler_plates/src/routes/+page.svelte
apps/boiler_plates/src/routes/about/+page.svelte
apps/boiler_plates/src/routes/base.js
apps/boiler_plates/src/routes/lorem/+page.svelte
apps/boiler_plates/svelte.config.js
apps/boiler_plates/tsconfig.json
apps/boiler_plates/turbo.json
apps/boiler_plates/vite.config.js
apps/Swift_Linker/package.json
apps/Swift_Linker/src/team_match_legacy/basic.js
apps/Swift_Linker/src/team_match_legacy/cohort_distribution.js
apps/Swift_Linker/src/team_match_legacy/config_conditions.js
apps/Swift_Linker/src/team_match_legacy/monads.js
apps/Swift_Linker/src/team_match_legacy/random_engine.js
apps/Swift_Linker/src/team_matching/cohort_distribution.js
apps/Swift_Linker/src/team_matching/monads.js
apps/Swift_Linker/src/team_matching/monads.test.js
apps/Swift_Linker/src/utilities/functions/utilities.js
apps/Swift_Linker/tsconfig.json
deno.json
desktop.ini
eslint.config.js
libraries/base/e2e/basic.test.js
libraries/base/e2e/traverse.test.js
libraries/base/package.json
libraries/base/playwright.config.js
libraries/base/postcss.config.js
libraries/base/src/app.css
libraries/base/src/app.html
libraries/base/src/base.css
libraries/base/src/base.js
libraries/base/src/base.test.js
libraries/base/src/baseClasses.css
libraries/base/src/baseCSS.css
libraries/base/src/baseTest.js
libraries/base/src/baseVariables.css
libraries/base/src/daisyUI.css
libraries/base/src/fontFace.css
libraries/base/src/fontStyle.css
libraries/base/src/hooks.client.ts
libraries/base/src/hooks.server.ts
libraries/base/src/hooks.ts
libraries/base/src/routes/layout.svelte
libraries/base/src/tailwind.css
libraries/base/svelte.config.js
libraries/base/tsconfig.json
libraries/base/vite.config.js
libraries/helpers/package.json
libraries/helpers/src/base.test.js
libraries/helpers/src/monads.js
libraries/helpers/src/mutative.js
libraries/helpers/src/R.js
libraries/helpers/src/random_engine.js
libraries/helpers/src/validator.js
libraries/helpers/tsconfig.json
libraries/paraglide/messages/en.json
libraries/paraglide/messages/ko.json
libraries/paraglide/package.json
libraries/paraglide/project.inlang/.gitignore
libraries/paraglide/project.inlang/project_id
libraries/paraglide/project.inlang/settings.json
libraries/ui/components.json
libraries/ui/package.json
libraries/ui/src/app.css
libraries/ui/src/app.d.ts
libraries/ui/src/app.html
libraries/ui/src/base.test.js
libraries/ui/src/custom/icon.svelte
libraries/ui/src/daisyui/button.stories.svelte
libraries/ui/src/daisyui/button.svelte
libraries/ui/src/shadcn/components/ui/accordion/accordion-content.svelte
libraries/ui/src/shadcn/components/ui/accordion/accordion-item.svelte
libraries/ui/src/shadcn/components/ui/accordion/accordion-trigger.svelte
libraries/ui/src/shadcn/components/ui/accordion/index.ts
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-action.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-cancel.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-content.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-description.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-footer.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-header.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-overlay.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-title.svelte
libraries/ui/src/shadcn/components/ui/alert-dialog/index.ts
libraries/ui/src/shadcn/components/ui/alert/alert-description.svelte
libraries/ui/src/shadcn/components/ui/alert/alert-title.svelte
libraries/ui/src/shadcn/components/ui/alert/alert.svelte
libraries/ui/src/shadcn/components/ui/alert/index.ts
libraries/ui/src/shadcn/components/ui/aspect-ratio/index.ts
libraries/ui/src/shadcn/components/ui/avatar/avatar-fallback.svelte
libraries/ui/src/shadcn/components/ui/avatar/avatar-image.svelte
libraries/ui/src/shadcn/components/ui/avatar/avatar.svelte
libraries/ui/src/shadcn/components/ui/avatar/index.ts
libraries/ui/src/shadcn/components/ui/badge/badge.svelte
libraries/ui/src/shadcn/components/ui/badge/index.ts
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-ellipsis.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-item.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-link.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-list.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-page.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-separator.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb.svelte
libraries/ui/src/shadcn/components/ui/breadcrumb/index.ts
libraries/ui/src/shadcn/components/ui/button/button.svelte
libraries/ui/src/shadcn/components/ui/button/index.js
libraries/ui/src/shadcn/components/ui/button/index.ts
libraries/ui/src/shadcn/components/ui/calendar/calendar-cell.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-day.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-body.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-head.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-row.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-grid.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-head-cell.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-header.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-heading.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-months.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-next-button.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar-prev-button.svelte
libraries/ui/src/shadcn/components/ui/calendar/calendar.svelte
libraries/ui/src/shadcn/components/ui/calendar/index.ts
libraries/ui/src/shadcn/components/ui/card/card-content.svelte
libraries/ui/src/shadcn/components/ui/card/card-description.svelte
libraries/ui/src/shadcn/components/ui/card/card-footer.svelte
libraries/ui/src/shadcn/components/ui/card/card-header.svelte
libraries/ui/src/shadcn/components/ui/card/card-title.svelte
libraries/ui/src/shadcn/components/ui/card/card.svelte
libraries/ui/src/shadcn/components/ui/card/index.ts
libraries/ui/src/shadcn/components/ui/carousel/carousel-content.svelte
libraries/ui/src/shadcn/components/ui/carousel/carousel-item.svelte
libraries/ui/src/shadcn/components/ui/carousel/carousel-next.svelte
libraries/ui/src/shadcn/components/ui/carousel/carousel-previous.svelte
libraries/ui/src/shadcn/components/ui/carousel/carousel.svelte
libraries/ui/src/shadcn/components/ui/carousel/context.ts
libraries/ui/src/shadcn/components/ui/carousel/index.ts
libraries/ui/src/shadcn/components/ui/checkbox/checkbox.svelte
libraries/ui/src/shadcn/components/ui/checkbox/index.ts
libraries/ui/src/shadcn/components/ui/collapsible/index.ts
libraries/ui/src/shadcn/components/ui/command/command-dialog.svelte
libraries/ui/src/shadcn/components/ui/command/command-empty.svelte
libraries/ui/src/shadcn/components/ui/command/command-group.svelte
libraries/ui/src/shadcn/components/ui/command/command-input.svelte
libraries/ui/src/shadcn/components/ui/command/command-item.svelte
libraries/ui/src/shadcn/components/ui/command/command-link-item.svelte
libraries/ui/src/shadcn/components/ui/command/command-list.svelte
libraries/ui/src/shadcn/components/ui/command/command-separator.svelte
libraries/ui/src/shadcn/components/ui/command/command-shortcut.svelte
libraries/ui/src/shadcn/components/ui/command/command.svelte
libraries/ui/src/shadcn/components/ui/command/index.ts
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-checkbox-item.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-content.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-group-heading.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-item.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-radio-item.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-separator.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-shortcut.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-sub-content.svelte
libraries/ui/src/shadcn/components/ui/context-menu/context-menu-sub-trigger.svelte
libraries/ui/src/shadcn/components/ui/context-menu/index.ts
libraries/ui/src/shadcn/components/ui/data-table/data-table.svelte.ts
libraries/ui/src/shadcn/components/ui/data-table/flex-render.svelte
libraries/ui/src/shadcn/components/ui/data-table/index.ts
libraries/ui/src/shadcn/components/ui/data-table/render-helpers.ts
libraries/ui/src/shadcn/components/ui/dialog/dialog-content.svelte
libraries/ui/src/shadcn/components/ui/dialog/dialog-description.svelte
libraries/ui/src/shadcn/components/ui/dialog/dialog-footer.svelte
libraries/ui/src/shadcn/components/ui/dialog/dialog-header.svelte
libraries/ui/src/shadcn/components/ui/dialog/dialog-overlay.svelte
libraries/ui/src/shadcn/components/ui/dialog/dialog-title.svelte
libraries/ui/src/shadcn/components/ui/dialog/index.ts
libraries/ui/src/shadcn/components/ui/drawer/drawer-content.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-description.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-footer.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-header.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-nested.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-overlay.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer-title.svelte
libraries/ui/src/shadcn/components/ui/drawer/drawer.svelte
libraries/ui/src/shadcn/components/ui/drawer/index.ts
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-checkbox-item.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-content.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-group-heading.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-item.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-label.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-radio-item.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-separator.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-shortcut.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-sub-content.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-sub-trigger.svelte
libraries/ui/src/shadcn/components/ui/dropdown-menu/index.ts
libraries/ui/src/shadcn/components/ui/form/form-button.svelte
libraries/ui/src/shadcn/components/ui/form/form-description.svelte
libraries/ui/src/shadcn/components/ui/form/form-element-field.svelte
libraries/ui/src/shadcn/components/ui/form/form-field-errors.svelte
libraries/ui/src/shadcn/components/ui/form/form-field.svelte
libraries/ui/src/shadcn/components/ui/form/form-fieldset.svelte
libraries/ui/src/shadcn/components/ui/form/form-label.svelte
libraries/ui/src/shadcn/components/ui/form/form-legend.svelte
libraries/ui/src/shadcn/components/ui/form/index.ts
libraries/ui/src/shadcn/components/ui/hover-card/hover-card-content.svelte
libraries/ui/src/shadcn/components/ui/hover-card/index.ts
libraries/ui/src/shadcn/components/ui/input-otp/index.ts
libraries/ui/src/shadcn/components/ui/input-otp/input-otp-group.svelte
libraries/ui/src/shadcn/components/ui/input-otp/input-otp-separator.svelte
libraries/ui/src/shadcn/components/ui/input-otp/input-otp-slot.svelte
libraries/ui/src/shadcn/components/ui/input-otp/input-otp.svelte
libraries/ui/src/shadcn/components/ui/input/index.ts
libraries/ui/src/shadcn/components/ui/input/input.svelte
libraries/ui/src/shadcn/components/ui/label/index.ts
libraries/ui/src/shadcn/components/ui/label/label.svelte
libraries/ui/src/shadcn/components/ui/menubar/index.ts
libraries/ui/src/shadcn/components/ui/menubar/menubar-checkbox-item.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-content.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-group-heading.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-item.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-radio-item.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-separator.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-shortcut.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-sub-content.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-sub-trigger.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar-trigger.svelte
libraries/ui/src/shadcn/components/ui/menubar/menubar.svelte
libraries/ui/src/shadcn/components/ui/pagination/index.ts
libraries/ui/src/shadcn/components/ui/pagination/pagination-content.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination-ellipsis.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination-item.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination-link.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination-next-button.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination-prev-button.svelte
libraries/ui/src/shadcn/components/ui/pagination/pagination.svelte
libraries/ui/src/shadcn/components/ui/popover/index.ts
libraries/ui/src/shadcn/components/ui/popover/popover-content.svelte
libraries/ui/src/shadcn/components/ui/progress/index.ts
libraries/ui/src/shadcn/components/ui/progress/progress.svelte
libraries/ui/src/shadcn/components/ui/radio-group/index.ts
libraries/ui/src/shadcn/components/ui/radio-group/radio-group-item.svelte
libraries/ui/src/shadcn/components/ui/radio-group/radio-group.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/index.ts
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-cell.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-day.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-grid-row.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-grid.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-head-cell.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-header.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-heading.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-months.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-next-button.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-prev-button.svelte
libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar.svelte
libraries/ui/src/shadcn/components/ui/resizable/index.ts
libraries/ui/src/shadcn/components/ui/resizable/resizable-handle.svelte
libraries/ui/src/shadcn/components/ui/resizable/resizable-pane-group.svelte
libraries/ui/src/shadcn/components/ui/scroll-area/index.ts
libraries/ui/src/shadcn/components/ui/scroll-area/scroll-area-scrollbar.svelte
libraries/ui/src/shadcn/components/ui/scroll-area/scroll-area.svelte
libraries/ui/src/shadcn/components/ui/select/index.ts
libraries/ui/src/shadcn/components/ui/select/select-content.svelte
libraries/ui/src/shadcn/components/ui/select/select-group-heading.svelte
libraries/ui/src/shadcn/components/ui/select/select-item.svelte
libraries/ui/src/shadcn/components/ui/select/select-scroll-down-button.svelte
libraries/ui/src/shadcn/components/ui/select/select-scroll-up-button.svelte
libraries/ui/src/shadcn/components/ui/select/select-separator.svelte
libraries/ui/src/shadcn/components/ui/select/select-trigger.svelte
libraries/ui/src/shadcn/components/ui/separator/index.ts
libraries/ui/src/shadcn/components/ui/separator/separator.svelte
libraries/ui/src/shadcn/components/ui/sheet/index.ts
libraries/ui/src/shadcn/components/ui/sheet/sheet-content.svelte
libraries/ui/src/shadcn/components/ui/sheet/sheet-description.svelte
libraries/ui/src/shadcn/components/ui/sheet/sheet-footer.svelte
libraries/ui/src/shadcn/components/ui/sheet/sheet-header.svelte
libraries/ui/src/shadcn/components/ui/sheet/sheet-overlay.svelte
libraries/ui/src/shadcn/components/ui/sheet/sheet-title.svelte
libraries/ui/src/shadcn/components/ui/sidebar/constants.ts
libraries/ui/src/shadcn/components/ui/sidebar/context.svelte.ts
libraries/ui/src/shadcn/components/ui/sidebar/index.ts
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-content.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-footer.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-action.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-content.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-label.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-header.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-input.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-inset.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-action.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-badge.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-button.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-item.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-skeleton.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub-button.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub-item.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-provider.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-rail.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-separator.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar-trigger.svelte
libraries/ui/src/shadcn/components/ui/sidebar/sidebar.svelte
libraries/ui/src/shadcn/components/ui/skeleton/index.ts
libraries/ui/src/shadcn/components/ui/skeleton/skeleton.svelte
libraries/ui/src/shadcn/components/ui/slider/index.ts
libraries/ui/src/shadcn/components/ui/slider/slider.svelte
libraries/ui/src/shadcn/components/ui/sonner/index.ts
libraries/ui/src/shadcn/components/ui/sonner/sonner.svelte
libraries/ui/src/shadcn/components/ui/switch/index.ts
libraries/ui/src/shadcn/components/ui/switch/switch.svelte
libraries/ui/src/shadcn/components/ui/table/index.ts
libraries/ui/src/shadcn/components/ui/table/table-body.svelte
libraries/ui/src/shadcn/components/ui/table/table-caption.svelte
libraries/ui/src/shadcn/components/ui/table/table-cell.svelte
libraries/ui/src/shadcn/components/ui/table/table-footer.svelte
libraries/ui/src/shadcn/components/ui/table/table-head.svelte
libraries/ui/src/shadcn/components/ui/table/table-header.svelte
libraries/ui/src/shadcn/components/ui/table/table-row.svelte
libraries/ui/src/shadcn/components/ui/table/table.svelte
libraries/ui/src/shadcn/components/ui/tabs/index.ts
libraries/ui/src/shadcn/components/ui/tabs/tabs-content.svelte
libraries/ui/src/shadcn/components/ui/tabs/tabs-list.svelte
libraries/ui/src/shadcn/components/ui/tabs/tabs-trigger.svelte
libraries/ui/src/shadcn/components/ui/textarea/index.ts
libraries/ui/src/shadcn/components/ui/textarea/textarea.svelte
libraries/ui/src/shadcn/components/ui/toggle-group/index.ts
libraries/ui/src/shadcn/components/ui/toggle-group/toggle-group-item.svelte
libraries/ui/src/shadcn/components/ui/toggle-group/toggle-group.svelte
libraries/ui/src/shadcn/components/ui/toggle/index.ts
libraries/ui/src/shadcn/components/ui/toggle/toggle.svelte
libraries/ui/src/shadcn/components/ui/tooltip/index.ts
libraries/ui/src/shadcn/components/ui/tooltip/tooltip-content.svelte
libraries/ui/src/shadcn/custom/button.svelte
libraries/ui/src/shadcn/hooks/is-mobile.svelte.ts
libraries/ui/src/shadcn/hooks/justJS.js
libraries/ui/src/shadcn/utils.js
libraries/ui/tsconfig.json
package.json
pnpm-workspace.yaml
scripts/common/package.json
storybook/e2e/basic.test.js
storybook/e2e/cache.js
storybook/e2e/fast-check.test.js
storybook/e2e/gremlins.test.js
storybook/e2e/universal-testers-doc-1.md
storybook/e2e/universal-testers-doc-2.md
storybook/e2e/universal-testers.js
storybook/index.html
storybook/package.json
storybook/playwright.config.js
storybook/postcss.config.js
storybook/public/vite.svg
storybook/src/app.css
storybook/src/App.svelte
storybook/src/assets/svelte.svg
storybook/src/lib/Counter.svelte
storybook/src/main.js
storybook/src/vite-env.d.ts
storybook/svelte.config.js
storybook/tsconfig.json
storybook/vite.config.js
tsconfig.json
turbo.json
wallaby.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".browserslistrc">
[production]
defaults

[modern]
last 1 chrome version
last 1 firefox version
</file>

<file path=".codiumai.toml">
[tests]

framework = "Vitest"
utility_library = "fast-check"
use_mocks = true
num_desired_tests = 20
plan_instructions = """
0. Note that The codebase uses a functional programming approach. It uses concepts of the functional programming, such as currying, monads, monoids, and immutability. Note that All classes in this codebase are monads and monoids.
1. WRITE ALL TEXT IN KOREAN LANGUAGE except for code. Such as strings, behaviors, behaviors coverage, text in quotes, etc. in Korean.
2. Devise edge cases, extreme cases that are vulnerable to error. Devise "what ifs" that the original coders would not have considered, that could lead to surprising or unexpected results.
3. The description contained in `it' should not be meaninglessly long and should be as short as possible. 존댓말을 쓰지 마라. 항상 문장을 명사형으로 끝내라. 예를 들어서, '~생성', '~초기화', '~확인', '~에러', '~유지', '~처리' 등으로. 예시에 없는 형태를 써야한다 하더라도, 가장 짧은 형태로 문장을 명사형으로 끝내라.
4. Whenever it makes sense to use Property Based Tests, always implement them using 'fast-check'. Use your knowledge of fast-check and its usage.
NOTE THIS: The syntax of fast-check in Vitest is `it.prop({myProperty: fc.something()})('description', (myProperty) => { ... })`. i.e., instead of using `fc.assert`, use `it.prop` and `expect`. Here's examples:
```
it.prop({ number1: fc.nat(), number2: fc.nat() })('교환법칙', ({ number1, number2 }) => {
	return (number1 + number2 === number2 + number1)
})
it.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('서브스트링이 포함', ({ a, b, c }) => {
	expect((a + b + c).includes(a)).toBe(true)
	expect((a + b + c).includes(b)).toBe(true)
	expect((a + b + c).includes(c)).toBe(true)
})
```
"""
example_test = """
import { expect } from 'vitest'
import { fc, test, it } from '@fast-check/vitest'

// --- 기본 설정 (선택 사항) ---
// 전역적으로 fast-check 설정을 변경할 수 있습니다.
// fc.configureGlobal({ seed: Date.now() }) // 테스트 실행 시마다 다른 시드 값 사용
// fc.configureGlobal({ numRuns: 50 }) // 기본 실행 횟수 변경 (기본값: 100)
// fc.configureGlobal({ endOnFailure: true }) // 첫 실패 시 즉시 종료 (Shrinking 비활성화)

// --- 1. 일회성 랜덤 모드 (One-time random mode) ---
// test 또는 it 함수 내에서 `g` 함수를 사용하여 랜덤 값을 생성합니다.
// 이 모드는 테스트를 한 번만 실행하며, 실패 시 동일한 시드 값으로 재현 가능합니다.
it('일회성 랜덤 모드 예시', () => {
  // 사용자 정보 객체를 랜덤하게 생성하여 테스트
  test('사용자 이름 표시 테스트 (g 함수 사용)', ({ g }) => {
    // Arrange: fc.string() 아비트러리를 사용하여 랜덤 문자열 생성
    const user = {
      firstName: g(fc.string({ minLength: 1 })), // 최소 길이 1 이상의 문자열
      lastName: g(fc.string({ minLength: 1 })),
      userId: g(fc.uuid()), // UUID 생성
    }

    function computeDisplayName(u: typeof user): string {
      return `${u.firstName} ${u.lastName} (${u.userId.substring(0, 8)})`
    }

    // Act
    const displayName = computeDisplayName(user)

    // Assert: 생성된 이름에 firstName과 lastName이 포함되어 있는지 확인
    expect(displayName).toContain(user.firstName)
    expect(displayName).toContain(user.lastName)
    expect(displayName).toContain(user.userId.substring(0, 8))
  })

  // 랜덤 값이 필요 없는 일반적인 Vitest 테스트도 함께 사용할 수 있습니다.
  test('랜덤 값 불필요 테스트', () => {
    expect(1 + 1).toBe(2)
  })
})

// --- 2. 전체 속성 기반 모드 (Full property-based mode) ---
// test.prop 또는 it.prop을 사용하여 속성 기반 테스트를 정의합니다.
// 여러 번의 랜덤 입력값에 대해 테스트를 실행하고, 실패 시 입력값을 축소하여 원인을 찾습니다.
it('전체 속성 기반 모드 예시', () => {
  // --- 2.1 기본 사용법 ---
  // 배열 형태의 아비트러리 전달
  test.prop([fc.integer(), fc.integer()])('덧셈의 교환 법칙 (배열)', (a, b) => {
    // 임의의 정수 a, b에 대해 a + b === b + a 여야 함
    expect(a + b).toBe(b + a)
  })

  // 객체 형태의 아비트러리 전달 (이름 지정)
  test.prop({ a: fc.nat(), b: fc.nat() })('덧셈의 결과는 입력값보다 크거나 같음 (객체)', ({ a, b }) => {
    // 임의의 자연수 a, b에 대해 a + b >= a 이고 a + b >= b 여야 함
    expect(a + b).toBeGreaterThanOrEqual(a)
    expect(a + b).toBeGreaterThanOrEqual(b)
  })

  // --- 2.2 다양한 아비트러리 활용 ---
  // 문자열과 배열 테스트
  test.prop([fc.string(), fc.array(fc.string())])('문자열 배열 길이 테스트', (prefix, arr) => {
    // 임의의 문자열 prefix와 문자열 배열 arr
    const result = arr.map(s => prefix + s)
    // 결과 배열의 길이는 원본 배열과 같아야 함
    expect(result.length).toBe(arr.length)
    // 결과 배열의 각 요소는 prefix로 시작해야 함
    result.forEach(item => {
      expect(item.startsWith(prefix)).toBe(true)
    })
  })

  // 객체 구조 테스트
  test.prop([fc.record({ id: fc.uuid(), score: fc.float({ min: 0, max: 100 }) })])('점수 객체 유효성 검사', (record) => {
    // id는 UUID 형식이어야 함
    expect(record.id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)
    // score는 0과 100 사이여야 함
    expect(record.score).toBeGreaterThanOrEqual(0)
    expect(record.score).toBeLessThanOrEqual(100)
  })

  // 불리언, 상수, 선택적 값 테스트
  test.prop([fc.boolean(), fc.constant(null), fc.oneof(fc.nat(), fc.string())])('다양한 타입 조합 테스트', (flag, nil, value) => {
    // flag는 true 또는 false
    expect(typeof flag).toBe('boolean')
    // nil은 항상 null
    expect(nil).toBeNull()
    // value는 자연수 또는 문자열
    expect(typeof value === 'number' || typeof value === 'string').toBe(true)
    if (typeof value === 'number') {
      expect(Number.isInteger(value)).toBe(true)
      expect(value).toBeGreaterThanOrEqual(0)
    }
  })

  // 튜플 테스트
  test.prop([fc.tuple(fc.string(), fc.integer())])('튜플 구조 및 타입 테스트', ([str, num]) => {
    expect(typeof str).toBe('string')
    expect(typeof num).toBe('number')
  })

  // --- 2.3 비동기 속성 테스트 ---
  // Promise를 반환하는 비동기 함수 테스트
  async function fetchData(id: number): Promise<{ id: number data: string }> {
    return new Promise(resolve => setTimeout(() => resolve({ id, data: `Data for ${id}` }), 10))
  }

  test.prop([fc.nat(100)])('비동기 데이터 가져오기 테스트', async (id) => {
    const result = await fetchData(id)
    expect(result.id).toBe(id)
    expect(result.data).toContain(String(id))
  })

  // --- 2.4 커스텀 파라미터 사용 ---
  // 특정 시드 값으로 테스트 재현 또는 실행 횟수 조절
  test.prop([fc.nat(), fc.nat()], { seed: 12345, numRuns: 50 })('특정 시드와 실행 횟수로 테스트', (a, b) => {
    // seed: 12345, numRuns: 50 설정으로 실행
    expect(a + b).toBe(b + a)
  })

  // --- 2.5 Vitest 모디파이어 사용 ---
  // .skip: 테스트 건너뛰기
  test.skip.prop([fc.string()])('이 테스트는 건너뜁니다', (text) => {
    expect(text.length).toBeGreaterThanOrEqual(0)
  })

  // .concurrent: 병렬 실행 (테스트 환경 설정에 따라 동작)
  test.concurrent.prop([fc.array(fc.integer())])('배열 정렬 테스트 (병렬)', (arr) => {
    const sorted = [...arr].sort((a, b) => a - b)
    for (let i = 0 i < sorted.length - 1 ++i) {
      expect(sorted[i]).toBeLessThanOrEqual(sorted[i + 1])
    }
  })

  // it.prop 사용 (test.prop과 동일)
  it('it.prop 사용 예시', () => {
    it.prop([fc.emailAddress()])('유효한 이메일 형식 테스트', (email) => {
      // 간단한 이메일 형식 검사 (실제로는 더 정교한 검사가 필요할 수 있음)
      expect(email).toContain('@')
      expect(email.split('@')[1]).toContain('.')
    })
  })

  // --- 2.6 전제 조건 (Preconditions) ---
  // 특정 조건을 만족하는 입력값에 대해서만 테스트 실행
  test.prop([fc.integer(), fc.integer()])('나눗셈 테스트 (0으로 나누지 않음)', (a, b) => {
    // 전제 조건: b는 0이 아니어야 함
    fc.pre(b !== 0)

    const result = a / b
    // 결과가 NaN, Infinity, -Infinity가 아닌 유한한 수여야 함
    expect(Number.isFinite(result)).toBe(true)
  })

  // --- 2.7 복잡한 아비트러리 조합 (letrec, mapToConstant 등) ---
  // 상호 재귀적인 데이터 구조 생성 예시 (트리 구조)
  const treeNodeArbitrary = fc.letrec<{ value: number children: TreeNode[] }>(tie => ({
    tree: fc.record({
      value: fc.nat(),
      children: fc.array(tie('tree'), { maxLength: 3 }), // 자식 노드는 최대 3개
    }),
  })).tree

  interface TreeNode { value: number children: TreeNode[] }

  function sumTreeValues(node: TreeNode): number {
    return node.value + node.children.reduce((sum, child) => sum + sumTreeValues(child), 0)
  }

  test.prop([treeNodeArbitrary])('트리 노드 값 합계 테스트', (root) => {
    const totalSum = sumTreeValues(root)
    // 합계는 항상 0 이상이어야 함
    expect(totalSum).toBeGreaterThanOrEqual(root.value)
  })

  // 상태 기반 테스트를 위한 fc.context() 예시 (카운터)
  // test.prop([fc.commands(commands)])('카운터 상태 테스트', (initialModel, run) => { ... })
  // fc.context()는 상태 기반 모델 테스트에 사용되지만, 설정이 복잡하여 간단한 예시에서는 생략합니다.
  // 필요시 fast-check 문서를 참고하세요.

})

// --- 3. Helper 함수 정의 및 사용 ---
// 테스트에 사용될 함수
function calculateDiscount(price: number, percentage: number): number {
  if (price < 0 || percentage < 0 || percentage > 100) {
    throw new Error('Invalid input for discount calculation')
  }
  return price * (1 - percentage / 100)
}

it('할인 계산 함수 테스트', () => {
  // 유효한 입력값에 대한 테스트
  test.prop({
    price: fc.float({ min: 0, max: 10000 }), // 가격: 0 ~ 10000
    percentage: fc.float({ min: 0, max: 100 }), // 할인율: 0 ~ 100
  })('유효한 입력값 할인 계산', ({ price, percentage }) => {
    const discountedPrice = calculateDiscount(price, percentage)
    expect(discountedPrice).toBeGreaterThanOrEqual(0) // 할인된 가격은 0 이상
    expect(discountedPrice).toBeLessThanOrEqual(price) // 할인된 가격은 원래 가격 이하
    expect(discountedPrice).toBeCloseTo(price * (1 - percentage / 100)) // 예상 값과 거의 같아야 함
  })

  // 잘못된 입력값에 대한 테스트 (예외 발생 확인)
  test.prop({
    // 가격 또는 할인율이 음수이거나 할인율이 100을 초과하는 경우
    price: fc.oneof(fc.float({ min: -1000, max: -0.01 }), fc.float({ min: 0 })),
    percentage: fc.oneof(fc.float({ min: -100, max: -0.01 }), fc.float({ min: 100.01, max: 200 }), fc.float({min: 0, max: 100}))
  })('잘못된 입력값 예외 발생', ({ price, percentage }) => {
    // 전제 조건: 가격이 음수이거나, 할인율이 음수 또는 100 초과
    fc.pre(price < 0 || percentage < 0 || percentage > 100)

    // 잘못된 입력으로 함수 호출 시 에러가 발생하는지 확인
    expect(() => calculateDiscount(price, percentage)).toThrow('Invalid input')
  })
})

// --- 4. fast-check 고급 기능 활용 ---
it('fast-check 고급 기능 예시', () => {

  // --- 4.1 fc.chain: 동적 값 생성 ---
  // 먼저 생성된 값에 따라 다음 아비트러리를 결정합니다.
  // 예를 들어, 배열의 길이를 먼저 생성하고, 그 길이에 맞는 배열을 생성합니다.
  test.prop([
    // 먼저 0 이상 10 이하의 길이를 생성
    fc.nat(10).chain(length =>
      // 생성된 길이를 사용하여 튜플 아비트러리를 만듭니다.
      // 첫 번째 요소는 길이 자신, 두 번째 요소는 해당 길이를 가지는 정수 배열입니다.
      fc.tuple(fc.constant(length), fc.array(fc.integer(), { minLength: length, maxLength: length }))
    )
  ])('배열 길이와 실제 배열 내용 일치 검증 (fc.chain)', ([expectedLength, arr]) => {
    expect(arr.length).toBe(expectedLength)
  })

  // 사용자 ID를 먼저 생성하고, 해당 ID를 포함하는 이벤트 객체를 생성
  test.prop([
    fc.uuid().chain(userId =>
      fc.record({
        userId: fc.constant(userId), // 생성된 userId를 상수로 사용
        eventType: fc.string({ minLength: 1 }),
        timestamp: fc.date(),
        payload: fc.jsonObject(), // 임의의 JSON 객체 생성
      })
    )
  ])('이벤트 객체 내 사용자 ID 일치 검증 (fc.chain)', (event) => {
    expect(typeof event.userId).toBe('string')
    expect(event.userId.length).toBeGreaterThan(0) // UUID는 길이가 있음
    expect(typeof event.eventType).toBe('string')
    expect(event.timestamp instanceof Date).toBe(true)
    expect(typeof event.payload).toBe('object') // jsonObject는 객체 타입
  })


  // --- 4.2 fc.letrec: 상호 재귀적 데이터 구조 (심화) ---
  // 복잡한 JSON과 유사한 구조를 재귀적으로 생성합니다.
  const jsonValueArbitrary = fc.letrec<unknown>(tie => ({
    json: fc.oneof(
      fc.boolean(),
      fc.integer(),
      fc.double(),
      fc.string(),
      fc.constant(null),
      // 재귀적으로 배열과 객체를 정의
      fc.array(tie('json')), // 배열의 요소는 다시 jsonValueArbitrary
      fc.dictionary(fc.string(), tie('json')) // 객체의 값은 다시 jsonValueArbitrary
    )
  })).json

  // 생성된 JSON 구조를 직렬화/역직렬화해도 동일한지 테스트
  test.prop([jsonValueArbitrary])('JSON 구조 직렬화/역직렬화 일관성 (fc.letrec)', (value) => {
    try {
      const stringified = JSON.stringify(value)
      const parsed = JSON.parse(stringified)
      // NaN 같은 특수 값은 JSON 직렬화 시 null이 되므로, 이를 고려하여 비교
      if (Number.isNaN(value)) {
        expect(parsed).toBeNull()
      } else {
        expect(parsed).toEqual(value)
      }
    } catch (e) {
      // JSON.stringify는 순환 참조가 있는 객체를 처리할 수 없음
      // fast-check가 생성하는 값에는 순환 참조가 없을 것으로 기대하지만, 예외 처리 추가
      if (e instanceof TypeError && e.message.includes('circular structure')) {
        // 순환 참조는 fc.letrec에서 발생할 수 있으나, 여기서는 기본적인 JSON 타입만 사용하므로
        // 실제로는 발생하기 어려움. 발생 시 테스트 통과 처리 (혹은 다른 로직)
        return
      }
      throw e // 다른 종류의 에러는 다시 던짐
    }
  })

  // --- 4.3 fc.scheduler: 비동기 코드 순서 제어 ---
  // 비동기 작업들의 실행 순서를 제어하여 레이스 컨디션 등을 테스트합니다.
  test.prop([fc.scheduler()])('스케줄러를 이용한 비동기 작업 순서 테스트', async (scheduler) => {
    let counter = 0
    const promises: Promise<void>[] = []

    // 여러 비동기 작업을 스케줄러에 등록
    for (let i = 0 i < 5 ++i) {
      promises.push(scheduler.schedule(Promise.resolve().then(() => {
        // 각 작업은 counter를 1 증가시킴
        counter++
      })))
    }

    // 스케줄러가 모든 작업을 완료할 때까지 기다림
    await scheduler.waitAll()

    // 모든 작업이 순서에 관계없이 완료되면 counter는 5가 되어야 함
    expect(counter).toBe(5)
  })

  // 비동기 작업 간의 잠재적 레이스 컨디션 테스트 예시 (간단 버전)
  test.prop([fc.scheduler()])('스케줄러를 이용한 레이스 컨디션 모의 테스트', async (scheduler) => {
    let sharedResource = 0
    let task1Done = false
    let task2Done = false

    // 작업 1: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task1 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task1Done = true
    }))

    // 작업 2: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task2 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task2Done = true
    }))

    await scheduler.waitAll()

    // 스케줄러가 실행 순서를 조절하므로, 최종 결과는 1 또는 2가 될 수 있음 (레이스 컨디션 발생 시 1)
    expect(sharedResource).toBeGreaterThanOrEqual(1)
    expect(sharedResource).toBeLessThanOrEqual(2)
    expect(task1Done).toBe(true)
    expect(task2Done).toBe(true)

    // 만약 항상 2가 되기를 기대한다면, 이 테스트는 레이스 컨디션 발생 시 실패하게 됨
    // expect(sharedResource).toBe(2) // 이 단언은 실패할 수 있음
  })


  // --- 4.4 fc.context: 간단한 모델 기반 테스트 ---
  // 시스템의 상태 변화를 모델링하고, 실제 구현과 모델의 동작이 일치하는지 확인합니다.
  // 여기서는 간단한 카운터 모델을 테스트합니다.

  // 카운터 Command 정의
  // Command 인터페이스: check(model) -> boolean, run(model, real) -> void
  class IncrementCommand implements fc.Command<CounterModel, Counter> {
    check = (_model: Readonly<CounterModel>) => true // 항상 실행 가능
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 increment 실행
      model.count++
      real.increment()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'increment'
  }

  class DecrementCommand implements fc.Command<CounterModel, Counter> {
    // check: count가 0보다 클 때만 실행 가능 (모델 상태 기반)
    check = (model: Readonly<CounterModel>) => model.count > 0
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 decrement 실행
      model.count--
      real.decrement()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'decrement'
  }

  // 실제 카운터 구현
  class Counter {
    private value = 0
    increment() { this.value++ }
    decrement() { if (this.value > 0) this.value-- } // 실제 구현 제약 조건
    getCount() { return this.value }
  }

  // 카운터 모델 정의 (간단한 상태 객체)
  interface CounterModel { count: number }

  // Command 아비트러리 생성
  const counterCommands = fc.commands([
    fc.constant(new IncrementCommand()),
    fc.constant(new DecrementCommand()),
  ])

  // 모델 기반 테스트 실행
  test.prop([counterCommands])('카운터 모델 기반 테스트 (fc.context)', (cmds) => {
    // 초기 모델 상태
    const initialModel: CounterModel = { count: 0 }
    // 실제 시스템(카운터) 생성 함수
    const setup = () => new Counter()

    // fc.modelBased 실행 (이전 버전의 fc.context 역할)
    fc.modelBased(setup, initialModel)(cmds)

    // 참고: fc.modelBased는 내부적으로 fc.assert와 유사하게 동작하며,
    // check와 run 내부의 expect 단언이 실패하면 테스트 실패로 이어집니다.
    // 반환값이 없어 별도의 expect 단언은 필요하지 않습니다.
  })

  // --- 4.5 fc.frequency: 가중치 기반 선택 ---
  // 다양한 아비트러리 중 특정 아비트러리가 더 자주 생성되도록 가중치를 부여합니다.
  test.prop([
    fc.frequency(
      { weight: 10, arbitrary: fc.nat(100) },          // 0~100 자연수가 나올 확률 (가중치 10)
      { weight: 5, arbitrary: fc.string() },           // 문자열이 나올 확률 (가중치 5)
      { weight: 1, arbitrary: fc.boolean() },          // 불리언 값이 나올 확률 (가중치 1)
      { weight: 2, arbitrary: fc.constant(null) }      // null 값이 나올 확률 (가중치 2)
    )
  ])('가중치 기반 랜덤 값 생성 테스트 (fc.frequency)', (value) => {
    // 생성된 값의 타입을 확인하는 것 외에 특별한 단언은 어려움
    // 통계적으로 nat(100)이 가장 많이 생성될 것을 기대할 수 있음
    expect(value !== undefined).toBe(true) // 값은 항상 생성되어야 함
  })

})

"""
reference_test = """
import { expect } from 'vitest'
import { fc, test, it } from '@fast-check/vitest'

// --- 기본 설정 (선택 사항) ---
// 전역적으로 fast-check 설정을 변경할 수 있습니다.
// fc.configureGlobal({ seed: Date.now() }) // 테스트 실행 시마다 다른 시드 값 사용
// fc.configureGlobal({ numRuns: 50 }) // 기본 실행 횟수 변경 (기본값: 100)
// fc.configureGlobal({ endOnFailure: true }) // 첫 실패 시 즉시 종료 (Shrinking 비활성화)

// --- 1. 일회성 랜덤 모드 (One-time random mode) ---
// test 또는 it 함수 내에서 `g` 함수를 사용하여 랜덤 값을 생성합니다.
// 이 모드는 테스트를 한 번만 실행하며, 실패 시 동일한 시드 값으로 재현 가능합니다.
it('일회성 랜덤 모드 예시', () => {
  // 사용자 정보 객체를 랜덤하게 생성하여 테스트
  test('사용자 이름 표시 테스트 (g 함수 사용)', ({ g }) => {
    // Arrange: fc.string() 아비트러리를 사용하여 랜덤 문자열 생성
    const user = {
      firstName: g(fc.string({ minLength: 1 })), // 최소 길이 1 이상의 문자열
      lastName: g(fc.string({ minLength: 1 })),
      userId: g(fc.uuid()), // UUID 생성
    }

    function computeDisplayName(u: typeof user): string {
      return `${u.firstName} ${u.lastName} (${u.userId.substring(0, 8)})`
    }

    // Act
    const displayName = computeDisplayName(user)

    // Assert: 생성된 이름에 firstName과 lastName이 포함되어 있는지 확인
    expect(displayName).toContain(user.firstName)
    expect(displayName).toContain(user.lastName)
    expect(displayName).toContain(user.userId.substring(0, 8))
  })

  // 랜덤 값이 필요 없는 일반적인 Vitest 테스트도 함께 사용할 수 있습니다.
  test('랜덤 값 불필요 테스트', () => {
    expect(1 + 1).toBe(2)
  })
})

// --- 2. 전체 속성 기반 모드 (Full property-based mode) ---
// test.prop 또는 it.prop을 사용하여 속성 기반 테스트를 정의합니다.
// 여러 번의 랜덤 입력값에 대해 테스트를 실행하고, 실패 시 입력값을 축소하여 원인을 찾습니다.
it('전체 속성 기반 모드 예시', () => {
  // --- 2.1 기본 사용법 ---
  // 배열 형태의 아비트러리 전달
  test.prop([fc.integer(), fc.integer()])('덧셈의 교환 법칙 (배열)', (a, b) => {
    // 임의의 정수 a, b에 대해 a + b === b + a 여야 함
    expect(a + b).toBe(b + a)
  })

  // 객체 형태의 아비트러리 전달 (이름 지정)
  test.prop({ a: fc.nat(), b: fc.nat() })('덧셈의 결과는 입력값보다 크거나 같음 (객체)', ({ a, b }) => {
    // 임의의 자연수 a, b에 대해 a + b >= a 이고 a + b >= b 여야 함
    expect(a + b).toBeGreaterThanOrEqual(a)
    expect(a + b).toBeGreaterThanOrEqual(b)
  })

  // --- 2.2 다양한 아비트러리 활용 ---
  // 문자열과 배열 테스트
  test.prop([fc.string(), fc.array(fc.string())])('문자열 배열 길이 테스트', (prefix, arr) => {
    // 임의의 문자열 prefix와 문자열 배열 arr
    const result = arr.map(s => prefix + s)
    // 결과 배열의 길이는 원본 배열과 같아야 함
    expect(result.length).toBe(arr.length)
    // 결과 배열의 각 요소는 prefix로 시작해야 함
    result.forEach(item => {
      expect(item.startsWith(prefix)).toBe(true)
    })
  })

  // 객체 구조 테스트
  test.prop([fc.record({ id: fc.uuid(), score: fc.float({ min: 0, max: 100 }) })])('점수 객체 유효성 검사', (record) => {
    // id는 UUID 형식이어야 함
    expect(record.id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)
    // score는 0과 100 사이여야 함
    expect(record.score).toBeGreaterThanOrEqual(0)
    expect(record.score).toBeLessThanOrEqual(100)
  })

  // 불리언, 상수, 선택적 값 테스트
  test.prop([fc.boolean(), fc.constant(null), fc.oneof(fc.nat(), fc.string())])('다양한 타입 조합 테스트', (flag, nil, value) => {
    // flag는 true 또는 false
    expect(typeof flag).toBe('boolean')
    // nil은 항상 null
    expect(nil).toBeNull()
    // value는 자연수 또는 문자열
    expect(typeof value === 'number' || typeof value === 'string').toBe(true)
    if (typeof value === 'number') {
      expect(Number.isInteger(value)).toBe(true)
      expect(value).toBeGreaterThanOrEqual(0)
    }
  })

  // 튜플 테스트
  test.prop([fc.tuple(fc.string(), fc.integer())])('튜플 구조 및 타입 테스트', ([str, num]) => {
    expect(typeof str).toBe('string')
    expect(typeof num).toBe('number')
  })

  // --- 2.3 비동기 속성 테스트 ---
  // Promise를 반환하는 비동기 함수 테스트
  async function fetchData(id: number): Promise<{ id: number data: string }> {
    return new Promise(resolve => setTimeout(() => resolve({ id, data: `Data for ${id}` }), 10))
  }

  test.prop([fc.nat(100)])('비동기 데이터 가져오기 테스트', async (id) => {
    const result = await fetchData(id)
    expect(result.id).toBe(id)
    expect(result.data).toContain(String(id))
  })

  // --- 2.4 커스텀 파라미터 사용 ---
  // 특정 시드 값으로 테스트 재현 또는 실행 횟수 조절
  test.prop([fc.nat(), fc.nat()], { seed: 12345, numRuns: 50 })('특정 시드와 실행 횟수로 테스트', (a, b) => {
    // seed: 12345, numRuns: 50 설정으로 실행
    expect(a + b).toBe(b + a)
  })

  // --- 2.5 Vitest 모디파이어 사용 ---
  // .skip: 테스트 건너뛰기
  test.skip.prop([fc.string()])('이 테스트는 건너뜁니다', (text) => {
    expect(text.length).toBeGreaterThanOrEqual(0)
  })

  // .concurrent: 병렬 실행 (테스트 환경 설정에 따라 동작)
  test.concurrent.prop([fc.array(fc.integer())])('배열 정렬 테스트 (병렬)', (arr) => {
    const sorted = [...arr].sort((a, b) => a - b)
    for (let i = 0 i < sorted.length - 1 ++i) {
      expect(sorted[i]).toBeLessThanOrEqual(sorted[i + 1])
    }
  })

  // it.prop 사용 (test.prop과 동일)
  it('it.prop 사용 예시', () => {
    it.prop([fc.emailAddress()])('유효한 이메일 형식 테스트', (email) => {
      // 간단한 이메일 형식 검사 (실제로는 더 정교한 검사가 필요할 수 있음)
      expect(email).toContain('@')
      expect(email.split('@')[1]).toContain('.')
    })
  })

  // --- 2.6 전제 조건 (Preconditions) ---
  // 특정 조건을 만족하는 입력값에 대해서만 테스트 실행
  test.prop([fc.integer(), fc.integer()])('나눗셈 테스트 (0으로 나누지 않음)', (a, b) => {
    // 전제 조건: b는 0이 아니어야 함
    fc.pre(b !== 0)

    const result = a / b
    // 결과가 NaN, Infinity, -Infinity가 아닌 유한한 수여야 함
    expect(Number.isFinite(result)).toBe(true)
  })

  // --- 2.7 복잡한 아비트러리 조합 (letrec, mapToConstant 등) ---
  // 상호 재귀적인 데이터 구조 생성 예시 (트리 구조)
  const treeNodeArbitrary = fc.letrec<{ value: number children: TreeNode[] }>(tie => ({
    tree: fc.record({
      value: fc.nat(),
      children: fc.array(tie('tree'), { maxLength: 3 }), // 자식 노드는 최대 3개
    }),
  })).tree

  interface TreeNode { value: number children: TreeNode[] }

  function sumTreeValues(node: TreeNode): number {
    return node.value + node.children.reduce((sum, child) => sum + sumTreeValues(child), 0)
  }

  test.prop([treeNodeArbitrary])('트리 노드 값 합계 테스트', (root) => {
    const totalSum = sumTreeValues(root)
    // 합계는 항상 0 이상이어야 함
    expect(totalSum).toBeGreaterThanOrEqual(root.value)
  })

  // 상태 기반 테스트를 위한 fc.context() 예시 (카운터)
  // test.prop([fc.commands(commands)])('카운터 상태 테스트', (initialModel, run) => { ... })
  // fc.context()는 상태 기반 모델 테스트에 사용되지만, 설정이 복잡하여 간단한 예시에서는 생략합니다.
  // 필요시 fast-check 문서를 참고하세요.

})

// --- 3. Helper 함수 정의 및 사용 ---
// 테스트에 사용될 함수
function calculateDiscount(price: number, percentage: number): number {
  if (price < 0 || percentage < 0 || percentage > 100) {
    throw new Error('Invalid input for discount calculation')
  }
  return price * (1 - percentage / 100)
}

it('할인 계산 함수 테스트', () => {
  // 유효한 입력값에 대한 테스트
  test.prop({
    price: fc.float({ min: 0, max: 10000 }), // 가격: 0 ~ 10000
    percentage: fc.float({ min: 0, max: 100 }), // 할인율: 0 ~ 100
  })('유효한 입력값 할인 계산', ({ price, percentage }) => {
    const discountedPrice = calculateDiscount(price, percentage)
    expect(discountedPrice).toBeGreaterThanOrEqual(0) // 할인된 가격은 0 이상
    expect(discountedPrice).toBeLessThanOrEqual(price) // 할인된 가격은 원래 가격 이하
    expect(discountedPrice).toBeCloseTo(price * (1 - percentage / 100)) // 예상 값과 거의 같아야 함
  })

  // 잘못된 입력값에 대한 테스트 (예외 발생 확인)
  test.prop({
    // 가격 또는 할인율이 음수이거나 할인율이 100을 초과하는 경우
    price: fc.oneof(fc.float({ min: -1000, max: -0.01 }), fc.float({ min: 0 })),
    percentage: fc.oneof(fc.float({ min: -100, max: -0.01 }), fc.float({ min: 100.01, max: 200 }), fc.float({min: 0, max: 100}))
  })('잘못된 입력값 예외 발생', ({ price, percentage }) => {
    // 전제 조건: 가격이 음수이거나, 할인율이 음수 또는 100 초과
    fc.pre(price < 0 || percentage < 0 || percentage > 100)

    // 잘못된 입력으로 함수 호출 시 에러가 발생하는지 확인
    expect(() => calculateDiscount(price, percentage)).toThrow('Invalid input')
  })
})

// --- 4. fast-check 고급 기능 활용 ---
it('fast-check 고급 기능 예시', () => {

  // --- 4.1 fc.chain: 동적 값 생성 ---
  // 먼저 생성된 값에 따라 다음 아비트러리를 결정합니다.
  // 예를 들어, 배열의 길이를 먼저 생성하고, 그 길이에 맞는 배열을 생성합니다.
  test.prop([
    // 먼저 0 이상 10 이하의 길이를 생성
    fc.nat(10).chain(length =>
      // 생성된 길이를 사용하여 튜플 아비트러리를 만듭니다.
      // 첫 번째 요소는 길이 자신, 두 번째 요소는 해당 길이를 가지는 정수 배열입니다.
      fc.tuple(fc.constant(length), fc.array(fc.integer(), { minLength: length, maxLength: length }))
    )
  ])('배열 길이와 실제 배열 내용 일치 검증 (fc.chain)', ([expectedLength, arr]) => {
    expect(arr.length).toBe(expectedLength)
  })

  // 사용자 ID를 먼저 생성하고, 해당 ID를 포함하는 이벤트 객체를 생성
  test.prop([
    fc.uuid().chain(userId =>
      fc.record({
        userId: fc.constant(userId), // 생성된 userId를 상수로 사용
        eventType: fc.string({ minLength: 1 }),
        timestamp: fc.date(),
        payload: fc.jsonObject(), // 임의의 JSON 객체 생성
      })
    )
  ])('이벤트 객체 내 사용자 ID 일치 검증 (fc.chain)', (event) => {
    expect(typeof event.userId).toBe('string')
    expect(event.userId.length).toBeGreaterThan(0) // UUID는 길이가 있음
    expect(typeof event.eventType).toBe('string')
    expect(event.timestamp instanceof Date).toBe(true)
    expect(typeof event.payload).toBe('object') // jsonObject는 객체 타입
  })


  // --- 4.2 fc.letrec: 상호 재귀적 데이터 구조 (심화) ---
  // 복잡한 JSON과 유사한 구조를 재귀적으로 생성합니다.
  const jsonValueArbitrary = fc.letrec<unknown>(tie => ({
    json: fc.oneof(
      fc.boolean(),
      fc.integer(),
      fc.double(),
      fc.string(),
      fc.constant(null),
      // 재귀적으로 배열과 객체를 정의
      fc.array(tie('json')), // 배열의 요소는 다시 jsonValueArbitrary
      fc.dictionary(fc.string(), tie('json')) // 객체의 값은 다시 jsonValueArbitrary
    )
  })).json

  // 생성된 JSON 구조를 직렬화/역직렬화해도 동일한지 테스트
  test.prop([jsonValueArbitrary])('JSON 구조 직렬화/역직렬화 일관성 (fc.letrec)', (value) => {
    try {
      const stringified = JSON.stringify(value)
      const parsed = JSON.parse(stringified)
      // NaN 같은 특수 값은 JSON 직렬화 시 null이 되므로, 이를 고려하여 비교
      if (Number.isNaN(value)) {
        expect(parsed).toBeNull()
      } else {
        expect(parsed).toEqual(value)
      }
    } catch (e) {
      // JSON.stringify는 순환 참조가 있는 객체를 처리할 수 없음
      // fast-check가 생성하는 값에는 순환 참조가 없을 것으로 기대하지만, 예외 처리 추가
      if (e instanceof TypeError && e.message.includes('circular structure')) {
        // 순환 참조는 fc.letrec에서 발생할 수 있으나, 여기서는 기본적인 JSON 타입만 사용하므로
        // 실제로는 발생하기 어려움. 발생 시 테스트 통과 처리 (혹은 다른 로직)
        return
      }
      throw e // 다른 종류의 에러는 다시 던짐
    }
  })

  // --- 4.3 fc.scheduler: 비동기 코드 순서 제어 ---
  // 비동기 작업들의 실행 순서를 제어하여 레이스 컨디션 등을 테스트합니다.
  test.prop([fc.scheduler()])('스케줄러를 이용한 비동기 작업 순서 테스트', async (scheduler) => {
    let counter = 0
    const promises: Promise<void>[] = []

    // 여러 비동기 작업을 스케줄러에 등록
    for (let i = 0 i < 5 ++i) {
      promises.push(scheduler.schedule(Promise.resolve().then(() => {
        // 각 작업은 counter를 1 증가시킴
        counter++
      })))
    }

    // 스케줄러가 모든 작업을 완료할 때까지 기다림
    await scheduler.waitAll()

    // 모든 작업이 순서에 관계없이 완료되면 counter는 5가 되어야 함
    expect(counter).toBe(5)
  })

  // 비동기 작업 간의 잠재적 레이스 컨디션 테스트 예시 (간단 버전)
  test.prop([fc.scheduler()])('스케줄러를 이용한 레이스 컨디션 모의 테스트', async (scheduler) => {
    let sharedResource = 0
    let task1Done = false
    let task2Done = false

    // 작업 1: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task1 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task1Done = true
    }))

    // 작업 2: 리소스를 읽고 잠시 후 1 증가시켜 씀
    const task2 = scheduler.schedule(Promise.resolve().then(async () => {
        const current = sharedResource
        await scheduler.schedule(Promise.resolve()) // 약간의 지연 모방
        sharedResource = current + 1
        task2Done = true
    }))

    await scheduler.waitAll()

    // 스케줄러가 실행 순서를 조절하므로, 최종 결과는 1 또는 2가 될 수 있음 (레이스 컨디션 발생 시 1)
    expect(sharedResource).toBeGreaterThanOrEqual(1)
    expect(sharedResource).toBeLessThanOrEqual(2)
    expect(task1Done).toBe(true)
    expect(task2Done).toBe(true)

    // 만약 항상 2가 되기를 기대한다면, 이 테스트는 레이스 컨디션 발생 시 실패하게 됨
    // expect(sharedResource).toBe(2) // 이 단언은 실패할 수 있음
  })


  // --- 4.4 fc.context: 간단한 모델 기반 테스트 ---
  // 시스템의 상태 변화를 모델링하고, 실제 구현과 모델의 동작이 일치하는지 확인합니다.
  // 여기서는 간단한 카운터 모델을 테스트합니다.

  // 카운터 Command 정의
  // Command 인터페이스: check(model) -> boolean, run(model, real) -> void
  class IncrementCommand implements fc.Command<CounterModel, Counter> {
    check = (_model: Readonly<CounterModel>) => true // 항상 실행 가능
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 increment 실행
      model.count++
      real.increment()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'increment'
  }

  class DecrementCommand implements fc.Command<CounterModel, Counter> {
    // check: count가 0보다 클 때만 실행 가능 (모델 상태 기반)
    check = (model: Readonly<CounterModel>) => model.count > 0
    run(model: CounterModel, real: Counter): void {
      // 모델과 실제 구현 모두에서 decrement 실행
      model.count--
      real.decrement()
      // 실행 후 모델과 실제 구현의 상태가 같은지 확인
      expect(real.getCount()).toBe(model.count)
    }
    toString = () => 'decrement'
  }

  // 실제 카운터 구현
  class Counter {
    private value = 0
    increment() { this.value++ }
    decrement() { if (this.value > 0) this.value-- } // 실제 구현 제약 조건
    getCount() { return this.value }
  }

  // 카운터 모델 정의 (간단한 상태 객체)
  interface CounterModel { count: number }

  // Command 아비트러리 생성
  const counterCommands = fc.commands([
    fc.constant(new IncrementCommand()),
    fc.constant(new DecrementCommand()),
  ])

  // 모델 기반 테스트 실행
  test.prop([counterCommands])('카운터 모델 기반 테스트 (fc.context)', (cmds) => {
    // 초기 모델 상태
    const initialModel: CounterModel = { count: 0 }
    // 실제 시스템(카운터) 생성 함수
    const setup = () => new Counter()

    // fc.modelBased 실행 (이전 버전의 fc.context 역할)
    fc.modelBased(setup, initialModel)(cmds)

    // 참고: fc.modelBased는 내부적으로 fc.assert와 유사하게 동작하며,
    // check와 run 내부의 expect 단언이 실패하면 테스트 실패로 이어집니다.
    // 반환값이 없어 별도의 expect 단언은 필요하지 않습니다.
  })

  // --- 4.5 fc.frequency: 가중치 기반 선택 ---
  // 다양한 아비트러리 중 특정 아비트러리가 더 자주 생성되도록 가중치를 부여합니다.
  test.prop([
    fc.frequency(
      { weight: 10, arbitrary: fc.nat(100) },          // 0~100 자연수가 나올 확률 (가중치 10)
      { weight: 5, arbitrary: fc.string() },           // 문자열이 나올 확률 (가중치 5)
      { weight: 1, arbitrary: fc.boolean() },          // 불리언 값이 나올 확률 (가중치 1)
      { weight: 2, arbitrary: fc.constant(null) }      // null 값이 나올 확률 (가중치 2)
    )
  ])('가중치 기반 랜덤 값 생성 테스트 (fc.frequency)', (value) => {
    // 생성된 값의 타입을 확인하는 것 외에 특별한 단언은 어려움
    // 통계적으로 nat(100)이 가장 많이 생성될 것을 기대할 수 있음
    expect(value !== undefined).toBe(true) // 값은 항상 생성되어야 함
  })

})

"""



[tests.javascript]

overrideTestRunScript = "vitest --run TEST_FILEPATH"

# # A multiline string, delimited with triple-quotes ("""),
# # containing import declaration to use in each test file.
overrideImports = """
import { fc, test, it } from '@fast-check/vitest'
import { expect } from 'vitest'
"""
</file>

<file path=".cursorignore">
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

.history
node_modules

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local
.env.*

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# turbo
.turbo

*storybook.log
storybook-static
/others
pnpm-lock.yaml
test-results
playwright-report
generated
output
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

.history
node_modules

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local
.env.*

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# turbo
.turbo

*storybook.log
**/storybook-static
/others
**/test-results
**/playwright-report
**/generated
**/output
**/.svelte-kit/cloudflare
**/.svelte-kit/cloudflare-tmp
**/.svelte-kit/types
**/.svelte-kit/ambient.d.ts
**/.svelte-kit/non-ambient.d.ts
**/ambient.d.ts
**/non-ambient.d.ts
ambient.d.ts
non-ambient.d.ts
**/cache
**/release
**/vitest-results
**/playwright-results
paraglide-output
.qodo/history.sqlite
.sentryclirc
.qodo
</file>

<file path=".markdownlint.json">
{
	"MD007": false,
	"MD010": false,
	"MD013": false,
	"MD024": false,
	"MD025": false,
	"MD033": false,
	"MD041": false
}
</file>

<file path=".npmrc">
public-hoist-pattern[]=*vitest*
public-hoist-pattern[]=vite-node
</file>

<file path=".nvmrc">
23.5.0
</file>

<file path=".prettierignore">
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

.history
node_modules

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local
.env.*

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# turbo
.turbo

*storybook.log
storybook-static
/others
pnpm-lock.yaml
test-results
playwright-report
generated
output
**/.svelte-kit/**
**/vitest-results/**
**/playwright-results/**

releases/**

paraglide-output/**
*.patch
**/*.patch
</file>

<file path=".prettierrc">
{
	"endOfLine": "lf",
	"experimentalTernaries": true,
	"jsxSingleQuote": false,
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	],
	"plugins": [
		"prettier-plugin-sh",
		"prettier-plugin-jsdoc",
		"prettier-plugin-sort-json",
		"prettier-plugin-package-perfection",
		"prettier-plugin-sql",
		"prettier-plugin-svelte",
		"prettier-plugin-classnames",
		"prettier-plugin-tailwindcss",
		"prettier-plugin-merge"
	],
	"printWidth": 100,
	"semi": false,
	"singleQuote": true,
	"svelteIndentScriptAndStyle": false,
	"svelteSortOrder": "options-scripts-markup-styles",
	"trailingComma": "all",
	"useTabs": true
}
</file>

<file path=".stylelintignore">
**/*.js
**/*.ts
**/*.json
**/*.toml
**/*.yaml
**/*.yml
**/*.md
**/*.mdx
**/*.jsonc
**/*.json5
**/*.sql

# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

.history
node_modules

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local
.env.*

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# turbo
.turbo

*storybook.log
storybook-static
/others
pnpm-lock.yaml
test-results
playwright-report
generated
output
**/.svelte-kit/**

releases
</file>

<file path=".stylelintrc.json">
{
	"extends": [
		"stylelint-config-standard",
		"stylelint-config-html",
		"@double-great/stylelint-a11y",
		"stylelint-config-clean-order/error"
	],
	"overrides": [
		{
			"customSyntax": "postcss-syntax",
			"files": ["**/*.css"]
		},
		{
			"files": ["**/*.svelte"],
			"customSyntax": "postcss-html"
		}
	],
	"plugins": [
		"stylelint-plugin-logical-css",
		"stylelint-value-no-exposed-custom-properties",
		"stylelint-plugin-defensive-css",
		"stylelint-no-indistinguishable-colors",
		"stylelint-use-nesting",
		"stylelint-no-unresolved-module",
		"stylelint-high-performance-animation",
		"stylelint-no-browser-hacks/lib",
		"stylelint-color-format",
		"stylelint-value-no-unknown-custom-properties",
		"stylelint-declaration-block-no-ignored-properties",
		"stylelint-gamut"
	],
	"rules": {
		"custom-property-empty-line-before": null,
		"at-rule-no-unknown": null,
		"color-format/format": {
			"format": "rgb",
			"severity": "warning"
		},
		"comment-empty-line-before": null,
		"csstools/use-nesting": "always",
		"declaration-property-value-no-unknown": true,
		"font-family-no-missing-generic-family-keyword": null,
		"gamut/color-no-out-gamut-range": true,
		"no-duplicate-selectors": null,
		"number-max-precision": null,
		"plugin/declaration-block-no-ignored-properties": true,
		"plugin/no-browser-hacks": [true],
		"plugin/no-unresolved-module": {
			"alias": {
				"assets": "pebbles"
			},
			"modules": ["node_modules", "local_modules"]
		},
		"plugin/stylelint-no-indistinguishable-colors": true,
		"plugin/use-defensive-css": [
			true,
			{
				"severity": "warning"
			}
		],
		"plugin/use-logical-properties-and-values": [
			true,
			{
				"severity": "warning"
			}
		],
		"plugin/use-logical-units": [
			true,
			{
				"severity": "warning"
			}
		],
		"plugin/value-no-exposed-custom-properties": {
			"severity": "warning"
		}
	}
}
</file>

<file path=".syncpackrc">
{
  "versionGroups": [
    {
      "dependencyTypes": [
        "dev",
        "prod"
      ],
      "label": "Ensure all packages use the same versions",
      "packages": [
        "**"
      ]
    },
    {
      "dependencies": [
        "$LOCAL"
      ],
      "dependencyTypes": [
        "dev",
        "prod"
      ],
      "label": "Use workspace protocol when developing local packages",
      "pinVersion": "workspace:*"
    }
  ]
}
</file>

<file path="apps/boiler_plates/.npmrc">
engine-strict=true
public-hoist-pattern[]=*vitest*
public-hoist-pattern[]=vite-node
</file>

<file path="apps/boiler_plates/e2e/basic.test.js">
import '@library/base/basic.test.js'
</file>

<file path="apps/boiler_plates/e2e/traverse.test.js">
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { runTests } from '@library/base/traverse.test.js'
// Simulate __dirname in ESM
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
// SvelteKit route directory root
const projectRouteRoot = path.join(__dirname, '../src/routes')
// Define parameter examples for dynamic routes
// You can extend this object with more routes and parameters
/** @type {{ [key: string]: string[] }} dynamicRouteParams */
const dynamicRouteParams = {
	// '/blog/[slug]': ['hello-world', 'sveltekit-example'],
	// '/blog/[id]/[slug]': ['123/my-post', '456/another-post'], <- 이렇게 path에 param 여러개 넣기
	// '/products/[id]': ['123', '456'],
	// '/user/[userId]': ['john_doe', 'jane_smith']
	// Add more dynamic routes and parameter examples as needed
}
runTests(projectRouteRoot, dynamicRouteParams)
</file>

<file path="apps/boiler_plates/package.json">
{
	"private": true,
	"name": "@app/boiler_plates",
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"build": "vite build",
		"buildWithDotenv": "dotenv -e ../../.env vite build",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --no-tsconfig --ignore ../../libraries",
		"check:watch": "pnpm run check -- --watch",
		"depCheck": "npx depcheck",
		"dev": "dotenv -e ../../.env vite dev",
		"eslint": "eslint .",
		"eslint-fix": "eslint --fix . || true",
		"format": "prettier . --write --ignore-unknown --ignore-path ../../.prettierignore",
		"playwright-install-env": "pnpm exec playwright install --with-deps",
		"playwright-report": "pnpm exec playwright show-report",
		"stylelint": "stylelint --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore",
		"stylelint-fix": "stylelint --fix --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore || true",
		"test:e2e": "pnpm exec playwright test",
		"test:unit": "vitest run",
		"type-sync": "svelte-kit sync",
		"preview": "vite preview",
		"previewWithDotenv": "dotenv -e ../../.env vite preview"
	},
	"dependencies": {
		"@formkit/auto-animate": "^0.8.2",
		"@library/base": "workspace:*",
		"@library/helpers": "workspace:*",
		"@library/paraglide": "workspace:*",
		"@library/ui": "workspace:*",
		"luxon": "^3.5.0",
		"nanoid": "^5.1.5",
		"ramda": "^0.30.1",
		"ufo": "^1.5.4",
		"xstate": "^5.19.2",
		"zod": "^3.24.2"
	},
	"devDependencies": {
		"daisyui": "5.0.9",
		"tailwindcss": "4.0.17",
		"tailwindcss-animate": "^1.0.7"
	},
	"import": {
		"$shadcn": "../../libraries/ui/src/shadcn",
		"$shadcn/*": "../../libraries/ui/src/shadcn/*"
	}
}
</file>

<file path="apps/boiler_plates/playwright.config.js">
import defaultConfigObject from '@library/base/playwright.config.js'
import { defineConfig } from '@playwright/test'
const portNumber = 5001
const config = defineConfig({
	...defaultConfigObject,
	webServer: {
		command: `pnpm run preview --port ${portNumber}`,
		env: {
			NODE_ENV: 'production',
		},
		port: portNumber,
		reuseExistingServer: !process.env.CI,
		timeout: 120_000,
	},
})
// @ts-ignore
export default config
</file>

<file path="apps/boiler_plates/postcss.config.js">
export { default } from '@library/base/postcss.config.js'
</file>

<file path="apps/boiler_plates/src/app.html">
<!doctype html>
<html lang="%lang%" dir="%paraglide.textDirection%">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<script async src="https://code.iconify.design/iconify-icon/2.3.0/iconify-icon.min.js"></script>
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>
</file>

<file path="apps/boiler_plates/src/base.test.js">
import { runTest } from '@library/base/baseTest.js'
runTest()
</file>

<file path="apps/boiler_plates/src/hooks.client.ts">
export * from '@library/base/hooks.client.ts'
</file>

<file path="apps/boiler_plates/src/hooks.server.ts">
export * from '@library/base/hooks.server.ts'
</file>

<file path="apps/boiler_plates/src/hooks.ts">
export * from '@library/base/hooks.ts'
</file>

<file path="apps/boiler_plates/src/lib/index.js">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="apps/boiler_plates/src/paraglide.ts">
export { getLocale, isLocale, locales, setLocale } from '@library/paraglide/runtime.js'
</file>

<file path="apps/boiler_plates/src/routes/+layout.svelte">
<script>
import '@library/base/fontStyle.css'
import BaseLayout from '@library/base/baseLayout'
import { APP_NAME } from './base'
let { children } = $props()
;('') // eslint-disable-line
</script>
<svelte:head>
	<title>{APP_NAME}</title>
</svelte:head>
<BaseLayout appName={APP_NAME}>
	{@render children()}
	<div id="Top2_Layout_Check"></div>
</BaseLayout>
</file>

<file path="apps/boiler_plates/src/routes/+page.svelte">
<script>
import { Badge } from '@library/ui/badge'
import Button2 from '@library/ui/button_daisy.svelte'
import { Button as Button1 } from '@library/ui/button_shadcn'
import Icon from '@library/ui/icon'
// 'as * from m'이 Sherlock extension의 inline annotation을 작동시키는 트리거
import * as m from '../../../../libraries/paraglide/paraglide-output/messages.js'
import { localizeHref } from '../../../../libraries/paraglide/paraglide-output/runtime.js'
import { setLocale } from '../paraglide'
const fo = 'bigCommandKEnabled'
let foo = $state(`${fo}foifoifo`)
foo += ' bar13332222222 3$3$32$3 4$$$'
const eewre = Promise.resolve('test 122')
</script>
<h2 class="bg-primary">{m.welcome()}</h2>
<h3>{foo}</h3>
<h4>Welcome to SvelteKit</h4>
<h5>Welcome to SvelteKit</h5>
<h6>Welcome to SvelteKit 000</h6>
<Icon style="font-size: 2em;" icon="mdi:home">{m.antsy_aloof_barbel_read()}</Icon>
<Button2 variant="wrong">
	<Icon icon="mdi:home">{m.antsy_aloof_barbel_read()}</Icon>
</Button2>
<Button2 href={localizeHref('/about')} variant="warning">{m.deft_east_mouse_hope()}</Button2>
<Button1 href={localizeHref('/lorem')} variant="default">{m.welcome()}</Button1>
<Button1
	onclick={() => {
		throw new Error('test')
	}}
	variant="default">occurs error</Button1
>
<div class="p1 boxed long-text gutter">
	<h1>Aute aliquip laborum tempor</h1>
	<blockquote>
		incididunt officia sit tempor excepteur occaecat. Ipsum cupidatat sunt quis excepteur duis enim
		voluptate quis consequat quis officia. Excepteur exercitation incididunt do ad aute enim
		cupidatat pariatur aliquip.
		<br />
		- sungho
	</blockquote>
	<h2>Ea consequat irure dolor proident</h2>
	<h3>Eiusmod voluptate non nostrud labore</h3>
	<p>
		abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz Minim <i
			>anim</i
		>
		esse nostrud<i>pariatur ex ullamco. Pariatur</i>u ut deserunt consequat officia non quis irure
		<q>tempor adipisicing</q>
		veniam 안녕 <i>가나다라마바사아</i>을를 <i>qui</i>를 irure esse. Proident amet Lorem anim in
		anim. Mollit eu sunt ad dolore dolor incididunt enim amet consectetur eu deserunt quis cillum.
		Ea cillum cupidatat sint velit amet dolore id. Dolore culpa ex in et sunt labore dolore est
		magna tempor. Aute aliquip laborum tempor ea dolore sunt excepteur anim sit. Cupidatat duis
		laboris qui do labore. Ea consequat irure dolor proident pariatur cillum fugiat nostrud minim.
		Ut voluptate nisi tempor laborum adipisicing exercitation quis voluptate adipisicing. Laborum
		culpa qui dolore officia. Nisi nostrud deserunt esse ad esse labore. Ad ipsum exercitation
		veniam sint magna officia aute nostrud anim eu officia eu aliquip. Eiusmod voluptate non nostrud
		labore ullamco consectetur aliquip id voluptate dolore exercitation id enim quis. Consectetur ex
		minim irure id velit nisi. Reprehenderit reprehenderit cupidatat excepteur duis excepteur dolor
		elit ad qui labore laboris. Eu enim ullamco enim irure anim magna velit velit laboris consequat
		nulla amet officia occaecat. Nulla incididunt cillum consectetur reprehenderit eiusmod labore
		anim exercitation commodo esse commodo. Amet mollit consectetur aliquip elit. Minim esse aliqua
		enim adipisicing aute amet incididunt dolore irure ullamco esse nulla pariatur ea ipsum. Irure
		commodo consectetur consequat proident deserunt sint id aliquip eiusmod dolor aliquip minim
		ipsum. Sint est nostrud qui consequat incididunt incididunt ea sint. Cupidatat eiusmod do
		laborum ullamco labore velit eiusmod. Sunt adipisicing velit sunt magna occaecat dolore enim
		tempor anim exercitation eu eu culpa ea excepteur. Reprehenderit quis commodo nisi sunt labore
		dolore duis labore non cillum Lorem voluptate culpa. Sit eiusmod aliquip ea dolore labore Lorem
		occaecat consectetur adipisicing pariatur eiusmod velit dolor voluptate nulla. Labore dolor sunt
		fugiat elit Lorem labore aliquip esse qui non cupidatat. Proident irure sit anim amet velit. Ad
		aliqua quis irure tempor id enim voluptate quis dolore. Magna culpa duis esse ea est incididunt
		Lorem sint nisi sunt ex laboris sunt deserunt. Pariatur ipsum incididunt esse deserunt amet
		aliquip exercitation sit sint fugiat in laboris excepteur consequat labore. Cillum ex voluptate
		qui elit deserunt mollit dolore ullamco ea in quis veniam. Proident id amet aliqua irure ex
		adipisicing non. Sit labore cillum anim. Qui ipsum dolore eu ea fugiat minim sit commodo fugiat
		qui velit sit quis. In ex labore veniam elit tempor minim. Aute nulla officia minim nostrud.
		Amet enim consectetur eiusmod consectetur exercitation sit ut commodo pariatur sint sit
		excepteur exercitation. Reprehenderit consequat labore adipisicing cillum elit occaecat sunt. Ut
		aute nisi duis consequat reprehenderit aute est minim sit fugiat adipisicing deserunt quis sit.
		Officia deserunt anim ut quis consectetur ipsum laboris voluptate velit non. Ad exercitation
		culpa non nostrud ut exercitation amet veniam anim amet deserunt magna sit nostrud. Consequat
		pariatur dolor laboris enim commodo anim ut. Et sit non dolor consequat non culpa nulla veniam
		quis aute cillum laboris eiusmod irure. Officia proident incididunt nulla proident quis laboris
		exercitation. Exercitation ut ullamco minim ut laborum sint duis irure enim eu exercitation
		eiusmod dolor consectetur. Incididunt aute amet eu. Consectetur laborum anim voluptate
		exercitation pariatur velit aliquip est nisi et. Labore est sit incididunt et nisi incididunt et
		occaecat id et cillum consequat sunt. Sint pariatur veniam velit fugiat anim. Reprehenderit
		voluptate do mollit deserunt est aliquip eiusmod qui. Sunt pariatur mollit officia. Enim nostrud
		cupidatat ea minim sint eu duis duis irure tempor dolor ea elit sunt. Labore do velit minim anim
		quis anim fugiat dolor ex ex magna officia. Duis eu nisi officia minim proident quis eu mollit
		do aliquip aute. Anim excepteur dolore labore officia in eu deserunt sint. Consequat ullamco
		consectetur occaecat. Cillum cillum sit minim eu officia reprehenderit commodo id. Id sunt et
		labore dolor nisi deserunt sit proident. Cillum occaecat voluptate nulla id nostrud veniam
		labore incididunt esse. Culpa proident eiusmod tempor amet dolore id est sint ad culpa sunt
		exercitation tempor exercitation. Minim id amet sunt fugiat ut sunt irure proident amet esse
		dolore ad. In ullamco Lorem adipisicing laboris officia esse laboris enim irure laboris ullamco
		elit. Enim officia adipisicing laboris irure est exercitation mollit. Proident aliqua
		consectetur incididunt nulla id ad labore ipsum nostrud tempor minim aute cillum non pariatur.
		Ullamco fugiat enim nisi sit aliquip culpa eu mollit. Sunt incididunt adipisicing elit nulla
		commodo cillum dolore quis ipsum occaecat qui sit. Aliquip enim anim ea culpa consectetur ut qui
		voluptate cupidatat ullamco. Nulla nostrud velit laborum tempor minim est ut officia ut
		exercitation excepteur aliqua laborum veniam. Excepteur fugiat ipsum voluptate tempor minim
		ullamco enim occaecat reprehenderit fugiat. Aliqua laborum anim fugiat consectetur culpa magna
		non nulla mollit sit id exercitation. Consequat deserunt commodo adipisicing ut occaecat
		pariatur non. Velit sunt consectetur labore occaecat qui irure duis eu laborum mollit amet
		ullamco ad. Mollit magna velit ipsum consequat esse. Occaecat irure occaecat cupidatat
		exercitation esse magna quis commodo anim pariatur labore cupidatat. Qui deserunt ex enim
		voluptate duis ea qui do. Tempor deserunt mollit do cupidatat voluptate nulla. Eiusmod magna
		officia ullamco sit laborum deserunt consequat velit cupidatat Lorem commodo consectetur magna.
		Consectetur consectetur deserunt esse velit adipisicing irure fugiat sit nulla esse dolor id
		minim non. Sit enim quis eu anim id adipisicing proident officia elit enim elit id. Mollit
		adipisicing exercitation labore ut. Labore et sunt incididunt nostrud nostrud et nisi eu fugiat
		adipisicing magna quis pariatur officia. Do voluptate ipsum cillum consectetur sunt esse commodo
		cupidatat deserunt labore Lorem fugiat cupidatat in. Consequat dolore velit reprehenderit esse
		minim id reprehenderit. Laboris amet culpa in cillum aute est adipisicing in cupidatat
		exercitation labore Lorem sunt. Est proident non proident fugiat do do velit eu exercitation
		consectetur magna ad. Amet labore aliquip occaecat enim sint incididunt fugiat dolor eu commodo
		adipisicing cupidatat. Irure ex sint excepteur ipsum id ex id. Eu cupidatat velit est do elit
		nostrud culpa culpa nostrud magna reprehenderit qui eiusmod pariatur veniam. Sunt sunt velit
		Lorem ut fugiat mollit consectetur irure.
	</p>
</div>
<div class="colored">
	<Badge>{m.hello_world({ name: 'SvelteKit User' })}</Badge>
	<Button1 onclick={() => setLocale('en')}>en</Button1>
	<Button1 onclick={() => setLocale('ko')}>ko</Button1>
</div>
<div id="Page_Check"></div>
<style>
.p1 {
	overflow: auto;
	max-block-size: 30rem;
	margin: auto;
	border-width: var(--border-size-3);
}
.colored {
	max-inline-size: 1000px;
	block-size: var(--font-l);
	background-color: var(--red-10);
}
</style>
</file>

<file path="apps/boiler_plates/src/routes/about/+page.svelte">
<script>
// 'as * from m'이 Sherlock extension의 inline annotation을 작동시키는 트리거
import { Badge } from '@library/ui/badge'
import Button2 from '@library/ui/button_daisy.svelte'
import { Button as Button1 } from '@library/ui/button_shadcn'
import Icon from '@library/ui/icon'
import * as m from '../../../../../libraries/paraglide/paraglide-output/messages.js'
import { setLocale } from '../../paraglide'
const fo = 'bigCommandKEnabled'
let foo = $state(`${fo}foifoifo`)
foo += ' bar133322222223'
;('') // eslint-disable-line no-unused-expressions
</script>
<h1>여기는 About</h1>
<h3>{foo}</h3>
<h4>Welcome to SvelteKit</h4>
<h5>Welcome to SvelteKit</h5>
<h6>Welcome to SvelteKit 000</h6>
<Icon style="font-size: 2em;" icon="mdi:home">{m.antsy_aloof_barbel_read()}</Icon>
<Button2 href="/" variant="info">home</Button2>
<Button2 href="/about" variant="warning">{m.deft_east_mouse_hope()}</Button2>
<Button1 href="/lorem" variant="default">{m.welcome()}</Button1>
<div class="p1 boxed long-text gutter">
	<h1>Aute aliquip laborum tempor</h1>
	<blockquote>
		incididunt officia sit tempor excepteur occaecat. Ipsum cupidatat sunt quis excepteur duis enim
		voluptate quis consequat quis officia. Excepteur exercitation incididunt do ad aute enim
		cupidatat pariatur aliquip.
		<br />
		- sungho
	</blockquote>
	<h2>Ea consequat irure dolor proident</h2>
	<h3>Eiusmod voluptate non nostrud labore</h3>
	<p>
		abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz Minim <i
			>anim</i
		>
		esse nostrud<i>pariatur ex ullamco. Pariatur</i>u ut deserunt consequat officia non quis irure
		<q>tempor adipisicing</q>
		veniam 안녕 <i>가나다라마바사아</i>을를 <i>qui</i>를 irure esse. Proident amet Lorem anim in
		anim. Mollit eu sunt ad dolore dolor incididunt enim amet consectetur eu deserunt quis cillum.
		Ea cillum cupidatat sint velit amet dolore id. Dolore culpa ex in et sunt labore dolore est
		magna tempor. Aute aliquip laborum tempor ea dolore sunt excepteur anim sit. Cupidatat duis
		laboris qui do labore. Ea consequat irure dolor proident pariatur cillum fugiat nostrud minim.
		Ut voluptate nisi tempor laborum adipisicing exercitation quis voluptate adipisicing. Laborum
		culpa qui dolore officia. Nisi nostrud deserunt esse ad esse labore. Ad ipsum exercitation
		veniam sint magna officia aute nostrud anim eu officia eu aliquip. Eiusmod voluptate non nostrud
		labore ullamco consectetur aliquip id voluptate dolore exercitation id enim quis. Consectetur ex
		minim irure id velit nisi. Reprehenderit reprehenderit cupidatat excepteur duis excepteur dolor
		elit ad qui labore laboris. Eu enim ullamco enim irure anim magna velit velit laboris consequat
		nulla amet officia occaecat. Nulla incididunt cillum consectetur reprehenderit eiusmod labore
		anim exercitation commodo esse commodo. Amet mollit consectetur aliquip elit. Minim esse aliqua
		enim adipisicing aute amet incididunt dolore irure ullamco esse nulla pariatur ea ipsum. Irure
		commodo consectetur consequat proident deserunt sint id aliquip eiusmod dolor aliquip minim
		ipsum. Sint est nostrud qui consequat incididunt incididunt ea sint. Cupidatat eiusmod do
		laborum ullamco labore velit eiusmod. Sunt adipisicing velit sunt magna occaecat dolore enim
		tempor anim exercitation eu eu culpa ea excepteur. Reprehenderit quis commodo nisi sunt labore
		dolore duis labore non cillum Lorem voluptate culpa. Sit eiusmod aliquip ea dolore labore Lorem
		occaecat consectetur adipisicing pariatur eiusmod velit dolor voluptate nulla. Labore dolor sunt
		fugiat elit Lorem labore aliquip esse qui non cupidatat. Proident irure sit anim amet velit. Ad
		aliqua quis irure tempor id enim voluptate quis dolore. Magna culpa duis esse ea est incididunt
		Lorem sint nisi sunt ex laboris sunt deserunt. Pariatur ipsum incididunt esse deserunt amet
		aliquip exercitation sit sint fugiat in laboris excepteur consequat labore. Cillum ex voluptate
		qui elit deserunt mollit dolore ullamco ea in quis veniam. Proident id amet aliqua irure ex
		adipisicing non. Sit labore cillum anim. Qui ipsum dolore eu ea fugiat minim sit commodo fugiat
		qui velit sit quis. In ex labore veniam elit tempor minim. Aute nulla officia minim nostrud.
		Amet enim consectetur eiusmod consectetur exercitation sit ut commodo pariatur sint sit
		excepteur exercitation. Reprehenderit consequat labore adipisicing cillum elit occaecat sunt. Ut
		aute nisi duis consequat reprehenderit aute est minim sit fugiat adipisicing deserunt quis sit.
		Officia deserunt anim ut quis consectetur ipsum laboris voluptate velit non. Ad exercitation
		culpa non nostrud ut exercitation amet veniam anim amet deserunt magna sit nostrud. Consequat
		pariatur dolor laboris enim commodo anim ut. Et sit non dolor consequat non culpa nulla veniam
		quis aute cillum laboris eiusmod irure. Officia proident incididunt nulla proident quis laboris
		exercitation. Exercitation ut ullamco minim ut laborum sint duis irure enim eu exercitation
		eiusmod dolor consectetur. Incididunt aute amet eu. Consectetur laborum anim voluptate
		exercitation pariatur velit aliquip est nisi et. Labore est sit incididunt et nisi incididunt et
		occaecat id et cillum consequat sunt. Sint pariatur veniam velit fugiat anim. Reprehenderit
		voluptate do mollit deserunt est aliquip eiusmod qui. Sunt pariatur mollit officia. Enim nostrud
		cupidatat ea minim sint eu duis duis irure tempor dolor ea elit sunt. Labore do velit minim anim
		quis anim fugiat dolor ex ex magna officia. Duis eu nisi officia minim proident quis eu mollit
		do aliquip aute. Anim excepteur dolore labore officia in eu deserunt sint. Consequat ullamco
		consectetur occaecat. Cillum cillum sit minim eu officia reprehenderit commodo id. Id sunt et
		labore dolor nisi deserunt sit proident. Cillum occaecat voluptate nulla id nostrud veniam
		labore incididunt esse. Culpa proident eiusmod tempor amet dolore id est sint ad culpa sunt
		exercitation tempor exercitation. Minim id amet sunt fugiat ut sunt irure proident amet esse
		dolore ad. In ullamco Lorem adipisicing laboris officia esse laboris enim irure laboris ullamco
		elit. Enim officia adipisicing laboris irure est exercitation mollit. Proident aliqua
		consectetur incididunt nulla id ad labore ipsum nostrud tempor minim aute cillum non pariatur.
		Ullamco fugiat enim nisi sit aliquip culpa eu mollit. Sunt incididunt adipisicing elit nulla
		commodo cillum dolore quis ipsum occaecat qui sit. Aliquip enim anim ea culpa consectetur ut qui
		voluptate cupidatat ullamco. Nulla nostrud velit laborum tempor minim est ut officia ut
		exercitation excepteur aliqua laborum veniam. Excepteur fugiat ipsum voluptate tempor minim
		ullamco enim occaecat reprehenderit fugiat. Aliqua laborum anim fugiat consectetur culpa magna
		non nulla mollit sit id exercitation. Consequat deserunt commodo adipisicing ut occaecat
		pariatur non. Velit sunt consectetur labore occaecat qui irure duis eu laborum mollit amet
		ullamco ad. Mollit magna velit ipsum consequat esse. Occaecat irure occaecat cupidatat
		exercitation esse magna quis commodo anim pariatur labore cupidatat. Qui deserunt ex enim
		voluptate duis ea qui do. Tempor deserunt mollit do cupidatat voluptate nulla. Eiusmod magna
		officia ullamco sit laborum deserunt consequat velit cupidatat Lorem commodo consectetur magna.
		Consectetur consectetur deserunt esse velit adipisicing irure fugiat sit nulla esse dolor id
		minim non. Sit enim quis eu anim id adipisicing proident officia elit enim elit id. Mollit
		adipisicing exercitation labore ut. Labore et sunt incididunt nostrud nostrud et nisi eu fugiat
		adipisicing magna quis pariatur officia. Do voluptate ipsum cillum consectetur sunt esse commodo
		cupidatat deserunt labore Lorem fugiat cupidatat in. Consequat dolore velit reprehenderit esse
		minim id reprehenderit. Laboris amet culpa in cillum aute est adipisicing in cupidatat
		exercitation labore Lorem sunt. Est proident non proident fugiat do do velit eu exercitation
		consectetur magna ad. Amet labore aliquip occaecat enim sint incididunt fugiat dolor eu commodo
		adipisicing cupidatat. Irure ex sint excepteur ipsum id ex id. Eu cupidatat velit est do elit
		nostrud culpa culpa nostrud magna reprehenderit qui eiusmod pariatur veniam. Sunt sunt velit
		Lorem ut fugiat mollit consectetur irure.
	</p>
</div>
<div class="colored">
	<Badge>{m.hello_world({ name: 'SvelteKit User' })}</Badge>
	<Button1 onclick={() => setLocale('en')}>en</Button1>
	<Button1 onclick={() => setLocale('ko')}>ko</Button1>
</div>
<div id="Page_Check"></div>
<style>
.p1 {
	overflow: auto;
	max-block-size: 30rem;
	margin: auto;
	border-width: var(--border-size-3);
}
.colored {
	max-inline-size: 1000px;
	background-color: var(--red-10);
}
</style>
</file>

<file path="apps/boiler_plates/src/routes/base.js">
import packagejson from '../../package.json' with { type: 'json' }
export const APP_NAME = packagejson.name
</file>

<file path="apps/boiler_plates/src/routes/lorem/+page.svelte">
<script>
// 'as * from m'이 Sherlock extension의 inline annotation을 작동시키는 트리거
import { Badge } from '@library/ui/badge'
import Button2 from '@library/ui/button_daisy.svelte'
import { Button as Button1 } from '@library/ui/button_shadcn'
import Icon from '@library/ui/icon'
import * as m from '../../../../../libraries/paraglide/paraglide-output/messages.js'
import { setLocale } from '../../paraglide'
const fo = 'bigCommandKEnabled'
let foo = $state(`${fo}foifoifo`)
foo += ' bar133322222223'
;('') // eslint-disable-line no-unused-expressions
</script>
<h1>여기는 lorem</h1>
<h3>{foo}</h3>
<h4>Welcome to SvelteKit</h4>
<h5>Welcome to SvelteKit</h5>
<h6>Welcome to SvelteKit 000</h6>
<Icon style="font-size: 2em;" icon="mdi:home">{m.antsy_aloof_barbel_read()}</Icon>
<Button1 href="/about" variant="default">{m.deft_east_mouse_hope()}</Button1>
<Button1 href="/lorem" variant="default">{m.welcome()}</Button1>
<Button2 href="/" variant="info">home</Button2>
<div class="p1 boxed long-text gutter">
	<h1>Aute aliquip laborum tempor</h1>
	<blockquote>
		incididunt officia sit tempor excepteur occaecat. Ipsum cupidatat sunt quis excepteur duis enim
		voluptate quis consequat quis officia. Excepteur exercitation incididunt do ad aute enim
		cupidatat pariatur aliquip.
		<br />
		- sungho
	</blockquote>
	<h2>Ea consequat irure dolor proident</h2>
	<h3>Eiusmod voluptate non nostrud labore</h3>
	<p>
		abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz abcdefghijklmnopqrstu vwxyz Minim <i
			>anim</i
		>
		esse nostrud<i>pariatur ex ullamco. Pariatur</i>u ut deserunt consequat officia non quis irure
		<q>tempor adipisicing</q>
		veniam 안녕 <i>가나다라마바사아</i>을를 <i>qui</i>를 irure esse. Proident amet Lorem anim in
		anim. Mollit eu sunt ad dolore dolor incididunt enim amet consectetur eu deserunt quis cillum.
		Ea cillum cupidatat sint velit amet dolore id. Dolore culpa ex in et sunt labore dolore est
		magna tempor. Aute aliquip laborum tempor ea dolore sunt excepteur anim sit. Cupidatat duis
		laboris qui do labore. Ea consequat irure dolor proident pariatur cillum fugiat nostrud minim.
		Ut voluptate nisi tempor laborum adipisicing exercitation quis voluptate adipisicing. Laborum
		culpa qui dolore officia. Nisi nostrud deserunt esse ad esse labore. Ad ipsum exercitation
		veniam sint magna officia aute nostrud anim eu officia eu aliquip. Eiusmod voluptate non nostrud
		labore ullamco consectetur aliquip id voluptate dolore exercitation id enim quis. Consectetur ex
		minim irure id velit nisi. Reprehenderit reprehenderit cupidatat excepteur duis excepteur dolor
		elit ad qui labore laboris. Eu enim ullamco enim irure anim magna velit velit laboris consequat
		nulla amet officia occaecat. Nulla incididunt cillum consectetur reprehenderit eiusmod labore
		anim exercitation commodo esse commodo. Amet mollit consectetur aliquip elit. Minim esse aliqua
		enim adipisicing aute amet incididunt dolore irure ullamco esse nulla pariatur ea ipsum. Irure
		commodo consectetur consequat proident deserunt sint id aliquip eiusmod dolor aliquip minim
		ipsum. Sint est nostrud qui consequat incididunt incididunt ea sint. Cupidatat eiusmod do
		laborum ullamco labore velit eiusmod. Sunt adipisicing velit sunt magna occaecat dolore enim
		tempor anim exercitation eu eu culpa ea excepteur. Reprehenderit quis commodo nisi sunt labore
		dolore duis labore non cillum Lorem voluptate culpa. Sit eiusmod aliquip ea dolore labore Lorem
		occaecat consectetur adipisicing pariatur eiusmod velit dolor voluptate nulla. Labore dolor sunt
		fugiat elit Lorem labore aliquip esse qui non cupidatat. Proident irure sit anim amet velit. Ad
		aliqua quis irure tempor id enim voluptate quis dolore. Magna culpa duis esse ea est incididunt
		Lorem sint nisi sunt ex laboris sunt deserunt. Pariatur ipsum incididunt esse deserunt amet
		aliquip exercitation sit sint fugiat in laboris excepteur consequat labore. Cillum ex voluptate
		qui elit deserunt mollit dolore ullamco ea in quis veniam. Proident id amet aliqua irure ex
		adipisicing non. Sit labore cillum anim. Qui ipsum dolore eu ea fugiat minim sit commodo fugiat
		qui velit sit quis. In ex labore veniam elit tempor minim. Aute nulla officia minim nostrud.
		Amet enim consectetur eiusmod consectetur exercitation sit ut commodo pariatur sint sit
		excepteur exercitation. Reprehenderit consequat labore adipisicing cillum elit occaecat sunt. Ut
		aute nisi duis consequat reprehenderit aute est minim sit fugiat adipisicing deserunt quis sit.
		Officia deserunt anim ut quis consectetur ipsum laboris voluptate velit non. Ad exercitation
		culpa non nostrud ut exercitation amet veniam anim amet deserunt magna sit nostrud. Consequat
		pariatur dolor laboris enim commodo anim ut. Et sit non dolor consequat non culpa nulla veniam
		quis aute cillum laboris eiusmod irure. Officia proident incididunt nulla proident quis laboris
		exercitation. Exercitation ut ullamco minim ut laborum sint duis irure enim eu exercitation
		eiusmod dolor consectetur. Incididunt aute amet eu. Consectetur laborum anim voluptate
		exercitation pariatur velit aliquip est nisi et. Labore est sit incididunt et nisi incididunt et
		occaecat id et cillum consequat sunt. Sint pariatur veniam velit fugiat anim. Reprehenderit
		voluptate do mollit deserunt est aliquip eiusmod qui. Sunt pariatur mollit officia. Enim nostrud
		cupidatat ea minim sint eu duis duis irure tempor dolor ea elit sunt. Labore do velit minim anim
		quis anim fugiat dolor ex ex magna officia. Duis eu nisi officia minim proident quis eu mollit
		do aliquip aute. Anim excepteur dolore labore officia in eu deserunt sint. Consequat ullamco
		consectetur occaecat. Cillum cillum sit minim eu officia reprehenderit commodo id. Id sunt et
		labore dolor nisi deserunt sit proident. Cillum occaecat voluptate nulla id nostrud veniam
		labore incididunt esse. Culpa proident eiusmod tempor amet dolore id est sint ad culpa sunt
		exercitation tempor exercitation. Minim id amet sunt fugiat ut sunt irure proident amet esse
		dolore ad. In ullamco Lorem adipisicing laboris officia esse laboris enim irure laboris ullamco
		elit. Enim officia adipisicing laboris irure est exercitation mollit. Proident aliqua
		consectetur incididunt nulla id ad labore ipsum nostrud tempor minim aute cillum non pariatur.
		Ullamco fugiat enim nisi sit aliquip culpa eu mollit. Sunt incididunt adipisicing elit nulla
		commodo cillum dolore quis ipsum occaecat qui sit. Aliquip enim anim ea culpa consectetur ut qui
		voluptate cupidatat ullamco. Nulla nostrud velit laborum tempor minim est ut officia ut
		exercitation excepteur aliqua laborum veniam. Excepteur fugiat ipsum voluptate tempor minim
		ullamco enim occaecat reprehenderit fugiat. Aliqua laborum anim fugiat consectetur culpa magna
		non nulla mollit sit id exercitation. Consequat deserunt commodo adipisicing ut occaecat
		pariatur non. Velit sunt consectetur labore occaecat qui irure duis eu laborum mollit amet
		ullamco ad. Mollit magna velit ipsum consequat esse. Occaecat irure occaecat cupidatat
		exercitation esse magna quis commodo anim pariatur labore cupidatat. Qui deserunt ex enim
		voluptate duis ea qui do. Tempor deserunt mollit do cupidatat voluptate nulla. Eiusmod magna
		officia ullamco sit laborum deserunt consequat velit cupidatat Lorem commodo consectetur magna.
		Consectetur consectetur deserunt esse velit adipisicing irure fugiat sit nulla esse dolor id
		minim non. Sit enim quis eu anim id adipisicing proident officia elit enim elit id. Mollit
		adipisicing exercitation labore ut. Labore et sunt incididunt nostrud nostrud et nisi eu fugiat
		adipisicing magna quis pariatur officia. Do voluptate ipsum cillum consectetur sunt esse commodo
		cupidatat deserunt labore Lorem fugiat cupidatat in. Consequat dolore velit reprehenderit esse
		minim id reprehenderit. Laboris amet culpa in cillum aute est adipisicing in cupidatat
		exercitation labore Lorem sunt. Est proident non proident fugiat do do velit eu exercitation
		consectetur magna ad. Amet labore aliquip occaecat enim sint incididunt fugiat dolor eu commodo
		adipisicing cupidatat. Irure ex sint excepteur ipsum id ex id. Eu cupidatat velit est do elit
		nostrud culpa culpa nostrud magna reprehenderit qui eiusmod pariatur veniam. Sunt sunt velit
		Lorem ut fugiat mollit consectetur irure.
	</p>
</div>
<div class="colored">
	<Badge>{m.hello_world({ name: 'SvelteKit User' })}</Badge>
	<Button1 onclick={() => setLocale('en')}>en</Button1>
	<Button1 onclick={() => setLocale('ko')}>ko</Button1>
</div>
<div id="Page_Check"></div>
<style>
.p1 {
	overflow: auto;
	max-block-size: 30rem;
	margin: auto;
	border-width: var(--border-size-3);
}
.colored {
	max-inline-size: 1000px;
	background-color: var(--red-10);
}
</style>
</file>

<file path="apps/boiler_plates/svelte.config.js">
export { default } from '@library/base/svelte.config.js'
</file>

<file path="apps/boiler_plates/tsconfig.json">
{
	"_comments": [
		"exclude와 include는 extends 되지 않아서 따로 써줘야 함",
		"compilerOptions.paths 쓸 거면 packajs.json의 import 부분에도 작성하기"
	],
	"exclude": [
		".turbo/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"playwright-report/**",
		"test-results/**",
		"node_modules/**",
		"src/service-worker/**",
		"static/**",
		"../../libraries/**",
		"paraglide-output/**"
	],
	"extends": ["@library/base/tsconfig.json", "./.svelte-kit/tsconfig.json"],
	"include": [
		"tests/**/*",
		"src/**/*",
		"e2e/**/*",
		".svelte-kit/ambient.d.ts",
		".svelte-kit/non-ambient.d.ts",
		".svelte-kit/types/**/$types.d.ts",
		"*.js",
		"*.ts",
		"*.svelte",
		"*.cjs",
		"*.mjs",
		"**/*.js",
		"**/*.ts",
		"**/*.svelte",
		"**/*.cjs",
		"**/*.mjs"
	]
}
</file>

<file path="apps/boiler_plates/turbo.json">
{
	"$schema": "https://turbo.build/schema.json",
	"extends": ["//"],
	"tasks": {
		"build": {
			"inputs": [
				"$TURBO_DEFAULT$",
				"!**/*.stories.{js,ts,svelte,tsx,jsx,mdx}",
				"**/.env.*",
				".env.production.local",
				".env.local",
				".env.production",
				".env"
			]
		},
		"dev": {
			"inputs": [
				"$TURBO_DEFAULT$",
				"!**/*.stories.{js,ts,svelte,tsx,jsx,mdx}",
				"**/.env.*",
				".env.production.local",
				".env.local",
				".env.production",
				".env"
			]
		}
	}
}
</file>

<file path="apps/boiler_plates/vite.config.js">
import { paraglideVitePlugin } from '@inlang/paraglide-js'
import { currentEnv, defaultConfig } from '@library/base/vite.config.js'
import { sentrySvelteKit } from '@sentry/sveltekit'
import { sveltekit } from '@sveltejs/kit/vite'
import { defineConfig, mergeConfig } from 'vitest/config'
import packageJson from './package.json'
const projectName = packageJson.name
	.slice(5)
	.replace(/^./, (match) => match.toUpperCase())
	.replaceAll(/_(.)/g, (_, char) => char.toUpperCase())
	.replaceAll('_', '')
export default mergeConfig(
	defaultConfig,
	defineConfig({
		plugins: [
			sentrySvelteKit({
				adapter: 'cloudflare',
				sourceMapsUploadOptions: {
					org: 'sungho-yahng',
					project: 'monorepo',
					authToken: process.env.SENTRY_AUTH_TOKEN,
					sourcemaps: {
						filesToDeleteAfterUpload: ['./.svelte-kit/**/*.map'],
					},
					release: {
						name: `${projectName}@${currentEnv}@${String(new Date().toISOString())}`,
					},
				},
			}),
			sveltekit(),
			paraglideVitePlugin({
				// @ts-ignore
				outdir: '../../libraries/paraglide/paraglide-output',
				project: '../../libraries/paraglide/project.inlang',
				strategy: ['url', 'cookie', 'baseLocale'],
				disableAsyncLocalStorage: true,
			}),
		],
	}),
)
</file>

<file path="apps/Swift_Linker/package.json">
{
	"name": "swift_linker",
	"version": "1.0.0",
	"description": "",
	"license": "ISC",
	"author": "",
	"type": "module",
	"main": "index.js",
	"scripts": {
		"test:unit": "vitest run"
	},
	"dependencies": {
		"@library/base": "workspace:*",
		"@library/helpers": "workspace:*",
		"mutative": "^1.1.0",
		"nanoid": "^5.1.5",
		"ramda": "^0.30.1",
		"random-js": "^2.1.0",
		"yup": "^1.6.1"
	},
	"keywords": []
}
</file>

<file path="apps/Swift_Linker/src/team_match_legacy/basic.js">
import * as R from 'ramda'
import { Maybe, Validator } from '../../../utilities/monads/monads.js'
import { getConditions } from './config_conditions.js'
/**
 * @typedef {import('./config_conditions.js').Config} Config
 *
 * @typedef {import('./config_conditions.js').Condition} Condition
 */
// Todo: 일단 고 수준에서 정리하기가 필요하다!
// Todo: 일단 에러 뜨는 것들 부터 수정
// Todo: 함수들마다 타입 분류 - maybe, array 외에도 array가 depth가 몇인지도 분류해야함
// Todo: 각 함수마다 conditions 작성하고 .isValidWith에 반영
// Todo: conditions에 사용될 element condition들도 미리 작성해서 가져다 쓸 수 있음
// Todo: 역할이나 그런 것마다 숫자 말고 토큰 같은 걸로 대체하기. 대체 가능한 멤버들마다. avoidGroups처럼 이름 지정 안 된 특성들의 경우엔 이름 생성해서 그걸로 표시하기. 이 경우엔 A B C면 된다
const sortBySize = R.curry(
	/**
	 * @param {Validator<Config>} validatorConfig
	 * @param {Maybe<number[][]>} maybeNestedArray
	 * @returns {Maybe<number[][]>}
	 */
	(validatorConfig, maybeNestedArray) => {
		if (!validatorConfig.isValidWith(getConditions(['size']))) {
			return Maybe.of(null)
		}
		return maybeNestedArray.chain((array) => {
			const config = validatorConfig.getConfig()
			const { size } = config
			let initArray = []
			let lastArray = array
			if (size) {
				initArray = R.filter((subArray) => subArray.length === size, array)
				lastArray = R.reject((subArray) => subArray.length === size, array)
			}
			lastArray = R.sort((subArray1, subArray2) => subArray1.length - subArray2.length, lastArray)
			return Maybe.of(R.concat(initArray, lastArray))
		})
	},
)
// Tests
sortBySize(
	Validator.of({ size: 2 }),
	Maybe.of([
		[3, 4, 5],
		[1, 2, 3, 5],
		[4, 5, 6, 8, 10],
		[10, 11],
	]),
) /* ? */
sortBySize(
	Validator.of({ size: 0 }),
	Maybe.of([
		[3, 4, 5],
		[1, 2, 3, 5],
		[4, 5, 6, 8, 10],
		[10, 11],
	]),
) /* ? */
// ---
const splitArrayBySize = R.curry((validatorConfig, array) => {
	if (!validatorConfig.isValidWith()) {
		return Maybe.of(null)
	}
	const config = validatorConfig.getConfig()
	const { distribute, size, threshold } = config
	const splittedArray = R.splitEvery(size, array)
	if (splittedArray.length > 1) {
		const lastArray = R.last(splittedArray)
		if (
			Array.isArray(lastArray) &&
			lastArray.length !== size &&
			distribute &&
			lastArray.length < threshold
		) {
			const splittedInitArray = R.dropLast(1, splittedArray)
			const arrayNumber = splittedInitArray.length
			R.addIndex(R.forEach)((element, index) => {
				const targetIndex = index % arrayNumber
				const targetArray = splittedInitArray[targetIndex]
				if (Array.isArray(targetArray)) {
					targetArray.push(element)
				}
			})(lastArray)
			return Maybe.of(splittedInitArray)
		}
	}
	return Maybe.of(splittedArray)
})
// Tests
splitArrayBySize(Validator.of({ size: 2 }), [1, 2, 3, 4, 5, 6, 7])
sortBySize(
	Validator.of({ size: 2 }),
	splitArrayBySize(Validator.of({ size: 2 }), [1, 2, 3, 4, 5, 6, 7]),
) /* ? */
splitArrayBySize(Validator.of({ distribute: true, size: 2 }), [1, 2, 3, 4, 5, 6, 7])
/**
 * @param {Validator<Config>} validatorConfig
 * @param {number[]} array
 * @returns {Maybe<number[][]>}
 */
const splitArrayByNumber = R.curry(
	/**
	 * @param {Validator<Config>} validatorConfig
	 * @param {number[]} array
	 * @returns {Maybe<number[][]>}
	 */
	(validatorConfig, array) => {
		if (!validatorConfig.isValidWith()) {
			return Maybe.of(null)
		}
		const config = validatorConfig.getConfig()
		const { number } = config
		const size = Math.floor(array.length / number)
		if (size === 0) {
			const splitBy1 = R.splitEvery(1, array)
			const remainedNumber = number - splitBy1.length
			const lastArray = R.map(() => [], R.range(0, remainedNumber))
			return Maybe.of(R.concat(splitBy1, lastArray))
		}
		const newValidator = validatorConfig.mapValue((config) => ({
			...config,
			distribute: true,
			size,
			threshold: size,
		}))
		const result = splitArrayBySize(newValidator, array)
		validatorConfig.mergeErrors(newValidator)
		return result
	},
)
// Tests
splitArrayByNumber(Validator.of({ number: 3 }), R.range(1, 11))
splitArrayByNumber(Validator.of({ number: 3 }), R.range(1, 34))
splitArrayByNumber(Validator.of({ number: 3 }), R.range(1, 33))
splitArrayByNumber(Validator.of({ number: 3 }), R.range(1, 22))
splitArrayByNumber(Validator.of({ number: 3 }), R.range(1, 23))
splitArrayByNumber(Validator.of({ number: 8 }), R.range(1, 5))
const splitArrayWithSizesFixed = R.curry((validatorConfig, array) => {
	const conditions = [conditions.sizesFixed]
	if (!validatorConfig.isValidWith()) {
		return Maybe.of(null)
	}
	const config = validatorConfig.getConfig()
	const { number, size, sizesFixed } = config
	const mapReject = R.pipe(R.map, R.reject(R.isNil))
	let arrayInex = 0
	const initSplit = mapReject((oneSize) => {
		if (arrayInex + oneSize > array.length) {
			return Maybe.of(null)
		}
		const result = R.slice(arrayInex, arrayInex + oneSize, array)
		arrayInex += oneSize
		return Maybe.of(result)
	}, sizesFixed)
	let lastSplit = []
	if (arrayInex < array.length) {
		const remainedArray = R.slice(arrayInex, array.length, array)
		if (number) {
			const initNumber = initSplit.length
			let lastNumber = 0
			if (initNumber < number) {
				lastNumber = number - initNumber
				const newValidator = validatorConfig.mapValue((config) => ({
					...config,
					number: lastNumber,
				}))
				lastSplit = splitArrayByNumber(newValidator, remainedArray)
				validatorConfig.mergeErrors(newValidator)
			}
		} else if (size) {
			// Todo number가 있으면 size가 무시되는거 conditions에 모순 조건으로 넣기
			const newValidator = validatorConfig.mapValue((config) => ({ size, ...config }))
			lastSplit = splitArrayBySize(newValidator, remainedArray)
			validatorConfig.mergeErrors(newValidator)
		} else {
			const newValidator = validatorConfig.mapValue((config) => ({
				size: R.last(sizesFixed),
				...config,
			}))
			validatorConfig.mergeErrors(newValidator)
		}
	}
	return Maybe.of(R.concat(initSplit)).ap(lastSplit)
})
// Tests
// splitArrayWithSizesFixed(Validator.of({ size: 4, sizesFixed: [2, 2] }), R.range(1, 11))
// splitArrayWithSizesFixed(Validator.of({ size: 2, sizesFixed: [2, 2] }), R.range(1, 34))
// splitArrayWithSizesFixed(Validator.of({ size: 3, sizesFixed: [2, 2] }), R.range(1, 33))
// splitArrayWithSizesFixed(Validator.of({ size: 5, sizesFixed: [2, 2] }), R.range(1, 22))
// splitArrayWithSizesFixed(Validator.of({ size: 1, sizesFixed: [2, 2] }), R.range(1, 23))
splitArrayWithSizesFixed(Validator.of({ number: 7, size: 2, sizesFixed: [2, 2] }), R.range(1, 23))
const getNumberOfTeams = R.curry((validatorConfig, array) => {
	if (!validatorConfig.isValidWith()) {
		return Maybe.of(null)
	}
	const config = validatorConfig.getConfig()
	const { number } = config
	if (number) {
		return Maybe.of(number)
	}
	const rawSplittedArray = splitArrayBySize(validatorConfig, array)
	return Maybe.of(rawSplittedArray.getValue()?.length)
})
// Tests
getNumberOfTeams(Validator.of({ size: 2, threshold: 8 }), R.range(1, 11))
getNumberOfTeams(Validator.of({ distribute: true, size: 10, threshold: 8 }), R.range(1, 34))
getNumberOfTeams(Validator.of({ distribute: true, size: 10, threshold: 8 }), R.range(1, 38))
getNumberOfTeams(Validator.of({ distribute: true, size: 10, threshold: 8 }), R.range(1, 39))
// ---
// 이런 것들을 위한 함수를 따로 써야한다
const splitAvoidGroups = R.curry((validatorConfig, array) => {
	if (!validatorConfig.isValidWith()) {
		return Maybe.of(null)
	}
	const config = validatorConfig.getConfig()
	const { avoidGroups } = config
	const numberOfSplit = getNumberOfTeams(validatorConfig, array).getValue()
	const newValidator = validatorConfig.mapValue((config) => ({ number: numberOfSplit, ...config }))
	const result = R.map(
		(oneGroup) => splitArrayByNumber(newValidator, oneGroup).getValue(),
		avoidGroups,
	)
	validatorConfig.mergeErrors(newValidator)
	return Maybe.of(result)
})
// Tests
splitAvoidGroups(
	Validator.of({
		avoidGroups: [
			[1, 2],
			[2, 3],
		],
		size: 2,
	}),
	R.range(1, 11),
)
splitAvoidGroups(Validator.of({ avoidGroups: [R.range(1, 8), [2, 3]], size: 2 }), R.range(1, 11))
const splitGlueGroups = R.curry((validatorConfig, array) => {
	if (!validatorConfig.isValidWith()) {
		return Maybe.of(null)
	}
	const config = validatorConfig.getConfig()
	const { glueGroups } = config
	const numberOfSplit = getNumberOfTeams(validatorConfig, array).getValue()
})
// Tests
splitGlueGroups(
	Validator.of({
		glueGroups: [
			[3, 4],
			[4, 5],
			[5, 6],
		],
		size: 2,
	}),
	R.range(1, 11),
)
splitGlueGroups(Validator.of({ glueGroups: [R.range(1, 8), [2, 3]], size: 2 }), R.range(1, 11))
</file>

<file path="apps/Swift_Linker/src/team_match_legacy/cohort_distribution.js">
// @ts-nocheck
import * as R from 'ramda'
import { AllMembers, Cohort, Member, Team, Teams } from './monads.js'
/** @typedef {import('./monads.js').Id} Id */
// ---
const includedIn = R.curry((hasMemberId, idArray) => idArray.some((id) => hasMemberId(id)))
const getMemberCount = R.curry((idArray1, idArray2) => R.intersection(idArray1, idArray2).length)
const getGreatestRemainingSlotTeam = R.reduce(
	R.maxBy((team) => team.getRemainingSlot()),
	{
		getRemainingSlot: () => 0,
		index: -1,
	},
)
// ---
// todo: 어떤 사람은 팀 두개에 들어간다 이런 경우도 있어야 함 -> 이거 teams를 두개 쓰는 걸로 되나?
const splitCohorts = R.curry(
	/**
	 * @param {AllMembers} allMembers
	 * @param {Cohort[]} cohorts
	 * @param {Teams} teams
	 * @returns {Teams}
	 */
	(allMembers, cohorts, teams) => {
		const getRegularArray = R.pipe(
			R.filter((id) => allMembers.hasMemberId(id)),
			(array) => (Array.isArray(array) ? teams.removeDuplicateByThis(array) : array),
		)
		const regularArrays = cohorts.map((cohort) => getRegularArray(cohort.getJoinedArray()))
		if (regularArrays.every((array) => array.length === 0)) {
			return teams
		}
		const withoutFunctionArray = regularArrays.map((array) => R.without(array))
		const uniqArrays = []
		for (const [i, array] of regularArrays.entries()) {
			const currentWithoutFunctionArray = R.remove(i, 1, withoutFunctionArray)
			uniqArrays[i] = R.pipe(...currentWithoutFunctionArray)(array)
		}
		// ---
		// todo: 인원 많은 쪽이 적은 쪽의 팀을 너무 침입한다 - 역시 코호트 별로 배정될 수 있는 팀들을 나눠야겠음
		// unqArray를 length 작은 쪽부터 정렬 - 문제는 remainderArrays -> 이거 먼저 구하고 순서 바꿔진 거에 따라서 순서 바꿔...
		const sortedIndices = uniqArrays
			.map((array, index) => ({ array, index }))
			.sort((a, b) => a.array.length - b.array.length)
			.map((item) => item.index)
		const sortedArrays = sortedIndices.map((index) => uniqArrays[index])
		let counts = sortedArrays.map((array) => array.length)
		const minCount = Math.min(...counts)
		counts = counts.map((count) => Math.max(1, Math.floor(count / minCount)))
		const temporaryArrays = R.clone(sortedArrays)
		const remainderArrays = regularArrays.map((array, i) => R.remove(i, 1, regularArrays).flat())
		const sortedRemainderArrays = sortedIndices.map((index) => remainderArrays[index])
		// todo: 인원 0인 array 제거 - 대응하는 배열들에서 다 제거
		const temporaryTeamArray = [...teams.teamArray]
		// todo: 적은 쪽부터 팀 하나씩 줘.
		// ---
		while (
			temporaryArrays.some((array) => array.length > 0) &&
			temporaryTeamArray.some((team) => team.hasRoom())
		) {
			for (const [i, currentArray] of temporaryArrays.entries()) {
				if (currentArray.length === 0) {
					continue
				}
				let temporaryArray = R.clone(currentArray)
				const currentRemainders = remainderArrays[i]
				const currentCount = counts[i]
				for (const key of R.range(0, currentCount)) {
					if (temporaryArray.length === 0) {
						break
					}
					// X 여기가 rigid 가리는 부분
					const teamWithRoomArray = temporaryTeamArray.filter((team) => team.hasRoom())
					if (teamWithRoomArray.length === 0) {
						break
					}
					const minTeam = R.reduce(
						R.minBy((team) => R.intersection(team.idArray, currentRemainders)),
						teamWithRoomArray[0],
						teamWithRoomArray,
					)
					const minValue = R.intersection(minTeam.idArray, minTeam)
					const minTeams = R.filter(
						(team) => R.intersection(team.idArray, currentRemainders) === minValue,
						teamWithRoomArray,
					)
					// X 여기가 depth vs breadth 가리는 부분
					let targetTeam = minTeam
					if (minTeams.length >= 2) {
						targetTeam = R.reduce(
							R.maxBy((team) => team.getRemainingSlot()),
							minTeams[0],
							minTeams,
						)
					}
					const targetndex = temporaryTeamArray.indexOf(targetTeam)
					temporaryTeamArray[targetndex] = targetTeam.add(R.head(temporaryArray))
					temporaryArray = R.tail(temporaryArray)
					temporaryArrays[i] = temporaryArray
				}
			}
		}
		return new Teams(temporaryTeamArray)
	},
)
// ----------------------------------------------------------------
// test
const allMembers = AllMembers.of(R.range(0, 500).map((id) => new Member(String(id))))
const cohort1 = allMembers.getCohort((member) => Number(member.id) % 2 === 0)
const cohort2 = allMembers.getCohort((member) => Number(member.id) % 5 === 0)
const cohorts = [cohort1, cohort2]
// const teams = Teams.of([
// 	Team.of(allMembers.getIdArray(member => Number(member.id) % 8 === 0), 20),
// 	Team.of(allMembers.getIdArray(member => Number(member.id) % 9 === 0 && Number(member.id) !== 0), 30),
// ], [20, 30])
// const teams = Teams.empty([10, 10, 10, 10, 10])
const teams = Teams.init(
	[
		['1', '2'],
		['3', '6'],
		['7', '8', '9'],
	],
	[10, 10, 10],
)
// ----------------------------------------------------------------
splitCohorts(allMembers, cohorts, teams) /* ?+. */
</file>

<file path="apps/Swift_Linker/src/team_match_legacy/config_conditions.js">
import * as yup from 'yup'
/** @module types */
/**
 * @typedef {Object} Config
 * @property {number} size - 크기
 * @property {number[]} sizesFixed - 고정 크기 배열
 * @property {boolean} distribute - 분배 여부
 * @property {number} threshold - 임계값
 * @property {number} number - 숫자
 * @property {number[][]} avoidGroups - 그룹 회피 배열
 * @property {number[][]} glueGroups - 그룹 접착 배열
 */
/**
 * @typedef {Object} Condition
 * @property {string} error - 오류 메시지
 * @property {(config: Config) => boolean} function - 조건 함수
 */
/**
 * 여러 조건을 포함하는 객체
 *
 * @type {Object<string, Condition>}
 */
const conditions = {
	/**
	 * Size가 0보다 큰지 확인하는 조건
	 *
	 * @type {Condition}
	 */
	size: {
		error: 'size must be greater than 0',
		function: ({ size }) => yup.number().integer().positive().isValidSync(size),
	},
	/**
	 * SizesFixed 배열의 모든 요소가 0보다 큰지 확인하는 조건
	 *
	 * @type {Condition}
	 */
	sizesFixed: {
		error: 'Fixed size must be greater than 0',
		function: ({ sizesFixed }) =>
			yup.array().of(yup.number().integer().positive()).isValidSync(sizesFixed),
	},
}
// ---
/**
 * @param {string[]} picks - 조건 선택 배열
 * @returns {Condition[]}
 * @export
 */
export function getConditions(picks) {
	return picks.map((pick) => {
		const condition = conditions[pick]
		if (!condition) {
			throw new Error(`Unknown condition: ${pick}`)
		}
		if (pick === 'sizesFixed') {
			console.log(condition)
		}
		return condition
	})
}
getConditions(['size', 'sizesFixed']) /* ? */
</file>

<file path="apps/Swift_Linker/src/team_match_legacy/monads.js">
import util, { inspect } from 'node:util'
import { create } from '@library/helpers/mutative'
import { unsafe } from 'mutative'
import { nanoid } from 'nanoid'
import * as R from 'ramda'
import { areAllDisjoint } from '../utilities/functions/utilities.js'
import { shuffleArray } from './random_engine.js'
export { AllMembers, Cohort, Member, Team, Teams }
// ----------------------------------------------------------------------------------------
/** @typedef {string} Id */
// ----------------------------------------------------------------------------------------
class Member {
	/**
	 * @param {Id} id
	 * @param {Object} properties
	 */
	constructor(id = nanoid(), properties = {}) {
		this.id = id
		this.properties = properties
	}
	/**
	 * @param {Id} id
	 * @param {Object} properties
	 */
	static of(id, properties) {
		return new Member(id, properties)
	}
}
class AllMembers {
	/** @param {Member[]} members */
	constructor(members) {
		this.members = members
	}
	static empty() {
		return new AllMembers([])
	}
	/** @param {Member[]} members */
	static of(members) {
		return new AllMembers(members)
	}
	/**
	 * @param {Member} member
	 * @returns {AllMembers}
	 */
	add(member) {
		return new AllMembers(
			create(this.members, (draft) => {
				draft.push(member)
			}),
		)
	}
	/**
	 * @param {Member[]} members
	 * @returns {AllMembers}
	 */
	addMembers(members) {
		return new AllMembers([...this.members, ...members])
	}
	/**
	 * @param {AllMembers} other
	 * @returns {AllMembers}
	 */
	concat(other) {
		return new AllMembers([...this.members, ...other.members])
	}
	/**
	 * @param {(val: Member) => Boolean} filterF
	 * @returns {Cohort}
	 */
	getCohort(filterF) {
		return new Cohort(this.members.filter(filterF).map((member) => member.id))
	}
	/**
	 * @param {Teams} teams
	 * @returns {AllMembers}
	 */
	getRemainingMembers(teams) {
		return new AllMembers(
			this.members.filter((member) => !teams.teams.some((team) => team.hasMemberId(member.id))),
		)
	}
	/**
	 * @param {Id} id
	 * @returns {boolean}
	 */
	hasMemberId(id) {
		return this.members.some((member) => member.id === id)
	}
	/** @returns {AllMembers} */
	shuffle() {
		return new AllMembers(
			create(this.members, (draft) => {
				unsafe(() => {
					shuffleArray(draft)
				})
			}),
		)
	}
}
/**
 * 중첩된 Cohort join 가능
 *
 * @template idOrCohortArray
 * @class Cohort
 */
class Cohort {
	isCohort = R.T
	get array() {
		return this.idOrCohortArray
	}
	get totalSize() {
		return this.getJoinedArray().length
	}
	/** @param {(Id | Cohort)[]} idOrCohortArray */
	constructor(idOrCohortArray) {
		this.idOrCohortArray = R.uniq(idOrCohortArray)
	}
	static empty() {
		return new Cohort([])
	}
	/**
	 * @param {(Id | Cohort)[]} idOrCohortArray
	 * @returns {Cohort}
	 */
	static of(idOrCohortArray) {
		return new Cohort(idOrCohortArray)
	}
	/**
	 * @param {Id | Cohort} member
	 * @returns {Cohort}
	 */
	add(member) {
		return new Cohort(
			create(this.idOrCohortArray, (draft) => {
				draft.push(member)
			}),
		)
	}
	/**
	 * @param {(Id | Cohort)[]} idOrCohortArray
	 * @returns {Cohort}
	 */
	addMembers(idOrCohortArray) {
		return new Cohort([...this.idOrCohortArray, ...idOrCohortArray])
	}
	/** @returns {Id[]} */
	getJoinedArray() {
		return R.uniq(
			[...this.idOrCohortArray].flatMap((idOrCohort) => {
				if (idOrCohort instanceof Cohort) {
					if (idOrCohort === this) {
						return []
					}
					return idOrCohort.getJoinedArray()
				}
				return idOrCohort
			}),
		)
	}
	/** @returns {(Id | Cohort)[]} */
	getValue() {
		return this.idOrCohortArray
	}
	/**
	 * @param {Id[]} team
	 * @returns {boolean}
	 */
	includedIn(team) {
		return this.getJoinedArray().some(
			(/** @type {string} */ id) => typeof id === 'string' && team.includes(id),
		)
	}
	/** @returns {Cohort<Id[]>} */
	join() {
		return new Cohort(this.getJoinedArray())
	}
	/** @returns {{ id: Id; Cohort: Cohort<Id[]> }} */
	pop() {
		const array = this.getJoinedArray()
		if (array.length === 0) {
			return { Cohort: this, id: null }
		}
		const id = array.pop()
		if (typeof id !== 'string') {
			throw new TypeError('This is not an id')
		}
		return { Cohort: new Cohort(array), id }
	}
	[util.inspect.custom]() {
		return `Cohort(${inspect(this.idOrCohortArray)})`
	}
}
// fix 여기 역할을 추가해야함 - 그러면서도 디폴트는 같게
class Team {
	/** @returns {Id[]} */
	get idArray() {
		return this.memberIds
	}
	/**
	 * @param {Id[]} memberIds
	 * @param {number} slotFixed
	 */
	constructor(memberIds, slotFixed, id = nanoid()) {
		this.slotFixed = slotFixed
		this.memberIds = R.uniq(memberIds)
		this.id = id
		if (slotFixed < this.memberIds.length) {
			throw new Error('The number of members must be less than or equal to the slots')
		}
	}
	/**
	 * @param {number} slotFixed
	 * @returns {Team}
	 */
	static empty(slotFixed) {
		if (typeof slotFixed !== 'number' || slotFixed < 0) {
			throw new Error('Slot fixed must be a positive number')
		}
		return new Team([], slotFixed)
	}
	/**
	 * @param {Id[]} memberIds
	 * @param {number} slotFixed
	 * @returns {Team}
	 */
	static of(memberIds, slotFixed, id) {
		return new Team(memberIds, slotFixed, id)
	}
	/**
	 * @param {Id} id
	 * @returns {Team}
	 */
	add(id) {
		return new Team([...this.memberIds, id], this.slotFixed, this.id)
	}
	/**
	 * @param {Team} otherTeam
	 * @returns {Team}
	 */
	concat(otherTeam) {
		if (this.slotFixed !== otherTeam.slotFixed) {
			throw new Error('The number of slots must be the same')
		}
		return new Team([...this.memberIds, ...otherTeam.memberIds], this.slotFixed, this.id)
	}
	getRemainingSlot() {
		return this.slotFixed - this.memberIds.length
	}
	/**
	 * @param {Id} id
	 * @returns {boolean}
	 */
	hasMemberId(id) {
		return this.memberIds.includes(id)
	}
	/** @returns {boolean} */
	hasRoom() {
		return this.slotFixed > this.memberIds.length
	}
	/** @param {(value: string, index: number, array: string[]) => string} f */
	map(f) {
		return new Team(this.memberIds.map(f), this.slotFixed, this.id)
	}
	/**
	 * @param {Id[]} otherMemberIds
	 * @returns {Team}
	 */
	update(otherMemberIds) {
		return new Team([...this.memberIds, ...otherMemberIds], this.slotFixed, this.id)
	}
	[util.inspect.custom]() {
		return `Team(${inspect(this.memberIds)}, ${inspect(this.slotFixed)})`
	}
}
/**
 * 팀들에 나눠서 column 단위로 concat으로 추가 가능
 *
 * @class Teams
 */
class Teams {
	/** @returns {number} */
	get numberOfTeams() {
		if (this.teamArray.length !== this.slots.length) {
			throw new Error('Teams must have the same number of slots')
		}
		return this.teamArray.length
	}
	/**
	 * @param {Team[]} teamArray
	 * @param {number[]} slots 팀별 남은 자리
	 */
	constructor(teamArray, slots = teamArray.map((team) => team.slotFixed)) {
		if (slots.length !== teamArray.length) {
			throw new Error('Slots must be the same length as number of teamArray')
		}
		if (!Array.isArray(teamArray)) {
			throw new TypeError('Teams must be an array')
		}
		if (!areAllDisjoint(teamArray.map((team) => team.idArray))) {
			throw new Error('Teams must be disjoint')
		}
		this.teamArray = teamArray
		this.slots = slots
	}
	/**
	 * @param {number[]} slots
	 * @param {number[]} slots
	 * @returns {Teams}
	 */
	static empty(slots) {
		return new Teams(
			R.range(0, slots.length).map((n, i) => Team.empty(slots[i])),
			slots,
		)
	}
	/**
	 * @param {Id[][]} idArrayArray
	 * @param {number[]} slots
	 * @returns {Teams}
	 * @static
	 */
	static init(idArrayArray, slots) {
		return new Teams(
			idArrayArray.map((idArray, i) => Team.of(idArray, slots[i])),
			slots,
		)
	}
	/**
	 * @param {Team[]} teamArray
	 * @param {number[]} [slots]
	 */
	static of(teamArray, slots) {
		return new Teams(teamArray, slots)
	}
	/**
	 * @param {Id} id
	 * @returns {boolean}
	 */
	alreadyJoined(id) {
		return this.teamArray.some((team) => team.hasMemberId(id))
	}
	/**
	 * @param {Teams} otherTeams
	 * @returns {Teams}
	 */
	concat(otherTeams) {
		if (this.numberOfTeams !== otherTeams.numberOfTeams) {
			throw new Error('Teams must have the same number of teamArray')
		}
		if (!R.equals(this.slots, otherTeams.slots)) {
			throw new Error('Slots must be the same')
		}
		const newTeams = this.teamArray.map((team, index) => team.concat(otherTeams.teamArray[index]))
		return new Teams(newTeams, this.slots)
	}
	/** @returns {Id[]} */
	getAllTeamMembers() {
		return this.teamArray.flatMap((team) => team.idArray)
	}
	/** @returns {number[]} */
	getRemainingSlots() {
		return this.teamArray.map((team) => team.getRemainingSlot())
	}
	/**
	 * @param {(value: Team, index: number, array: Team[]) => Team} f
	 * @returns {Teams}
	 */
	map(f) {
		return new Teams(this.teamArray.map(f), this.slots)
	}
	/** @type {(idArray: Id[]) => Id[]} */
	removeDuplicateByThis(idArray) {
		if (!idArray) {
			return []
		}
		return R.difference(idArray, this.getAllTeamMembers())
	}
	/** @param {number[]} slots */
	setSlots(slots) {
		if (this.teamArray.length !== slots.length) {
			throw new Error('Slots must be the same length as number of teamArray')
		}
		return new Teams(this.teamArray, slots)
	}
	/** @param {Team[]} nextTeams */
	update(nextTeams) {
		return this.concat(Teams.of(nextTeams))
	}
	[util.inspect.custom]() {
		return `Teams(${inspect(this.teamArray)}, ${inspect(this.slots)})`
	}
}
</file>

<file path="apps/Swift_Linker/src/team_match_legacy/random_engine.js">
import { nodeCrypto, Random, shuffle } from 'random-js'
export const random = new Random(nodeCrypto)
export const shuffleArray = (array) => shuffle(nodeCrypto, array)
</file>

<file path="apps/Swift_Linker/src/team_matching/cohort_distribution.js">
import * as R from 'ramda'
import { AllMembers, Member, Team, Teams } from './monads.js'
const teamArray = R.range(0, 10).map((_i) => Team.getDefaultTeam(10))
const roleArray = teamArray.flatMap((team) => team.roleArray)
const teams = Teams.of(teamArray)
const allMembers = AllMembers.of(R.range(0, 100).map((id) => Member.of(String(id))))
const cohort1 = allMembers.getCohort((member) => Number(member.id) % 2 === 0)
const cohort2 = allMembers.getCohort((member) => Number(member.id) % 5 === 0)
const cohorts = [cohort1, cohort2]
// todo 여기서 안되는 애들 rest로 빼는거 어케함?
class Chunk {
	/**
	 * @param {SubRoleSpace} subRoleSpace
	 * @param {Member[]} members
	 */
	constructor(subRoleSpace, members) {
		this.subRoleSpace = subRoleSpace
		this.members = R.uniq(members)
	}
	/**
	 * @param {SubRoleSpace} subRoleSpace
	 * @param {Member[]} members
	 * @returns {Chunk}
	 */
	static of(subRoleSpace, members) {
		return new Chunk(subRoleSpace, members)
	}
	/**
	 * @param {Chunk | Undefined | Null} otherChunk
	 * @returns {Chunk}
	 */
	concat(otherChunk) {
		if (!otherChunk) {
			return this
		}
		return new Chunk(
			this.subRoleSpace.concat(otherChunk.subRoleSpace),
			this.members.concat(otherChunk.members),
		)
	}
	/**
	 * @param {RoleSlots} roleSlots
	 * @param {Member[]} members
	 * @returns {[Chunk, Chunk]}
	 */
	divide(roleSlots, members) {
		const dividedRoleSlots = this.subRoleSpace.divide(roleSlots)
		const dividedMembers = this.members.filter((member) => !members.includes(member))
		return [new Chunk(dividedRoleSlots[0], members), new Chunk(dividedRoleSlots[1], dividedMembers)]
	}
	/** @returns {[Chunk, Chunk]} */
	drop() {
		const remaningRoleSlots = R.clone(this.subRoleSpace.roleSlots)
		const remainingMembers = [...this.members]
		for (const _i of this.members.keys()) {
			// eslint-disable-line sonarjs/sonar-no-unused-vars
			remaningRoleSlots.sort((a, b) => -1 * (a.slot - b.slot))
			const leastRoleSlot = remaningRoleSlots[0]
			if (leastRoleSlot.slot <= 0) {
				break
			}
			remainingMembers.shift()
			leastRoleSlot.slot -= 1
		}
		// @ts-ignore
		return this.divide(remaningRoleSlots, remainingMembers).reverse()
	}
	/**
	 * @param {Member[]} members
	 * @returns {Chunk}
	 */
	setMembers(members) {
		return new Chunk(this.subRoleSpace, members)
	}
	/**
	 * @param {number} start
	 * @param {number} end
	 * @returns {Chunk}
	 */
	slice(start, end, newMembers = this.members) {
		return new Chunk(this.subRoleSpace.slice(start, end), newMembers)
	}
	/** @returns {Error | true} */
	validate() {
		if (this.subRoleSpace.allSlots < this.members.length) {
			return new Error('Slot of roles must be greater than or equal to the number of members')
		}
		return true
	}
}
/**
 * @typedef {{ id: string; slot: number }} RoleSlot
 *
 * @typedef {RoleSlot[]} RoleSlots
 */
class SubRoleSpace {
	/** @returns {number} */
	get allSlots() {
		return this.roleSlots.reduce((accumulator, current) => accumulator + current.slot, 0)
	}
	/**
	 * @class
	 * @param {RoleSlots} roleSlots
	 */
	constructor(roleSlots) {
		this.roleSlots = roleSlots
			.filter((roleSlot) => roleSlot.slot > 0)
			.sort((a, b) => a.slot - b.slot)
	}
	/**
	 * @param {RoleSlots} roleSlots
	 * @returns {SubRoleSpace}
	 */
	static of(roleSlots) {
		return new SubRoleSpace(roleSlots)
	}
	/**
	 * @param {SubRoleSpace} otherSubRoleSpace
	 * @returns {SubRoleSpace}
	 */
	concat(otherSubRoleSpace) {
		const newRoleSlots = R.clone(this.roleSlots)
		const otherRoleSlots = otherSubRoleSpace.roleSlots
		for (const currentRoleSlot of otherRoleSlots) {
			const matchedRoleSlot = newRoleSlots.find(
				(matchedRoleSlot) => matchedRoleSlot.id === currentRoleSlot.id,
			)
			if (matchedRoleSlot) {
				const matchedRoleSlotIndex = newRoleSlots.indexOf(matchedRoleSlot)
				newRoleSlots[matchedRoleSlotIndex] = {
					...matchedRoleSlot,
					slot: matchedRoleSlot.slot + currentRoleSlot.slot,
				}
			} else {
				newRoleSlots.push(currentRoleSlot)
			}
		}
		return new SubRoleSpace(newRoleSlots)
	}
	/**
	 * @param {RoleSlots} roleSlots
	 * @returns {[SubRoleSpace, SubRoleSpace]}
	 */
	divide(roleSlots) {
		return [
			new SubRoleSpace(roleSlots),
			new SubRoleSpace(
				roleSlots.map((roleSlot) => {
					const matchedRoleSlot = this.roleSlots.find(
						(matchedRoleSlot) => matchedRoleSlot.id === roleSlot.id,
					)
					if (matchedRoleSlot) {
						return { ...roleSlot, slot: matchedRoleSlot.slot - roleSlot.slot }
					}
					return roleSlot
				}),
			),
		]
	}
	/**
	 * @param {number} start
	 * @param {number} end
	 * @returns {SubRoleSpace}
	 */
	slice(start, end) {
		return new SubRoleSpace(this.roleSlots.slice(start, end))
	}
}
// X 우선 cohort1과 cohort2 분리만 구현해보기 - 단 2개의 cohort / 1개의 규칙
const totalRoleSpace = SubRoleSpace.of(roleArray.map((role) => ({ id: role.id, slot: role.slot })))
const totalChunk = Chunk.of(totalRoleSpace, allMembers.members)
const validateResult = totalChunk.validate()
if (validateResult instanceof Error) {
	throw validateResult
}
// ----------------------------------------------------------------
// init
const currentChunk = totalChunk
const currentRoleSpace = currentChunk.subRoleSpace
if (currentChunk.members.length === 0) {
	throw new Error('members must be greater than 0')
}
if (currentRoleSpace.roleSlots.length === 0) {
	throw new Error('roleslots must be greater than 0')
}
const getRegularArray = R.pipe(
	R.filter((member) => allMembers.hasMember(member)),
	(array) => (Array.isArray(array) ? teams.removeDuplicateByThis(array) : array),
)
let regularMemberArrays = cohorts
	.map((cohort) => getRegularArray(cohort.joinedArray))
	.filter((array) => array.length > 0)
const flatDepthForMembers = 2
// if (regularArrays.every(array => array.length === 0)) {
// 	return teams
// }
const withoutFunctionArray = regularMemberArrays.map((array) => R.without(array))
for (const [i, array] of regularMemberArrays.entries()) {
	const currentWithoutFunctionArray = R.remove(Number(i), 1, withoutFunctionArray)
	// @ts-ignore
	regularMemberArrays[i] = R.pipe(...currentWithoutFunctionArray)(array)
}
regularMemberArrays.sort((a, b) => a.length - b.length)
const restMembers = allMembers.getRemainingMembers(regularMemberArrays.flat(flatDepthForMembers))
// 팀의 수가 sortedArrays의 elem 수보다 더 많은지 체크 - 만약 적다면 멤버 적은 코호트를 먼저 빼야함 = 인원 수 적은 코호트를 먼저 빼서 sortedArray의 elem 수를 팀 수로 맞추기
const roleCount = currentRoleSpace.roleSlots.length
const cohortCount = regularMemberArrays.length
if (cohortCount > roleCount) {
	const difference = currentRoleSpace.roleSlots.length - regularMemberArrays.length
	restMembers.push(...R.take(difference, regularMemberArrays).flat(flatDepthForMembers))
	regularMemberArrays = R.drop(difference, regularMemberArrays)
}
const counts = regularMemberArrays.map((array) => array.length)
const totalCount = counts.reduce((accumulator, current) => accumulator + current, 0)
const rawRations = regularMemberArrays.map((array) => array.length / totalCount)
let remainingCount = roleCount
const roleCountPerCohort = []
for (const [i] of regularMemberArrays.entries()) {
	// first cohort
	if (i === 0) {
		const currentRatio = rawRations[i]
		const currentRoleCount = Math.max(1, Math.floor(currentRatio * roleCount))
		roleCountPerCohort[i] = currentRoleCount
		remainingCount -= currentRoleCount
		continue
	}
	// last cohort
	if (i === cohortCount - 1) {
		roleCountPerCohort[i] = remainingCount
		continue
	}
	if (cohortCount - i === remainingCount) {
		roleCountPerCohort[i] = 1
		remainingCount -= 1
	} else {
		const currentRatio = rawRations[i]
		const currentRoleCount = Math.max(1, Math.floor(currentRatio * roleCount))
		roleCountPerCohort[i] = currentRoleCount
		remainingCount -= currentRoleCount
	}
}
const chunksForCohort = []
for (const [i, roleCount] of roleCountPerCohort.entries()) {
	const currentMembers = regularMemberArrays[i]
	if (i === 0) {
		chunksForCohort[i] = currentChunk.slice(0, roleCount, currentMembers)
		continue
	}
	const previousRoleCount = roleCountPerCohort[i - 1]
	chunksForCohort[i] = currentChunk.slice(
		previousRoleCount,
		previousRoleCount + roleCount,
		currentMembers,
	)
}
const [regularChunks, droppedChunks] = R.pipe(
	R.map((chunk) => chunk.drop()),
	R.transpose,
)(chunksForCohort)
// todo: @types/ramda 없애는 법 찾기 - 웬 AppData/Local/Microsoft/TypeScript/5.4/package.json 이런 폴더 있는데 어떻게 지움?
const restMemberChunk = R.reduce(
	(accumulator, chunk) => chunk.concat(accumulator),
	null,
	droppedChunks,
).setMembers(restMembers)
// const roleSlotsPerCohort = []
// for (const [i, array] of regularMemberArrays.entries()) {
// 	const currentRoleCount = roleCountPerCohort[i]
// 	if (i === 0) {
// 		roleSlotsPerCohort[i] = currentRoleSpace.slice(0, currentRoleCount)
// 		continue
// 	}
// 	const previousRoleCount = roleCountPerCohort[i - 1]
// 	roleSlotsPerCohort[i] = currentRoleSpace.slice(previousRoleCount, previousRoleCount + currentRoleCount)
// }
// todo drop drop concat Chunk 그다음 restMembers로 다시 만들기
// todo 이제 구해야 할 건, memberArray 당 roleSpace의 slot들의 숫자를 얼마나 가져가야 하나
// todo 여기서 결국 구해야 할 건 각 members에 대한 roleSpace들
// todo 나중에 나눠진 것들 다 합쳐서 다시 Teams로 만드는 함수는 모든 과정이 진행 된 후 따로 호출하게 하기
</file>

<file path="apps/Swift_Linker/src/team_matching/monads.js">
import { inspect } from 'node:util'
import { create, unsafe } from '@library/helpers/mutative'
import { shuffleArray } from '@library/helpers/random_engine'
import { nanoid } from 'nanoid'
import * as R from 'ramda'
import { areAllDisjoint, areDisjoint } from '../utilities/functions/utilities.js'
export { AllMembers, Cohort, Member, Role, Team, Teams }
// ----------------------------------------------------------------------------------------
/** @typedef {string} Id */
// ----------------------------------------------------------------------------------------
class Member {
	/**
	 * @param {Id} id
	 * @param {Object} properties
	 */
	constructor(id = nanoid(), properties = {}) {
		this.id = id
		this.properties = properties
		this.type = 'Member'
	}
	/**
	 * @param {Id} id
	 * @param {Object} properties
	 */
	static of(id, properties) {
		return new Member(id, properties)
	}
}
class AllMembers {
	/** @param {Member[]} members */
	constructor(members) {
		this.members = members
		this.type = 'AllMembers'
	}
	static empty() {
		return new AllMembers([])
	}
	/** @param {Member[]} members */
	static of(members) {
		return new AllMembers(members)
	}
	/**
	 * @param {Member} member
	 * @returns {AllMembers}
	 */
	add(member) {
		return new AllMembers(
			create(this.members, (draft) => {
				draft.push(member)
			}),
		)
	}
	/**
	 * @param {Member[]} members
	 * @returns {AllMembers}
	 */
	addMembers(members) {
		return new AllMembers(
			create(this.members, (draft) => {
				draft.push(...members)
			}),
		)
	}
	/**
	 * @param {AllMembers} other
	 * @returns {AllMembers}
	 */
	concat(other) {
		return new AllMembers(
			create(this.members, (draft) => {
				draft.push(...other.members)
			}),
		)
	}
	/**
	 * @param {(val: Member) => Boolean} filterF
	 * @returns {Cohort}
	 */
	getCohort(filterF) {
		return new Cohort(this.members.filter(filterF))
	}
	/**
	 * @param {Member[]} members
	 * @returns {Member[]}
	 */
	getRemainingMembers(members) {
		return this.members.filter((member) => !members.includes(member))
	}
	/**
	 * @param {Member} member
	 * @returns {boolean}
	 */
	hasMember(member) {
		return this.members.includes(member)
	}
	/** @returns {AllMembers} */
	shuffle() {
		return new AllMembers(
			create(this.members, (draft) => {
				unsafe(() => {
					shuffleArray(draft)
				})
			}),
		)
	}
}
/**
 * 중첩된 Cohort join 가능
 *
 * @template memberOrCohortArray
 * @class Cohort
 */
class Cohort {
	get array() {
		return this.memberOrCohortArray
	}
	/** @returns {Member[]} */
	get joinedArray() {
		if (!Array.isArray(this.memberOrCohortArray)) {
			throw new TypeError('Cohort must be an array')
		}
		return R.uniq(
			this.memberOrCohortArray.flatMap((memberOrCohort) => {
				if (memberOrCohort instanceof Cohort) {
					if (memberOrCohort === this) {
						return []
					}
					return memberOrCohort.joinedArray
				}
				return memberOrCohort
			}),
		)
	}
	// fix 타입을 다 Member | Cohort로 바꿔
	get numberOfMembers() {
		return this.joinedArray.length
	}
	/** @param {(Member | Cohort)[]} memberOrCohortArray */
	constructor(memberOrCohortArray) {
		this.memberOrCohortArray = R.uniq(memberOrCohortArray)
		this.type = 'Cohort'
	}
	static empty() {
		return new Cohort([])
	}
	/**
	 * @param {(Member | Cohort)[]} memberOrCohortArray
	 * @returns {Cohort}
	 */
	static of(memberOrCohortArray) {
		return new Cohort(memberOrCohortArray)
	}
	/**
	 * @param {Member | Cohort} memberOrCohort
	 * @returns {Cohort}
	 */
	add(memberOrCohort) {
		return new Cohort(
			create(this.memberOrCohortArray, (draft) => {
				draft.push(memberOrCohort)
			}),
		)
	}
	/**
	 * @param {(Member | Cohort)[]} memberOrCohortArray
	 * @returns {Cohort}
	 */
	addMemberOrCohortArray(memberOrCohortArray) {
		return new Cohort(
			create(this.memberOrCohortArray, (draft) => {
				draft.push(...memberOrCohortArray)
			}),
		)
	}
	[inspect.custom]() {
		return `Cohort(${inspect(this.memberOrCohortArray)})`
	}
	/** @returns {Cohort<Member[]>} */
	join() {
		return new Cohort(this.joinedArray)
	}
}
// todo 중복 안되는 role 끼리 중복인지 검사
class Role {
	/** @returns {number} */
	get remainingSlot() {
		return this.slot - this.members.length
	}
	/**
	 * @param {Member[]} members
	 * @param {number} slot
	 * @param {string | null} name
	 * @param {string | null} id
	 */
	constructor(members, slot, name = null, id = nanoid()) {
		if (typeof slot !== 'number' || slot <= 0) {
			throw new Error('The number of slots must be a positive number')
		}
		if (slot < members.length) {
			throw new Error('The number of members must be less than or equal to the slots')
		}
		this.name = name
		this.slot = slot
		this.members = R.uniq(members)
		this.id = id
		this.type = 'Role'
	}
	/**
	 * @param {string | null} name
	 * @param {number} slot
	 * @returns {Role}
	 */
	static empty(slot, name = null) {
		if (typeof slot !== 'number' || slot <= 0) {
			throw new Error('Slot fixed must be a positive number')
		}
		return new Role([], slot, name)
	}
	/**
	 * @param {string | null} name
	 * @param {Member[]} members
	 * @param {number} slot
	 * @returns {Role}
	 */
	static of(members, slot, name = null, id = nanoid()) {
		return new Role(members, slot, name, id)
	}
	/**
	 * @param {Member} member
	 * @returns {Role}
	 */
	add(member) {
		return new Role(
			create(this.members, (draft) => {
				draft.push(member)
			}),
			this.slot,
			this.name,
			this.id,
		)
	}
	/**
	 * @param {Member[]} otherMembers
	 * @returns {Role}
	 */
	addMembers(otherMembers) {
		return new Role(
			create(this.members, (draft) => {
				draft.push(...otherMembers)
			}),
			this.slot,
			this.name,
			this.id,
		)
	}
	/**
	 * @param {Role} otherRole
	 * @returns {Role}
	 */
	concat(otherRole) {
		if (this.slot !== otherRole.slot) {
			throw new Error('The number of slots must be the same')
		}
		return new Role(
			create(this.members, (draft) => {
				draft.push(...otherRole.members)
			}),
			this.slot,
			this.name,
			this.id,
		)
	}
	/**
	 * @param {Member} member
	 * @returns {boolean}
	 */
	hasMember(member) {
		return this.members.includes(member)
	}
	/** @returns {boolean} */
	hasRoom() {
		return this.slot > this.members.length
	}
	[inspect.custom]() {
		return `Role(${inspect(this.name)}, ${inspect(this.members)}, ${inspect(this.slot)}, ${inspect(this.id)})`
	}
	/**
	 * @param {(value: Member, index: number, array: Member[]) => Member} f
	 * @returns {Role}
	 */
	map(f) {
		return new Role(this.members.map(f), this.slot, this.name, this.id)
	}
}
class Team {
	/** @returns {Member[]} */
	get members() {
		return this.roleArray.flatMap((role) => role.members)
	}
	/** @returns {number} */
	get remainingSlot() {
		return this.roleArray.map((role) => role.remainingSlot).reduce((a, b) => a + b, 0)
	}
	/**
	 * @param {Role[]} roleArray
	 * @param {string | null} id
	 */
	constructor(roleArray, id = nanoid()) {
		if (!areDisjoint(roleArray.map((role) => role.name))) {
			throw new Error('Roles must have unique names')
		}
		this.roleArray = roleArray
		this.id = id
		this.type = 'Team'
	}
	static empty() {
		return new Team([])
	}
	/** @param {number} slot */
	static getDefaultTeam(slot) {
		// todo role의 slot 수는 어떻게 설정됨?
		return new Team([Role.of([], slot)])
	}
	/**
	 * @param {Role[]} roleArray
	 * @param {string | null} id
	 */
	static of(roleArray, id = nanoid()) {
		return new Team(roleArray, id)
	}
	/** @param {Role} role */
	add(role) {
		return new Team(
			create(this.roleArray, (draft) => {
				draft.push(role)
			}),
			this.id,
		)
	}
	/** @param {Team} otherTeam */
	concat(otherTeam) {
		return new Team(
			create(this.roleArray, (draft) => {
				draft.push(...otherTeam.roleArray)
			}),
			this.id,
		)
	}
	/** @param {Id} id */
	getRoleById(id) {
		return this.roleArray.find((/** @type {{ id: Id }} */ role) => role.id === id)
	}
	/**
	 * @param {Member} member
	 * @returns {boolean}
	 */
	hasMember(member) {
		return this.roleArray.some((role) => role.hasMember(member))
	}
	/** @returns {boolean} */
	hasRoom() {
		return this.roleArray.some((/** @type {{ hasRoom(): boolean }} */ role) => role.hasRoom())
	}
	[inspect.custom]() {
		return `Team(${inspect(this.roleArray)}, ${inspect(this.id)})`
	}
}
class Teams {
	/** @returns {Member[]} */
	get members() {
		return this.teamArray.flatMap((team) => team.members)
	}
	/** @returns {number} */
	get remainingSlot() {
		return this.teamArray.map((team) => team.remainingSlot).reduce((a, b) => a + b, 0)
	}
	/** @param {Team[]} teamArray */
	constructor(teamArray, id = nanoid()) {
		if (!Array.isArray(teamArray)) {
			throw new TypeError('Teams must be an array')
		}
		if (!areAllDisjoint(teamArray.map((team) => team.roleArray))) {
			throw new Error('Roles must be disjoint')
		}
		this.teamArray = teamArray
		this.id = id
		this.type = 'Teams'
	}
	/** @returns {Teams} */
	static empty() {
		return new Teams([])
	}
	/** @param {Team[]} teamArray */
	static of(teamArray) {
		return new Teams(teamArray)
	}
	/**
	 * @param {Teams} otherTeams
	 * @returns {Teams}
	 */
	concat(otherTeams) {
		return new Teams(
			create(this.teamArray, (draft) => {
				draft.push(...otherTeams.teamArray)
			}),
		)
	}
	/**
	 * @param {Member} member
	 * @returns {boolean}
	 */
	hasMember(member) {
		return this.teamArray.some((team) => team.hasMember(member))
	}
	includes(member) {
		return this.teamArray.some((team) => team.hasMember(member))
	}
	[inspect.custom]() {
		return `Teams(${inspect(this.teamArray)}, ${inspect(this.id)})`
	}
	/**
	 * @param {(value: Team, index: number, array: Team[]) => Team} f
	 * @returns {Teams}
	 */
	map(f) {
		return new Teams(this.teamArray.map(f))
	}
	/** @type {(memberArray: Member[]) => Member[]} */
	removeDuplicateByThis(memberArray) {
		if (!memberArray) {
			return []
		}
		return R.difference(memberArray, this.members)
	}
}
</file>

<file path="apps/Swift_Linker/src/team_matching/monads.test.js">
import { inspect } from 'node:util'
import { fc, it } from '@fast-check/vitest'
import { describe, expect } from 'vitest'
import { AllMembers, Cohort, Member, Role, Team, Teams } from './monads.js'
describe('AllMembers', () => {
	// Creating an empty AllMembers instance using the static empty method
	it('빈 인스턴스 생성', () => {
		const emptyAllMembers = AllMembers.empty()
		expect(emptyAllMembers.members).toEqual([])
		expect(emptyAllMembers.type).toBe('AllMembers')
	})
	// Creating an AllMembers instance with a predefined array of members using the static of method
	it('미리 정의된 멤버 배열로 인스턴스 생성', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		expect(allMembers.members).toEqual(members)
		expect(allMembers.type).toBe('AllMembers')
	})
	// Adding a single member to an AllMembers instance using the add method
	it('단일 멤버 추가', () => {
		const members = [Member.of('1', { name: 'Alice' })]
		const allMembers = AllMembers.of(members)
		const newMember = Member.of('2', { name: 'Bob' })
		const updatedAllMembers = allMembers.add(newMember)
		expect(updatedAllMembers.members).toContain(newMember)
	})
	// Adding multiple members to an AllMembers instance using the addMembers method
	it('다수 멤버 추가', () => {
		const members = [Member.of('1', { name: 'Alice' })]
		const allMembers = AllMembers.of(members)
		const newMembers = [Member.of('2', { name: 'Bob' }), Member.of('3', { name: 'Charlie' })]
		const updatedAllMembers = allMembers.addMembers(newMembers)
		expect(updatedAllMembers.members).toEqual(expect.arrayContaining(newMembers))
	})
	// Concatenating two AllMembers instances using the concat method
	it('두 인스턴스 병합', () => {
		const members1 = [Member.of('1', { name: 'Alice' })]
		const members2 = [Member.of('2', { name: 'Bob' })]
		const allMembers1 = AllMembers.of(members1)
		const allMembers2 = AllMembers.of(members2)
		const concatenatedAllMembers = allMembers1.concat(allMembers2)
		expect(concatenatedAllMembers.members).toEqual(
			expect.arrayContaining([...members1, ...members2]),
		)
	})
	// Filtering members to create a Cohort using the getCohort method
	it('필터링으로 코호트 생성', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		const cohort = allMembers.getCohort((member) => member.properties.name === 'Alice')
		expect(cohort.array).toEqual([members[0]])
	})
	// Checking if a member exists in the AllMembers instance using the hasMember method
	it('멤버 존재 확인', () => {
		const members = [Member.of('1', { name: 'Alice' })]
		const allMembers = AllMembers.of(members)
		expect(allMembers.hasMember(members[0])).toBe(true)
	})
	// Shuffling the members in an AllMembers instance using the shuffle method
	it('멤버 셔플링', () => {
		const members = [
			Member.of('1', { name: 'Alice' }),
			Member.of('2', { name: 'Bob' }),
			Member.of('3', { name: 'Charlie' }),
		]
		const allMembers = AllMembers.of(members)
		const shuffledAllMembers = allMembers.shuffle()
		expect(shuffledAllMembers.members).toHaveLength(3)
		expect(shuffledAllMembers.members).toEqual(expect.arrayContaining(members))
	})
	// Getting remaining members not in any team using the getRemainingMembers method
	it('남은 멤버 가져오기', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		const teams = Teams.empty()
		const remainingMembers = allMembers.getRemainingMembers(teams)
		expect(remainingMembers).toEqual(members)
	})
	// Adding a member that already exists in the AllMembers instance
	it('중복 멤버 추가', () => {
		const member = Member.of('1', { name: 'Alice' })
		const allMembers = AllMembers.of([member])
		const updatedAllMembers = allMembers.add(member)
		expect(updatedAllMembers.members).toHaveLength(2)
		expect(updatedAllMembers.members).toEqual([member, member])
	})
	// Concatenating an AllMembers instance with itself
	it('자기 자신과 병합', () => {
		const members = [Member.of('1', { name: 'Alice' })]
		const allMembers = AllMembers.of(members)
		const concatenatedAllMembers = allMembers.concat(allMembers)
		expect(concatenatedAllMembers.members).toHaveLength(2)
		expect(concatenatedAllMembers.members).toEqual([...members, ...members])
	})
	// Filtering members with a function that returns false for all members
	it('모든 멤버 필터링 실패', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		const cohort = allMembers.getCohort(() => false)
		expect(cohort.array).toEqual([])
	})
	// Shuffling an empty AllMembers instance
	it('빈 인스턴스 셔플링', () => {
		const emptyAllMembers = AllMembers.empty()
		const shuffledEmptyAllMembers = emptyAllMembers.shuffle()
		expect(shuffledEmptyAllMembers.members).toEqual([])
	})
	// Creating an AllMembers instance with an empty array
	it('빈 배열로 인스턴스 생성', () => {
		const emptyArrayAllMembers = AllMembers.of([])
		expect(emptyArrayAllMembers.members).toEqual([])
		expect(emptyArrayAllMembers.type).toBe('AllMembers')
	})
	// Checking if a non-existent member is in the AllMembers instance
	it('존재하지 않는 멤버 확인', () => {
		const members = [Member.of('1', { name: 'Alice' })] /* ?. $ */
		const allMembers = AllMembers.of(members)
		const nonExistentMember = Member.of('2', { name: 'Bob' })
		expect(allMembers.hasMember(nonExistentMember)).toBe(false)
	})
	// Getting remaining members when all members are already in teams
	it('모든 멤버가 이미 팀에 속해 있을 때 남은 멤버 가져오기', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		const allMembers = AllMembers.of([member1, member2])
		const teams = new Teams([
			new Team([new Role([member1], 1)]),
			new Team([new Role([member2], 1)]),
		])
		const remainingMembers = allMembers.getRemainingMembers(teams)
		expect(remainingMembers).toEqual([])
	})
	// 멤버 추가 또는 연결 시 불변성 보장
	it('멤버 추가 시 불변성 확인', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		const allMembers = AllMembers.of([member1])
		const updatedAllMembers = allMembers.add(member2)
		expect(allMembers.members).toEqual([member1])
		expect(updatedAllMembers.members).toEqual([member1, member2])
	})
	// AllMembers 인스턴스의 멤버들에 대한 유형 일관성 확인
	it('멤버 추가시 유형 일관성 확인', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		const newMember = Member.of('3', { name: 'Charlie' })
		const updatedAllMembers = allMembers.add(newMember)
		expect(updatedAllMembers.members).toEqual([...members, newMember])
	})
	// Handling large arrays of members efficiently
	it('멤버 추가시 모든 멤버 유지', () => {
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const allMembers = AllMembers.of(members)
		const newMember = Member.of('3', { name: 'Charlie' })
		const updatedAllMembers = allMembers.add(newMember)
		expect(updatedAllMembers.members).toHaveLength(3)
		expect(updatedAllMembers.members).toContainEqual(newMember)
		expect(updatedAllMembers.members).toContainEqual(members[0])
		expect(updatedAllMembers.members).toContainEqual(members[1])
	})
})
// Generated by CodiumAI
describe('Cohort', () => {
	// Creating a Cohort with an array of Members or Cohorts initializes correctly
	it('생성 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = new Cohort([member1, member2])
		expect(cohort.array).toEqual([member1, member2])
	})
	// Adding a Member or Cohort to an existing Cohort updates the Cohort correctly
	it('추가 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = new Cohort([member1])
		const updatedCohort = cohort.add(member2)
		expect(updatedCohort.array).toEqual([member1, member2])
	})
	// Retrieving the array from a Cohort returns the unique elements
	it('고유 요소 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = new Cohort([member1, member1, member2])
		expect(cohort.array).toEqual([member1, member2])
	})
	// Using the static method `of` creates a Cohort with the provided array
	it('of 메서드 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = Cohort.of([member1, member2])
		expect(cohort.array).toEqual([member1, member2])
	})
	// The `empty` method returns an empty Cohort
	it('empty 메서드 확인', () => {
		const cohort = Cohort.empty()
		expect(cohort.array).toEqual([])
	})
	// The `join` method returns a new Cohort with the joined array of Members
	it('join 메서드 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort1 = new Cohort([member1])
		const cohort2 = new Cohort([member2])
		const joinedCohort = cohort1.add(cohort2).join()
		expect(joinedCohort.array).toEqual([member1, member2])
	})
	// The `numberOfMembers` getter returns the correct count of unique Members
	it('멤버 수 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = new Cohort([member1, member2, member1])
		expect(cohort.numberOfMembers).toBe(2)
	})
	// Creating a Cohort with an empty array initializes correctly
	it('빈 배열 초기화 확인', () => {
		const cohort = new Cohort([])
		expect(cohort.array).toEqual([])
	})
	// Adding a duplicate Member or Cohort does not create duplicates in the Cohort
	it('중복 추가 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const cohort = new Cohort([member1])
		const updatedCohort = cohort.add(member1)
		expect(updatedCohort.array).toEqual([member1])
	})
	// Adding an array of Members or Cohorts that includes duplicates does not create duplicates
	it('중복 배열 추가 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort = new Cohort([member1])
		const updatedCohort = cohort.addMemberOrCohortArray([member1, member2])
		expect(updatedCohort.array).toEqual([member1, member2])
	})
	// The `join` method handles nested Cohorts correctly
	it('중첩 코호트 처리 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort1 = new Cohort([member1])
		const cohort2 = new Cohort([cohort1, member2])
		const joinedCohort = cohort2.join()
		expect(joinedCohort.array).toEqual([member1, member2])
	})
	// The `joinedArray` getter throws a TypeError if `memberOrCohortArray` is not an array
	it('타입 에러 확인', () => {
		class InvalidCohort extends Cohort {
			constructor() {
				super([])
				this.memberOrCohortArray = null
			}
		}
		const invalidCohort = new InvalidCohort()
		expect(() => invalidCohort.joinedArray).toThrow(TypeError)
	})
	// The `joinedArray` getter handles self-referencing Cohorts without infinite recursion
	it('자기 참조 처리 확인', () => {
		const cohort = new Cohort([])
		cohort.memberOrCohortArray.push(cohort)
		expect(cohort.joinedArray).toEqual([])
	})
	// The `add` method maintains immutability of the original Cohort
	it('add 메서드 불변성 유지 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const cohort = new Cohort([member1])
		const updatedCohort = cohort.add(Member.of('2', { name: 'Bob' }))
		expect(cohort.array).toEqual([member1])
		expect(updatedCohort.array).not.toEqual(cohort.array)
	})
	// The `addMemberOrCohortArray` method maintains immutability of the original Cohort
	it('addMemberOrCohortArray 메서드 불변성 유지 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const cohort = new Cohort([member1])
		const updatedCohort = cohort.addMemberOrCohortArray([Member.of('2', { name: 'Bob' })])
		expect(cohort.array).toEqual([member1])
		expect(updatedCohort.array).not.toEqual(cohort.array)
	})
	// The `join` method maintains immutability of the original Cohort
	it('join 메서드 불변성 유지 확인', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const cohort = new Cohort([member1])
		const joinedCohort = cohort.join()
		expect(cohort.array).toEqual([member1])
		expect(joinedCohort.array).not.toBe(cohort.array)
	})
	// The `numberOfMembers` getter handles nested Cohorts correctly
	it('numberOfMembers getter가 중첩된 Cohort를 올바르게 처리함', () => {
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const cohort1 = new Cohort([member1, member2])
		const cohort2 = new Cohort([cohort1, member2])
		expect(cohort2.numberOfMembers).toBe(2)
	})
})
// Generated by CodiumAI
describe('Role', () => {
	// Creating a Role with valid members and slots
	it('유효한 멤버와 슬롯으로 Role 생성', () => {
		const members = [new Member(), new Member()]
		const role = new Role(members, 3, 'Developer')
		expect(role.members).toEqual(members)
		expect(role.slot).toBe(3)
		expect(role.name).toBe('Developer')
	})
	// Adding a member to a Role with available slots
	it('사용 가능한 슬롯에 멤버 추가', () => {
		const role = new Role([], 2, 'Tester')
		const member = new Member()
		const updatedRole = role.add(member)
		expect(updatedRole.members).toContain(member)
		expect(updatedRole.slot).toBe(2)
	})
	// Concatenating two Roles with the same number of slots
	it('동일한 슬롯 수의 두 Role 병합', () => {
		const role1 = new Role([new Member()], 2, 'Designer')
		const role2 = new Role([new Member()], 2, 'Designer')
		const concatenatedRole = role1.concat(role2)
		expect(concatenatedRole.members.length).toBe(2)
		expect(concatenatedRole.slot).toBe(2)
	})
	// Checking if a Role has a specific member
	it('특정 멤버 포함 여부 확인', () => {
		const member = new Member()
		const role = new Role([member], 1, 'Manager')
		expect(role.hasMember(member)).toBe(true)
	})
	// Checking if a Role has room for more members
	it('추가 멤버를 위한 공간 확인', () => {
		const role = new Role([], 1, 'Analyst')
		expect(role.hasRoom()).toBe(true)
	})
	// Mapping a function over the members of a Role
	it('멤버에 함수 매핑', () => {
		const member1 = new Member()
		const member2 = new Member()
		const role = new Role([member1, member2], 2, 'Developer')
		const mappedRole = role.map((member) => ({
			...member,
			properties: { ...member.properties, active: true },
		}))
		expect(mappedRole.members.every((member) => member.properties.active)).toBe(true)
	})
	// Creating an empty Role with a valid slot number
	it('유효한 슬롯 수로 빈 Role 생성', () => {
		const role = Role.empty(3, 'Support')
		expect(role.members.length).toBe(0)
		expect(role.slot).toBe(3)
		expect(role.name).toBe('Support')
	})
	// Getting the remaining slots in a Role
	it('남은 슬롯 수 확인', () => {
		const role = new Role([new Member()], 3, 'Lead')
		expect(role.remainingSlot).toBe(2)
	})
	// Creating a Role with more members than slots
	it('슬롯보다 많은 멤버로 Role 생성 시 에러', () => {
		expect(() => new Role([new Member(), new Member()], 1, 'Admin')).toThrowError(
			'The number of members must be less than or equal to the slots',
		)
	})
	// Creating a Role with a negative or zero slot number
	it('음수 또는 0 슬롯 수로 Role 생성 시 에러', () => {
		expect(() => new Role([], -1, 'Admin')).toThrowError()
		expect(() => new Role([], 0, 'Admin')).toThrowError()
	})
	// Adding a member to a Role with no available slots
	it('사용 가능한 슬롯이 없는 경우 멤버 추가 시 에러', () => {
		const role = new Role([new Member()], 1, 'Admin')
		expect(() => role.add(new Member())).toThrowError()
	})
	// Concatenating two Roles with different slot numbers
	it('다른 슬롯 수의 두 Role 병합 시 에러', () => {
		const role1 = new Role([new Member()], 1, 'Admin')
		const role2 = new Role([new Member()], 2, 'Admin')
		expect(() => role1.concat(role2)).toThrowError('The number of slots must be the same')
	})
	// Creating a Role with duplicate members
	it('중복된 멤버로 Role 생성 시 중복 제거 확인', () => {
		const member = new Member()
		const role = new Role([member, member], 2, 'Admin')
		expect(role.members.length).toBe(1)
		expect(role.members[0]).toBe(member)
	})
	// Creating a Role with a non-number slot value
	it('숫자가 아닌 슬롯 값으로 Role 생성 시 에러', () => {
		expect(() => new Role([], 'two', 'Admin')).toThrowError()
		expect(() => new Role([], null, 'Admin')).toThrowError()
		expect(() => new Role([], undefined, 'Admin')).toThrowError()
	})
	// 멤버가 역할을 생성할 때 고유한지 확인
	it('멤버가 역할을 생성할 때 중복된 멤버가 없어야 함', () => {
		// given
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		// when
		const role = new Role([member1, member1, member2], 3, 'Role1')
		// then
		expect(role.members).to.have.lengthOf(2)
	})
	// Creating a Role with a null name
	it('Role의 이름이 null로 생성됨', () => {
		// given
		const members = [Member.of('1'), Member.of('2')]
		const slot = 2
		// when
		const role = Role.of(members, slot, null)
		// then
		expect(role.name).toBeNull()
	})
	// Handling large numbers of members and slots
	it('멤버와 슬롯의 수가 많을 때', () => {
		// given
		const members = [Member.of('1', { name: 'Alice' }), Member.of('2', { name: 'Bob' })]
		const role = Role.empty(2, 'Test Role')
		// when
		const newRole = role.addMembers(members)
		// then
		expect(newRole.members).toHaveLength(2)
		expect(newRole.slot).toBe(2)
	})
	// Adding multiple members at once to a Role
	it('멤버 여러 명 한 번에 추가', () => {
		// given
		const role = Role.empty(3, 'RoleA')
		const member1 = Member.of('1', { name: 'Alice' })
		const member2 = Member.of('2', { name: 'Bob' })
		const member3 = Member.of('3', { name: 'Charlie' })
		const newMembers = [member1, member2, member3]
		// when
		const updatedRole = role.addMembers(newMembers)
		// then
		expect(updatedRole.members).toEqual([member1, member2, member3])
	})
})
// Generated by CodiumAI
describe('Team', () => {
	// Creating a Team instance with unique role names
	it('고유한 역할 이름으로 팀 생성', () => {
		const role1 = Role.of([], 1, 'role1')
		const role2 = Role.of([], 1, 'role2')
		const team = new Team([role1, role2])
		expect(team.roleArray).toHaveLength(2)
	})
	// Adding a role to an existing Team
	it('기존 팀에 역할 추가', () => {
		const role1 = Role.of([], 1, 'role1')
		const team = new Team([role1])
		const role2 = Role.of([], 1, 'role2')
		const newTeam = team.add(role2)
		expect(newTeam.roleArray).toHaveLength(2)
	})
	// Concatenating two Teams
	it('두 팀 병합', () => {
		const role1 = Role.of([], 1, 'role1')
		const team1 = new Team([role1])
		const role2 = Role.of([], 1, 'role2')
		const team2 = new Team([role2])
		const newTeam = team1.concat(team2)
		expect(newTeam.roleArray).toHaveLength(2)
	})
	// Checking if a Team has a specific member
	it('특정 멤버 포함 여부 확인', () => {
		const member = Member.of('member1', {})
		const role = Role.of([member], 1, 'role1')
		const team = new Team([role])
		expect(team.hasMember(member)).toBe(true)
	})
	// Checking if a Team has room for more members
	it('추가 멤버 수용 가능 여부 확인', () => {
		const role = Role.of([], 1, 'role1')
		const team = new Team([role])
		expect(team.hasRoom()).toBe(true)
	})
	// Retrieving a role by its ID from a Team
	it('ID로 역할 검색', () => {
		const role = Role.of([], 1, 'role1')
		const team = new Team([role])
		expect(team.getRoleById(role.id)).toBe(role)
	})
	// Accessing the members of a Team
	it('팀 멤버 접근', () => {
		const member = Member.of('member1', {})
		const role = Role.of([member], 1, 'role1')
		const team = new Team([role])
		expect(team.members).toContain(member)
	})
	// Calculating the remaining slots in a Team
	it('남은 슬롯 계산', () => {
		const role = Role.of([], 2, 'role1')
		const team = new Team([role])
		expect(team.remainingSlot).toBe(2)
	})
	// Creating an empty Team
	it('빈 팀 생성', () => {
		const team = Team.empty()
		expect(team.roleArray).toHaveLength(0)
	})
	// Creating a default Team with a specified slot
	it('지정된 슬롯으로 기본 팀 생성', () => {
		const team = Team.getDefaultTeam(3)
		expect(team.roleArray[0].slot).toBe(3)
	})
	// Creating a Team with duplicate role names
	it('중복된 역할 이름으로 팀 생성 시 에러 발생', () => {
		const role1 = Role.of([], 1, 'role1')
		const role2 = Role.of([], 1, 'role1')
		expect(() => new Team([role1, role2])).toThrowError('Roles must have unique names')
	})
	// Adding a role to a Team that causes duplicate role names
	it('중복된 역할 이름 추가 시 에러 발생', () => {
		const role1 = Role.of([], 1, 'role1')
		const team = new Team([role1])
		const role2 = Role.of([], 1, 'role1')
		expect(() => team.add(role2)).toThrowError('Roles must have unique names')
	})
	// Concatenating two Teams with overlapping role names
	it('중복된 역할 이름을 가진 두 팀 병합 시 에러 발생', () => {
		const role1 = Role.of([], 1, 'role1')
		const team1 = new Team([role1])
		const role2 = Role.of([], 1, 'role1')
		const team2 = new Team([role2])
		expect(() => team1.concat(team2)).toThrowError('Roles must have unique names')
	})
	// Checking if a Team has a member when the Team is empty
	it('빈 팀에서 멤버 포함 여부 확인 시 false 반환', () => {
		const member = Member.of('member1', {})
		const team = Team.empty()
		expect(team.hasMember(member)).toBe(false)
	})
	// Retrieving a role by an ID that does not exist in the Team
	it('존재하지 않는 ID로 역할 검색 시 undefined 반환', () => {
		const role = Role.of([], 1, 'role1')
		const team = new Team([role])
		expect(team.getRoleById('nonexistent')).toBeUndefined()
	})
	// Calculating remaining slots when all roles are full
	it('모든 역할이 꽉 찬 경우 남은 슬롯 계산 시 zero 반환', () => {
		const member = Member.of('member1', {})
		const role = Role.of([member], 1, 'role1')
		const team = new Team([role])
		expect(team.remainingSlot).toBe(0)
	})
	// Creating a Team with an invalid role array
	it('유효하지 않은 역할 배열로 생성되면 에러를 던져야 함', () => {
		// given
		const invalidRoleArray = [new Role([], 1, 'role1'), new Role([], 2, 'role1')]
		// when, then
		expect(() => new Team(invalidRoleArray)).toThrowError('Roles must have unique names')
	})
	// Handling empty role arrays in Team methods
	it('빈 역할 배열을 처리함', () => {
		// given
		const team = new Team([])
		// when
		const hasRoom = team.hasRoom()
		const { members } = team
		const { remainingSlot } = team
		// then
		expect(hasRoom).toBe(false)
		expect(members).toEqual([])
		expect(remainingSlot).toBe(0)
	})
})
// Generated by CodiumAI
describe('Teams', () => {
	// Creating a Teams instance with a valid array of Team objects
	it('유효한 팀 배열로 생성', () => {
		const team1 = Team.empty()
		const team2 = Team.empty()
		const teams = new Teams([team1, team2])
		expect(teams.teamArray).toEqual([team1, team2])
	})
	// Using the static method empty to create an empty Teams instance
	it('빈 팀 인스턴스 생성', () => {
		const teams = Teams.empty()
		expect(teams.teamArray).toEqual([])
	})
	// Concatenating two Teams instances using the concat method
	it('두 팀 인스턴스 병합', () => {
		const team1 = Team.empty()
		const team2 = Team.empty()
		const teams1 = new Teams([team1])
		const teams2 = new Teams([team2])
		const concatenatedTeams = teams1.concat(teams2)
		expect(concatenatedTeams.teamArray).toEqual([team1, team2])
	})
	// Checking if a member belongs to any team in the Teams instance using hasMember
	it('멤버 포함 여부 확인', () => {
		const member = Member.of('1', {})
		const role = Role.of([member], 1)
		const team = Team.of([role])
		const teams = new Teams([team])
		expect(teams.hasMember(member)).toBe(true)
	})
	// Mapping over the teamArray with a provided function using the map method
	it('팀 배열 매핑', () => {
		const team1 = Team.empty()
		const team2 = Team.empty()
		const teams = new Teams([team1, team2])
		const mappedTeams = teams.map((team) => team)
		expect(mappedTeams.teamArray).toEqual([team1, team2])
	})
	// Removing duplicate members from an array using removeDuplicateByThis
	it('중복 멤버 제거', () => {
		const member1 = Member.of('1', {})
		const member2 = Member.of('2', {})
		const role = Role.of([member1], 1)
		const team = Team.of([role])
		const teams = new Teams([team])
		const result = teams.removeDuplicateByThis([member1, member2])
		expect(result).toEqual([member2])
	})
	// Accessing the members property to get all members in the Teams instance
	it('모든 멤버 접근', () => {
		const member = Member.of('1', {})
		const role = Role.of([member], 1)
		const team = Team.of([role])
		const teams = new Teams([team])
		expect(teams.members).toEqual([member])
	})
	// Accessing the remainingSlot property to get the total remaining slots in the Teams instance
	it('남은 슬롯 수 확인', () => {
		const role = Role.of([], 3)
		const team = Team.of([role])
		const teams = new Teams([team])
		expect(teams.remainingSlot).toBe(3)
	})
	// Creating a Teams instance with a non-array argument
	it('비배열 인수로 생성 시 에러 발생', () => {
		expect(() => new Teams('not an array')).toThrow(TypeError)
	})
	// Creating a Teams instance with non-disjoint teams
	it('중복된 역할 있을시 에러 발생', () => {
		const role = Role.of([], 1, 'role')
		const team1 = Team.of([role])
		const team2 = Team.of([role])
		expect(() => new Teams([team1, team2])).toThrow(Error)
	})
	// Concatenating a Teams instance with an empty Teams instance
	it('빈 팀 인스턴스와 병합', () => {
		const team1 = Team.empty()
		const teams1 = new Teams([team1])
		const emptyTeams = Teams.empty()
		const concatenatedTeams = teams1.concat(emptyTeams)
		expect(concatenatedTeams.teamArray).toEqual([team1])
	})
	// Checking if a member belongs to an empty Teams instance
	it('빈 팀 인스턴스에서 멤버 확인', () => {
		const member = Member.of('1', {})
		const emptyTeams = Teams.empty()
		expect(emptyTeams.hasMember(member)).toBe(false)
	})
	// Mapping over an empty teamArray
	it('빈 팀 배열 매핑', () => {
		const emptyTeams = Teams.empty()
		const mappedTeams = emptyTeams.map((team) => team)
		expect(mappedTeams.teamArray).toEqual([])
	})
	// Removing duplicates from an empty member array using removeDuplicateByThis
	it('빈 멤버 배열에서 중복 제거', () => {
		const emptyTeams = Teams.empty()
		expect(emptyTeams.removeDuplicateByThis([])).toEqual([])
	})
	// Handling null or undefined memberArray in removeDuplicateByThis
	it('null 또는 undefined 멤버 배열 처리', () => {
		const emptyTeams = Teams.empty()
		expect(emptyTeams.removeDuplicateByThis(null)).toEqual([])
		expect(emptyTeams.removeDuplicateByThis()).toEqual([])
	})
	// Inspecting a Teams instance using inspect.custom
	it('inspect.custom 사용하여 인스턴스 검사', () => {
		const team1 = Team.empty()
		const teams = new Teams([team1])
		expect(inspect(teams)).toBe(`Teams(${inspect([team1])}, ${inspect(teams.id)})`)
	})
	// Ensuring immutability when removing duplicates using removeDuplicateByThis
	it('중복 제거 시 불변성 보장', () => {
		// given
		const member1 = Member.of()
		const member2 = Member.of()
		const member3 = Member.of()
		const member4 = Member.of()
		const member5 = Member.of()
		const member6 = Member.of()
		const member7 = Member.of()
		const teams = new Teams([
			new Team([Role.of([member1, member2], 2, 'role1'), Role.of([member3], 2, 'role2')]),
			new Team([Role.of([member4, member5], 2, 'role3'), Role.of([member6], 2, 'role4')]),
		])
		const memberArray = [member1, member2, member3, member4, member5, member6, member7]
		// when
		const result = teams.removeDuplicateByThis(memberArray)
		// then
		expect(result).toEqual([member7])
	})
	// 팀을 매핑할 때 map 메서드를 사용하여 불변성 보장
	it('팀 매핑 시 불변성 보장', () => {
		// given
		const team1 = new Team([Role.of([], 1, 'role1')])
		const team2 = new Team([Role.of([], 2, 'role2')])
		const teams = new Teams([team1, team2])
		// when
		const mappedTeams = teams.map((team) => team.add(Role.of([], 3, 'role3')))
		// then
		expect(mappedTeams).not.to.equal(teams)
		expect(mappedTeams.teamArray).not.to.equal(teams.teamArray)
		expect(mappedTeams.teamArray[0]).not.to.equal(teams.teamArray[0])
		expect(mappedTeams.teamArray[1]).not.to.equal(teams.teamArray[1])
	})
	// 'Teams 인스턴스의 type 속성을 확인'
	it('type 속성이 "Teams"인지 확인', () => {
		// given
		const teamArray = [new Team([])]
		// when
		const teams = new Teams(teamArray)
		// then
		expect(teams.type).toBe('Teams')
	})
})
</file>

<file path="apps/Swift_Linker/src/utilities/functions/utilities.js">
import * as R from 'ramda'
/**
 * 두 배열 간에 공통된 요소가 있는지 확인하는 함수
 *
 * @function hasCommonElements
 * @param {Array} list1
 * @param {Array} list2
 * @returns {boolean} - 공통된 요소가 있으면 true, 없으면 false
 */
const hasCommonElements = (list1, list2) => !R.isEmpty(R.intersection(list1, list2))
// 한 배열 안에 중복되는 요소가 이미 있는지 확인
const areDisjoint = (array) => array.length === R.uniq(array).length
/**
 * 모든 배열들이 서로소인지 확인하는 함수
 *
 * @function areAllDisjoint
 * @param {Array[]} arrays 배열들의 배열
 * @returns {boolean} 모든 배열들이 서로소이면 true, 아니면 false
 */
const areAllDisjoint = (arrays) => {
	// 한 배열 안에 중복되는 요소가 이미 있는지 확인
	if (arrays.some((array) => !areDisjoint(array))) {
		return false
	}
	// 모든 배열 쌍에 대해 공통된 요소가 있는지 확인
	for (let i = 0; i < arrays.length; i++) {
		for (let index = i + 1; index < arrays.length; index++) {
			if (hasCommonElements(arrays[i], arrays[index])) {
				return false
			}
		}
	}
	return true
}
// Test
console.log(
	areAllDisjoint([
		[1, 2],
		[3, 4],
	]),
)
export { areAllDisjoint, areDisjoint }
</file>

<file path="apps/Swift_Linker/tsconfig.json">
{
	"_comments": [
		"exclude와 include는 extends 되지 않아서 따로 써줘야 함",
		"compilerOptions.paths 쓸 거면 packajs.json의 import 부분에도 작성하기"
	],
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**"
	],
	"extends": ["@library/base/tsconfig.json"],
	"include": ["**/*.ts", "**/*.js", "**/*.svelte", "tests/**/*", "src/**/*"]
}
</file>

<file path="deno.json">
{
	"imports": {
		"random-js": "https://esm.sh/random-js",
		"xstate": "https://esm.sh/xstate"
	}
}
</file>

<file path="desktop.ini">
[.ShellClassInfo]
IconResource=C:\Windows\System32\SHELL32.dll,96
[ViewState]
Mode=
Vid=
FolderType=Generic
</file>

<file path="eslint.config.js">
// import * as parser_mdx from 'eslint-mdx' <- parser 이거로 설정하면 오히려 eslint-plugin-mdx는 작동안함
// import security from 'eslint-plugin-security' <- @microsoft/eslint-plugin-sdl에서 중복 사용
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { includeIgnoreFile } from '@eslint/compat'
import { FlatCompat } from '@eslint/eslintrc'
import js from '@eslint/js'
import json from '@eslint/json'
import markdown from '@eslint/markdown'
import intlifySvelte from '@intlify/eslint-plugin-svelte'
import microsoftSdl from '@microsoft/eslint-plugin-sdl'
import * as parser_TS from '@typescript-eslint/parser'
import eslintConfigPrettier from 'eslint-config-prettier'
import problems from 'eslint-config-problems'
import turboConfig from 'eslint-config-turbo/flat'
import { defineFlatConfig } from 'eslint-define-config'
import { createTypeScriptImportResolver } from 'eslint-import-resolver-typescript'
import arrayFunc from 'eslint-plugin-array-func'
import compat from 'eslint-plugin-compat'
import { configs as depend_configs } from 'eslint-plugin-depend'
import { plugin as exceptionHandling } from 'eslint-plugin-exception-handling'
import functional from 'eslint-plugin-functional'
import github from 'eslint-plugin-github'
import importX from 'eslint-plugin-import-x'
import jsonSchema from 'eslint-plugin-json-schema-validator'
import jsonc from 'eslint-plugin-jsonc'
import lodash from 'eslint-plugin-lodash'
import * as mdx from 'eslint-plugin-mdx'
import noSecrets from 'eslint-plugin-no-secrets'
import nounsanitized from 'eslint-plugin-no-unsanitized'
import noUseExtendNative from 'eslint-plugin-no-use-extend-native'
import optimizeRegex from 'eslint-plugin-optimize-regex'
import perfectionist from 'eslint-plugin-perfectionist'
import playwright from 'eslint-plugin-playwright'
import promise from 'eslint-plugin-promise'
import redos from 'eslint-plugin-redos'
import { configs as regexp_configs } from 'eslint-plugin-regexp'
import simpleImportSort from 'eslint-plugin-simple-import-sort'
import { configs as sonarjs_configs } from 'eslint-plugin-sonarjs'
import sql from 'eslint-plugin-sql'
import storybook from 'eslint-plugin-storybook'
import svelte from 'eslint-plugin-svelte'
import toml from 'eslint-plugin-toml'
import unicorn from 'eslint-plugin-unicorn'
import xstate from 'eslint-plugin-xstate'
import yml from 'eslint-plugin-yml'
import globals from 'globals'
import parser_jsonc from 'jsonc-eslint-parser'
import * as parser_svelte from 'svelte-eslint-parser'
import parser_toml from 'toml-eslint-parser'
import parser_yaml from 'yaml-eslint-parser'
import svelteConfig from './libraries/base/svelte.config.js'
const baseRules = {
	'unicorn/no-useless-undefined': 'off',
	'unicorn/prefer-dom-node-dataset': 'off',
	'sonarjs/no-invariant-returns': 'warn',
	'sonarjs/cognitive-complexity': ['warn', 30],
	'promise/always-return': 'off',
	'unicorn/prefer-top-level-await': 'off',
	'unicorn/no-zero-fractions': 'off',
	'perfectionist/sort-exports': 'off',
	'no-shadow': 'warn',
	'unicorn/no-empty-file': 'off',
	'unicorn/no-array-reduce': 'off',
	'ex/no-unhandled': 'off',
	'sonarjs/no-unused-collection': 'off',
	'sonarjs/no-empty-test-file': 'off',
	'@typescript-eslint/no-explicit-any': 'off',
	'@typescript-eslint/no-unused-vars': 'off',
	'arrow-parens': 'off',
	camelcase: 'off',
	'capitalized-comments': 'off',
	'consistent-return': 'off',
	'depend/ban-dependencies': [
		'warn',
		{
			presets: ['native', 'preferred'],
		},
	],
	'eslint-comments/no-unlimited-disable': 'off',
	'eslint-comments/no-use': 'off',
	'functional/functional-parameters': 'warn',
	'functional/immutable-data': 'warn',
	'functional/no-expression-statements': ['off', { ignoreSelfReturning: true, ignoreVoid: true }],
	'functional/no-let': 'off',
	'functional/no-loop-statements': 'off',
	'functional/no-return-void': 'off',
	'functional/no-throw-statements': 'off',
	'github/filenames-match-regex': 'off',
	'i18n-text/no-en': 'off',
	'import-x/no-unresolved': 'off',
	'import/extensions': 'off',
	'import/no-namespace': 'off',
	'import/no-nodejs-modules': 'off',
	'import/no-unresolved': 'off',
	'lodash/prefer-constant': 'off',
	'lodash/prefer-get': 'off',
	'lodash/prefer-includes': 'off',
	'lodash/prefer-is-nil': 'off',
	'lodash/prefer-lodash-chain': 'off',
	'lodash/prefer-lodash-method': 'off',
	'lodash/prefer-lodash-typecheck': 'off',
	'lodash/prefer-matches': 'off',
	'lodash/prefer-noop': 'off',
	'lodash/prefer-over-quantifier': 'off',
	'lodash/prefer-some': 'off',
	'lodash/prefer-startswith': 'off',
	'lodash/prefer-times': 'off',
	'n/no-extraneous-import': 'off',
	'n/no-missing-import': 'off',
	'n/prefer-global/process': 'off',
	'no-console': 'off',
	'no-mixed-spaces-and-tabs': ['warn', 'smart-tabs'],
	'no-secrets/no-secrets': ['error', { tolerance: 4.3 }],
	'no-unused-expressions': 1,
	'no-unused-vars': 1,
	'no-warning-comments': 'off',
	'object-curly-spacing': 'off',
	'optimize-regex/optimize-regex': 'warn',
	'perfectionist/sort-imports': 'off',
	'perfectionist/sort-modules': 'off',
	'perfectionist/sort-objects': [
		'off',
		{
			order: 'asc',
			type: 'natural',
		},
	],
	'prefer-const': 'off',
	'prettier/prettier': [
		'off',
		{
			endOfLine: 'auto',
		},
	],
	semi: ['warn', 'never'],
	'semi-style': 'off',
	'simple-import-sort/exports': 'warn',
	'simple-import-sort/imports': 'warn',
	'sonarjs/no-commented-code': 'off',
	'sonarjs/no-small-switch': 'off',
	'sonarjs/no-unused-expressions': 'off',
	'sonarjs/sonar-no-unused-vars': 'off',
	'sonarjs/todo-tag': 'off',
	'sql/format': 'warn',
	'sql/no-unsafe-query': 'warn',
	'svelte/no-useless-mustaches': 'off',
	'svelte/valid-compile': [
		'error',
		{
			ignoreWarnings: true,
		},
	],
	'svelte/valid-style-parse': 'error',
	'svelte/derived-has-same-inputs-outputs': 'warn',
	'svelte/first-attribute-linebreak': 'off',
	'svelte/html-self-closing': [
		'warn',
		'default', // or "all" or "html" or "none"
	],
	'svelte/html-closing-bracket-spacing': 'warn',
	'svelte/html-quotes': [
		'warn',
		{
			prefer: 'double',
			dynamic: {
				quoted: false,
				avoidInvalidUnquotedInHTML: false,
			},
		},
	],
	'svelte/indent': 'off',
	'svelte/infinite-reactive-loop': 'error',
	'svelte/no-dupe-on-directives': 'warn',
	'svelte/prefer-destructured-store-props': 'warn',
	'svelte/no-dupe-use-directives': 'warn',
	'svelte/no-immutable-reactive-statements': 'warn',
	'svelte/no-reactive-functions': 'warn',
	'svelte/no-reactive-literals': 'warn',
	'svelte/no-reactive-reassign': 'warn',
	'svelte/no-spaces-around-equal-signs-in-attribute': 'warn',
	'svelte/no-store-async': 'warn',
	'svelte/no-target-blank': 'error',
	'svelte/sort-attributes': 'warn',
	'svelte/no-trailing-spaces': 'warn',
	'svelte/no-inner-declarations': 'warn',
	'svelte/shorthand-attribute': 'warn',
	'svelte/no-navigation-without-base': 'warn',
	'svelte/shorthand-directive': 'warn',
	'svelte/no-unused-class-name': [
		'off',
		{
			allowedClassNames: [],
		},
	],
	'svelte/prefer-style-directive': 'warn',
	'svelte/html-closing-bracket-new-line': 'warn',
	'svelte/prefer-class-directive': 'warn',
	'svelte/require-each-key': 'warn',
	'svelte/require-optimized-style-attribute': 'warn',
	'svelte/require-store-reactive-access': 'warn',
	'svelte/spaced-html-comment': 'warn',
	'svelte/valid-each-key': 'warn',
	'unicorn/filename-case': 'off',
	'unicorn/no-abusive-eslint-disable': 'off',
	'unicorn/no-array-callback-reference': 'off',
	'unicorn/prefer-spread': 'off',
	'unicorn/prevent-abbreviations': 'off',
	'unicorn/require-array-join-separator': 'off',
	indent: 'off',
}
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const flatCompat = new FlatCompat({
	allConfig: js.configs.all,
	baseDirectory: __dirname,
	recommendedConfig: js.configs.recommended,
})
const gitignorePath = path.join(__dirname, '.gitignore')
export default defineFlatConfig([
	includeIgnoreFile(gitignorePath),
	{
		ignores: ['!.storybook', '**/.svelte-kit/**', 'pnpm-lock.yaml', 'package-lock.json'],
	},
	js.configs.recommended,
	unicorn.configs.recommended,
	sonarjs_configs.recommended,
	depend_configs['flat/recommended'],
	importX.flatConfigs.recommended,
	importX.flatConfigs.typescript,
	...turboConfig,
	perfectionist.configs['recommended-natural'],
	noUseExtendNative.configs.recommended,
	promise.configs['flat/recommended'],
	functional.configs.externalVanillaRecommended,
	functional.configs.lite,
	functional.configs.stylistic,
	problems,
	...microsoftSdl.configs.recommended,
	regexp_configs['flat/recommended'],
	...storybook.configs['flat/recommended'],
	github.getFlatConfigs().browser,
	github.getFlatConfigs().recommended,
	nounsanitized.configs.recommended,
	arrayFunc.configs.recommended,
	compat.configs['flat/recommended'],
	...flatCompat.extends(
		'plugin:xstate/all',
		'plugin:lodash/recommended',
		'plugin:redos/recommended',
	),
	{
		settings: {
			browserslistOpts: {
				env: 'defaults',
			},
			'import-x/extensions': ['.js', '.jsx', '.ts', '.tsx', '.svelte', '.json'],
			'import-x/resolver-next': [
				createTypeScriptImportResolver({
					alwaysTryTypes: true,
					project: ['apps/*/tsconfig.json', 'libraries/*/tsconfig.json', 'storybook/tsconfig.json'],
				}),
			],
			svelte: {
				kit: {
					files: {
						routes: '**/src/routes',
					},
				},
			},
		},
		plugins: {
			ex: exceptionHandling,
			lodash,
			'no-secrets': noSecrets,
			'optimize-regex': optimizeRegex,
			redos,
			'simple-import-sort': simpleImportSort,
			sql,
			xstate,
		},
		rules: baseRules,
	},
	{
		files: ['**/*.js', '**/*.ts', '**/*.mjs', '**/*.cjs'],
		languageOptions: {
			ecmaVersion: 'latest',
			globals: {
				...globals.node,
				...globals.builtin,
				...globals.browser,
			},
			parser: parser_TS,
			parserOptions: {
				ecmaVersion: 'latest',
				extraFileExtensions: ['.svelte'],
				projectService: true,
				requireConfigFile: false,
				sourceType: 'module',
			},
			sourceType: 'module',
		},
	},
	...svelte.configs.recommended,
	...intlifySvelte.configs['flat/recommended'],
	{
		files: [
			'**/*.svelte',
			'*.svelte',
			'**/*.svelte.js',
			'*.svelte.js',
			'**/*.svelte.ts',
			'*.svelte.ts',
		],
		languageOptions: {
			parser: parser_svelte,
			parserOptions: {
				ecmaVersion: 'latest',
				extraFileExtensions: ['.svelte', '.svelte.js', '.svelte.ts'],
				parser: parser_TS,
				projectService: true,
				requireConfigFile: false,
				sourceType: 'module',
				svelteConfig,
				svelteFeatures: {
					experimentalRunes: true,
				},
			},
		},
		rules: {
			'sonarjs/no-unused-vars': 'off',
			'sonarjs/no-use-of-empty-return-value': 'off',
		},
	},
	{
		files: [
			'**/*.stories.svelte',
			'*.stories.svelte',
			'**/*.test.js',
			'**/e2e/**',
			'**/e2e/*.js',
			'*.test.js',
			'**/*.tests.js',
		],
		rules: {
			'unicorn/no-array-method-this-argument': 'off',
			'array-func/no-unnecessary-this-arg': 'off',
			'@intlify/svelte/no-raw-text': 'off',
			'functional/immutable-data': 'off',
			'redos/no-vulnerable': 'off',
			'sonarjs/pseudo-random': 'off',
			'sonarjs/slow-regex': 'off',
			'svelte/no-useless-children-snippet': 'off',
		},
	},
	{
		files: ['**/e2e/*.js'],
		...playwright.configs['flat/recommended'],
		rules: {
			...playwright.configs['flat/recommended'].rules,
			'no-shadow': 'off',
			'playwright/no-conditional-in-test': 'off',
			'playwright/no-conditional-expect': 'off'
		},
	},
	...jsonc.configs['flat/base'],
	...jsonc.configs['flat/recommended-with-json'],
	...jsonc.configs['flat/recommended-with-jsonc'],
	...jsonc.configs['flat/recommended-with-json5'],
	...jsonSchema.configs['flat/recommended'],
	{
		files: ['**/*.json', '**/*.json5', '**/*.jsonc'],
		languageOptions: {
			parser: parser_jsonc,
			parserOptions: {
				jsonSyntax: 'JSON5',
			},
			sourceType: 'script',
		},
		...json.configs.recommended,
	},
	...yml.configs['flat/standard'],
	{
		files: ['**/*.yaml', '**/*.yml'],
		languageOptions: {
			parser: parser_yaml,
		},
	},
	...toml.configs['flat/standard'],
	{
		files: ['**/*.toml'],
		languageOptions: {
			parser: parser_toml,
		},
	},
	...markdown.configs.recommended,
	{
		files: ['**/*.mdx'],
		...mdx.flat,
		// optional, if you want to lint code blocks at the same
		processor: mdx.createRemarkProcessor({
			// optional, if you want to disable language mapper, set it to `false`
			// if you want to override the default language mapper inside, you can provide your own
			languageMapper: {},
			lintCodeBlocks: true,
		}),
	},
	{
		files: ['**/*.mdx'],
		...mdx.flatCodeBlocks,
		rules: {
			...mdx.flatCodeBlocks.rules,
			// if you want to override some rules for code blocks
		},
	},
	{
		files: ['**/*.md'],
		plugins: {
			markdown,
		},
		processor: 'markdown/markdown',
	},
	...jsonc.configs['flat/prettier'],
	...yml.configs['flat/prettier'],
	...svelte.configs.prettier,
	eslintConfigPrettier,
	{
		// 그냥 off 할 설정들
		rules: {
			'import/consistent-type-specifier-style': 'off',
			'import/default': 'off',
			'import/dynamic-import-chunkname': 'off',
			'import/enforce-node-protocol-usage': 'off',
			'import/export': 'off',
			'import/exports-last': 'off',
			'import/extensions': 'off',
			'import/first': 'off',
			'import/group-exports': 'off',
			'import/imports-first': 'off',
			'import/max-dependencies': 'off',
			'import/named': 'off',
			'import/namespace': 'off',
			'import/newline-after-import': 'off',
			'import/no-absolute-path': 'off',
			'import/no-amd': 'off',
			'import/no-anonymous-default-export': 'off',
			'import/no-commonjs': 'off',
			'import/no-cycle': 'off',
			'import/no-default-export': 'off',
			'import/no-deprecated': 'off',
			'import/no-duplicates': 'off',
			'import/no-dynamic-require': 'off',
			'import/no-empty-named-blocks': 'off',
			'import/no-extraneous-dependencies': 'off',
			'import/no-import-module-exports': 'off',
			'import/no-internal-modules': 'off',
			'import/no-mutable-exports': 'off',
			'import/no-named-as-default': 'off',
			'import/no-named-as-default-member': 'off',
			'import/no-named-default': 'off',
			'import/no-named-export': 'off',
			'import/no-namespace': 'off',
			'import/no-nodejs-modules': 'off',
			'import/no-relative-packages': 'off',
			'import/no-relative-parent-imports': 'off',
			'import/no-restricted-paths': 'off',
			'import/no-self-import': 'off',
			'import/no-unassigned-import': 'off',
			'import/no-unresolved': 'off',
			'import/no-unused-modules': 'off',
			'import/no-useless-path-segments': 'off',
			'import/no-webpack-loader-syntax': 'off',
			'import/order': 'off',
			'import/prefer-default-export': 'off',
			'import/unambiguous': 'off',
			'jsonc/no-comments': 'off',
		},
	},
])
</file>

<file path="libraries/base/e2e/basic.test.js">
import { expect, test } from '@playwright/test'
test('실행: Playwright', async ({ page }) => {
	await page.goto('/')
	await expect(page.locator('html')).toBeVisible()
	await expect(page.locator('body')).toBeVisible()
})
</file>

<file path="libraries/base/e2e/traverse.test.js">
import { readdirSync } from 'node:fs'
import path from 'node:path'
import { expect, test } from '@playwright/test'
const VALID_ROUTE_FILE = '+page.svelte'
// eslint-disable-next-line optimize-regex/optimize-regex
const DYNAMIC_ROUTE_PATTERN = /\[.*?\]/g
/**
 * @typedef {PerformanceEntry & { hadRecentInput: boolean; value: number }} LayoutShiftEntry
 *
 * @typedef {PerformanceEntry & { renderTime: number; loadTime: number }} LargestContentfulPaint
 *
 * @typedef {PerformanceEntry & { loadEventEnd: number; startTime: number }} PerformanceNavigationTiming
 */
const isCIEnv = process.env.CI
const isWatchEnv = !isCIEnv && process.env.WATCH === 'true'
function getMaxCLS() {
	if (isCIEnv) return 2
	if (isWatchEnv) return 10
	return 1
}
function getMaxLCP() {
	if (isCIEnv) return 6000
	if (isWatchEnv) return 20_000
	return 14_000
}
function getMaxLoadTime() {
	if (isCIEnv) return 8000
	if (isWatchEnv) return 20_000
	return 16_000
}
const PERFORMANCE_THRESHOLDS = {
	maxCLS: getMaxCLS(),
	maxLCP: getMaxLCP(),
	maxLoadTime: getMaxLoadTime(),
}
/**
 * @param {string} baseUrl
 * @param {string} testRoute
 * @param {import('@playwright/test').Page} page
 */
async function visitPage(baseUrl, testRoute, page) {
	const consoleErrors = []
	page.on('console', (msg) => {
		if (msg.type() === 'error') {
			consoleErrors.push(msg.text())
		}
	})
	const failedRequests = []
	page.on('response', (response) => {
		if (response.status() >= 400) {
			failedRequests.push(`${response.url()} (${response.status()})`)
		}
	})
	const targetUrl = `${baseUrl}${testRoute}`
	const response = await page.goto(targetUrl)
	if (!response) {
		throw new Error(`Failed to load page: ${targetUrl}`)
	}
	await page.waitForLoadState('load')
	expect(response?.status()).toBeGreaterThanOrEqual(200)
	expect(response?.status()).toBeLessThan(400)
	await speedCheck(page, testRoute)
	await expect(page.locator('html')).toBeVisible()
	await expect(page.locator('body')).toBeVisible()
	const divCheck1 = await page.locator('#Top_Layout_Check').count()
	expect(divCheck1).toBe(1)
	const divCheck2 = await page.locator('#Top2_Layout_Check').count()
	expect(divCheck2).toBe(1)
	const divCheck3 = await page.locator('#Page_Check').count()
	expect(divCheck3).toBe(1)
	if (consoleErrors.length > 0 || failedRequests.length > 0) {
		const errorMessage = [
			consoleErrors.length > 0 ? '콘솔 에러:' : '',
			...consoleErrors,
			failedRequests.length > 0 ? '네트워크 에러:' : '',
			...failedRequests,
		]
			.filter(Boolean)
			.join('\n')
		throw new Error(errorMessage || 'error')
	}
}
/**
 * 페이지 로딩 성능을 측정하고 검증하는 함수
 *
 * @param {import('@playwright/test').Page} page - 테스트 페이지 객체
 * @param {string} testRoute - 테스트 중인 라우트 경로
 */
async function speedCheck(page, testRoute) {
	await page.waitForLoadState('domcontentloaded')
	let lcp = await page.evaluate(
		([PERFORMANCE_THRESHOLDS]) => {
			return new Promise((resolve) => {
				let lcpValue = 0
				const observer = new PerformanceObserver((list) => {
					const entries = /** @type {LargestContentfulPaint[]} */ (list.getEntries())
					const lastEntry = entries.at(-1)
					if (lastEntry) {
						lcpValue = lastEntry.renderTime || lastEntry.loadTime
						observer.disconnect() // LCP 값 얻었으면 observer 중단
						resolve(lcpValue)
					}
				})
				observer.observe({ buffered: true, type: 'largest-contentful-paint' })
				setTimeout(() => {
					// 타임아웃 처리 (LCP 이벤트가 발생하지 않을 경우)
					observer.disconnect()
					resolve(lcpValue) // 타임아웃 시 현재까지의 LCP 값 resolve (0일 수 있음)
				}, PERFORMANCE_THRESHOLDS.maxLCP + 100)
			})
		},
		[PERFORMANCE_THRESHOLDS],
	)
	expect(lcp).toBeLessThan(PERFORMANCE_THRESHOLDS.maxLCP)
	let cls = await page.evaluate(
		([PERFORMANCE_THRESHOLDS]) => {
			return new Promise((resolve) => {
				let clsValue = 0
				const observer = new PerformanceObserver((list) => {
					const entry = /** @type {LayoutShiftEntry} */ (list.getEntries()[0])
					if (!entry.hadRecentInput) {
						clsValue += entry.value
					}
				})
				// buffered: true 옵션을 사용하면 이미 발생한 layout-shift 이벤트도 처리
				observer.observe({ buffered: true, type: 'layout-shift' })
				// 일정 시간 후 observer를 disconnect하고 현재까지 누적된 CLS 값을 resolve
				// (필요에 따라 timeout 시간을 조정)
				setTimeout(() => {
					observer.disconnect()
					resolve(clsValue)
				}, PERFORMANCE_THRESHOLDS.maxCLS + 100)
			})
		},
		[PERFORMANCE_THRESHOLDS],
	)
	expect(cls).toBeLessThan(PERFORMANCE_THRESHOLDS.maxCLS)
	let loadTime = await page.evaluate(() => {
		const navigationEntries = /** @type {PerformanceNavigationTiming[]} */ (
			performance.getEntriesByType('navigation')
		)
		if (navigationEntries.length > 0) {
			const navigationEntry = navigationEntries[0]
			return navigationEntry.loadEventEnd - navigationEntry.startTime
		}
		return 0 // Navigation Timing API를 지원하지 않는 경우
	})
	expect(loadTime).toBeLessThan(PERFORMANCE_THRESHOLDS.maxLoadTime)
	const routeName = testRoute.slice(1, -1).replace('\\', '/') || 'ROOT'
	loadTime = Math.round(loadTime)
	lcp = Number(lcp).toFixed(1)
	cls = Number(cls).toFixed(5)
	console.log(`
	< 성능: ${routeName} >
	Load: ${loadTime}ms | LCP: ${lcp}ms | CLS: ${cls}`)
	const dateNow = new Date()
	// Playwright 내장 메트릭과 결합
	const performanceMetrics = {
		metrics: {
			cls,
			lcp,
			loadTime,
		},
		route: routeName,
		timestamp: dateNow.toLocaleString('ko-KR'),
	}
	test.info().attach(`성능: ${routeName}`, { body: JSON.stringify(performanceMetrics) })
}
/**
 * @param {string} projectRouteRoot
 * @param {{ [key: string]: string[] }} dynamicRouteParams
 */
function runTests(projectRouteRoot, dynamicRouteParams) {
	test.describe('스모크 테스트', () => {
		const routes = getRoutes(projectRouteRoot)
		const uniqueRoutes = Array.from(new Set(routes.map((r) => r.route))).filter(
			// 수정: 스프레드 연산자 사용
			(route) => route !== '',
		)
		const baseUrl = '.'
		const routeMap = new Map(routes.map((r) => [r.route, r]))
		for (const routePath of uniqueRoutes) {
			const routeInfo = routeMap.get(routePath)
			const testRoute = routePath || '/'
			if (routeInfo?.dynamic) {
				if (dynamicRouteParams[routePath]) {
					// 동적 라우트 테스트
					for (const paramExample of dynamicRouteParams[routePath]) {
						const dynamicTestRoute = testRoute.replaceAll(DYNAMIC_ROUTE_PATTERN, paramExample)
						// 파라미터 배열을 순차적으로 적용 (예: [id]/[slug] → 123/my-post)
						test(`방문: ${dynamicTestRoute} (dynamic)`, async ({ page }) => {
							const params = paramExample.split('/') // 예시: "123/my-post" → ["123", "my-post"]
							const expectedParams = testRoute.match(DYNAMIC_ROUTE_PATTERN)
							expect(params.length).toBe(expectedParams?.length)
							const encodedParams = params.map(encodeURIComponent)
							// 모든 동적 세그먼트를 순차적으로 치환
							let replacedRoute = testRoute
							let paramIndex = 0
							replacedRoute = replacedRoute.replaceAll(DYNAMIC_ROUTE_PATTERN, () => {
								return encodedParams[paramIndex++] || 'MISSING_PARAM'
							})
							await visitPage(baseUrl, replacedRoute, page)
						})
					}
				} else {
					console.warn(`동적 라우트 ${testRoute}에 대한 테스트 파라미터가 제공되지 않았습니다.`)
					test(`방문: ${testRoute} (dynamic - 파라미터 없음)`, () => {
						expect(true).toBe(true)
					})
				}
			} else {
				// 정적 라우트 테스트
				// eslint-disable-next-line playwright/expect-expect
				test(`방문: ${testRoute}`, async ({ page }) => {
					await visitPage(baseUrl, testRoute, page)
				})
			}
		}
		if (uniqueRoutes.length === 0) {
			console.warn('src/routes 디렉토리에서 라우트를 찾을 수 없습니다.')
			test('No routes found in src/routes', () => {
				expect(true).toBe(true)
			})
		}
	})
}
/**
 * Recursively finds all valid routes within the SvelteKit project's route directory.
 *
 * @param {string} projectRouteRoot - The root directory of the SvelteKit project's routes.
 * @param {string} [dir=''] - The current directory being scanned (relative to projectRouteRoot).
 *   Default is `''`
 * @param {{ route: string; dynamic: boolean }[]} [routes=[]] - Accumulator for discovered routes.
 *   Default is `[]`
 * @returns {{ route: string; dynamic: boolean }[]} - An array of route objects.
 */
function getRoutes(projectRouteRoot, dir = '', routes = []) {
	const items = readdirSync(path.join(projectRouteRoot, dir), { withFileTypes: true })
	for (const item of items) {
		const fullPath = path.join(dir, item.name)
		if (item.isDirectory()) {
			getRoutes(projectRouteRoot, fullPath, routes)
		} else if (item.isFile() && item.name === VALID_ROUTE_FILE) {
			let routePath = path.posix
				.normalize(fullPath)
				.replace(VALID_ROUTE_FILE, '')
				.replace(/^src\/routes/, '')
				.replaceAll(/\(.*?\)\//g, '')
				.replace(/\/index$/, '/')
			if (!routePath.startsWith('/')) {
				routePath = `/${routePath}`
			}
			const isDynamic = DYNAMIC_ROUTE_PATTERN.test(routePath)
			routes.push({ dynamic: isDynamic, route: routePath })
		}
	}
	return routes
}
export { runTests }
</file>

<file path="libraries/base/package.json">
{
	"name": "@library/base",
	"version": "1.0.0",
	"description": "",
	"license": "ISC",
	"author": "",
	"type": "module",
	"main": "index.js",
	"scripts": {
		"check": "svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "pnpm run check -- --watch",
		"depCheck": "npx depcheck",
		"eslint": "eslint .",
		"eslint-fix": "eslint --fix . || true",
		"format": "prettier . --write --ignore-unknown --ignore-path ../../.prettierignore",
		"stylelint": "stylelint --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore",
		"stylelint-fix": "stylelint --fix --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore || true",
		"test:unit": "vitest run"
	},
	"dependencies": {
		"@library/paraglide": "workspace:*",
		"@qwik.dev/partytown": "^0.11.0",
		"open-props": "^1.7.12",
		"sanitize.css": "^13.0.0"
	},
	"devDependencies": {
		"@tailwindcss/postcss": "4.0.15",
		"@tailwindcss/vite": "4.1.2",
		"daisyui": "5.0.9",
		"fontaine": "^0.5.0",
		"postcss": "^8.5.3",
		"postcss-jit-props": "^1.0.15",
		"postcss-lightningcss": "^1.0.1",
		"postcss-preset-env": "^10.1.3",
		"tailwindcss": "4.0.17",
		"tailwindcss-animate": "^1.0.7",
		"terser": "^5.37.0"
	},
	"keywords": [],
	"exports": {
		"./hooks.ts": "./src/hooks.ts",
		"./hooks.server.ts": "./src/hooks.server.ts",
		"./hooks.client.ts": "./src/hooks.client.ts",
		"./baseTest.js": "./src/baseTest.js",
		"./tsconfig.json": "./tsconfig.json",
		"./IBMPlexMath.woff2": "./static/fonts/math/IBMPlexMath-Regular.woff2",
		"./IBMPlexMono-Bold.woff2": "./static/fonts/mono/IBMPlexMono-Bold.woff2",
		"./IBMPlexMono-BoldItalic.woff2": "./static/fonts/mono/IBMPlexMono-BoldItalic.woff2",
		"./IBMPlexMono-ExtraLight.woff2": "./static/fonts/mono/IBMPlexMono-ExtraLight.woff2",
		"./IBMPlexMono-ExtraLightItalic.woff2": "./static/fonts/mono/IBMPlexMono-ExtraLightItalic.woff2",
		"./IBMPlexMono-Light.woff2": "./static/fonts/mono/IBMPlexMono-Light.woff2",
		"./IBMPlexMono-LightItalic.woff2": "./static/fonts/mono/IBMPlexMono-LightItalic.woff2",
		"./IBMPlexMono-Medium.woff2": "./static/fonts/mono/IBMPlexMono-Medium.woff2",
		"./IBMPlexMono-MediumItalic.woff2": "./static/fonts/mono/IBMPlexMono-MediumItalic.woff2",
		"./IBMPlexMono-Regular.woff2": "./static/fonts/mono/IBMPlexMono-Regular.woff2",
		"./IBMPlexMono-SemiBold.woff2": "./static/fonts/mono/IBMPlexMono-SemiBold.woff2",
		"./IBMPlexMono-SemiBoldItalic.woff2": "./static/fonts/mono/IBMPlexMono-SemiBoldItalic.woff2",
		"./IBMPlexMono-Text.woff2": "./static/fonts/mono/IBMPlexMono-Text.woff2",
		"./IBMPlexMono-TextItalic.woff2": "./static/fonts/mono/IBMPlexMono-TextItalic.woff2",
		"./IBMPlexMono-Thin.woff2": "./static/fonts/mono/IBMPlexMono-Thin.woff2",
		"./IBMPlexMono-ThinItalic.woff2": "./static/fonts/mono/IBMPlexMono-ThinItalic.woff2",
		"./IBMPlexSansArabic-Bold.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Bold.woff2",
		"./IBMPlexSansArabic-ExtraLight.woff2": "./static/fonts/arabic/IBMPlexSansArabic-ExtraLight.woff2",
		"./IBMPlexSansArabic-Light.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Light.woff2",
		"./IBMPlexSansArabic-Medium.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Medium.woff2",
		"./IBMPlexSansArabic-Regular.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Regular.woff2",
		"./IBMPlexSansArabic-SemiBold.woff2": "./static/fonts/arabic/IBMPlexSansArabic-SemiBold.woff2",
		"./IBMPlexSansArabic-Text.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Text.woff2",
		"./IBMPlexSansArabic-Thin.woff2": "./static/fonts/arabic/IBMPlexSansArabic-Thin.woff2",
		"./IBMPlexSansDevanagari-Bold.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Bold.woff2",
		"./IBMPlexSansDevanagari-ExtraLight.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-ExtraLight.woff2",
		"./IBMPlexSansDevanagari-Light.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Light.woff2",
		"./IBMPlexSansDevanagari-Medium.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Medium.woff2",
		"./IBMPlexSansDevanagari-Regular.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Regular.woff2",
		"./IBMPlexSansDevanagari-SemiBold.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-SemiBold.woff2",
		"./IBMPlexSansDevanagari-Text.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Text.woff2",
		"./IBMPlexSansDevanagari-Thin.woff2": "./static/fonts/devanagari/IBMPlexSansDevanagari-Thin.woff2",
		"./IBMPlexSansHebrew-Bold.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Bold.woff2",
		"./IBMPlexSansHebrew-ExtraLight.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-ExtraLight.woff2",
		"./IBMPlexSansHebrew-Light.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Light.woff2",
		"./IBMPlexSansHebrew-Medium.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Medium.woff2",
		"./IBMPlexSansHebrew-Regular.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Regular.woff2",
		"./IBMPlexSansHebrew-SemiBold.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-SemiBold.woff2",
		"./IBMPlexSansHebrew-Text.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Text.woff2",
		"./IBMPlexSansHebrew-Thin.woff2": "./static/fonts/hebrew/IBMPlexSansHebrew-Thin.woff2",
		"./IBMPlexSansJP-Bold.woff2": "./static/fonts/jp/IBMPlexSansJP-Bold.woff2",
		"./IBMPlexSansJP-ExtraLight.woff2": "./static/fonts/jp/IBMPlexSansJP-ExtraLight.woff2",
		"./IBMPlexSansJP-Light.woff2": "./static/fonts/jp/IBMPlexSansJP-Light.woff2",
		"./IBMPlexSansJP-Medium.woff2": "./static/fonts/jp/IBMPlexSansJP-Medium.woff2",
		"./IBMPlexSansJP-Regular.woff2": "./static/fonts/jp/IBMPlexSansJP-Regular.woff2",
		"./IBMPlexSansJP-SemiBold.woff2": "./static/fonts/jp/IBMPlexSansJP-SemiBold.woff2",
		"./IBMPlexSansJP-Text.woff2": "./static/fonts/jp/IBMPlexSansJP-Text.woff2",
		"./IBMPlexSansJP-Thin.woff2": "./static/fonts/jp/IBMPlexSansJP-Thin.woff2",
		"./IBMPlexSansKR-Bold.woff2": "./static/fonts/kr/IBMPlexSansKR-Bold.woff2",
		"./IBMPlexSansKR-ExtraLight.woff2": "./static/fonts/kr/IBMPlexSansKR-ExtraLight.woff2",
		"./IBMPlexSansKR-Light.woff2": "./static/fonts/kr/IBMPlexSansKR-Light.woff2",
		"./IBMPlexSansKR-Medium.woff2": "./static/fonts/kr/IBMPlexSansKR-Medium.woff2",
		"./IBMPlexSansKR-Regular.woff2": "./static/fonts/kr/IBMPlexSansKR-Regular.woff2",
		"./IBMPlexSansKR-SemiBold.woff2": "./static/fonts/kr/IBMPlexSansKR-SemiBold.woff2",
		"./IBMPlexSansKR-Text.woff2": "./static/fonts/kr/IBMPlexSansKR-Text.woff2",
		"./IBMPlexSansKR-Thin.woff2": "./static/fonts/kr/IBMPlexSansKR-Thin.woff2",
		"./IBMPlexSansSC-Bold.woff2": "./static/fonts/sc/IBMPlexSansSC-Bold.woff2",
		"./IBMPlexSansSC-ExtraLight.woff2": "./static/fonts/sc/IBMPlexSansSC-ExtraLight.woff2",
		"./IBMPlexSansSC-Light.woff2": "./static/fonts/sc/IBMPlexSansSC-Light.woff2",
		"./IBMPlexSansSC-Medium.woff2": "./static/fonts/sc/IBMPlexSansSC-Medium.woff2",
		"./IBMPlexSansSC-Regular.woff2": "./static/fonts/sc/IBMPlexSansSC-Regular.woff2",
		"./IBMPlexSansSC-SemiBold.woff2": "./static/fonts/sc/IBMPlexSansSC-SemiBold.woff2",
		"./IBMPlexSansSC-Text.woff2": "./static/fonts/sc/IBMPlexSansSC-Text.woff2",
		"./IBMPlexSansSC-Thin.woff2": "./static/fonts/sc/IBMPlexSansSC-Thin.woff2",
		"./IBMPlexSansTC-Bold.woff2": "./static/fonts/tc/IBMPlexSansTC-Bold.woff2",
		"./IBMPlexSansTC-ExtraLight.woff2": "./static/fonts/tc/IBMPlexSansTC-ExtraLight.woff2",
		"./IBMPlexSansTC-Light.woff2": "./static/fonts/tc/IBMPlexSansTC-Light.woff2",
		"./IBMPlexSansTC-Medium.woff2": "./static/fonts/tc/IBMPlexSansTC-Medium.woff2",
		"./IBMPlexSansTC-Regular.woff2": "./static/fonts/tc/IBMPlexSansTC-Regular.woff2",
		"./IBMPlexSansTC-SemiBold.woff2": "./static/fonts/tc/IBMPlexSansTC-SemiBold.woff2",
		"./IBMPlexSansTC-Text.woff2": "./static/fonts/tc/IBMPlexSansTC-Text.woff2",
		"./IBMPlexSansTC-Thin.woff2": "./static/fonts/tc/IBMPlexSansTC-Thin.woff2",
		"./IBMPlexSansThai-Bold.woff2": "./static/fonts/thai/IBMPlexSansThai-Bold.woff2",
		"./IBMPlexSansThai-ExtraLight.woff2": "./static/fonts/thai/IBMPlexSansThai-ExtraLight.woff2",
		"./IBMPlexSansThai-Light.woff2": "./static/fonts/thai/IBMPlexSansThai-Light.woff2",
		"./IBMPlexSansThai-Medium.woff2": "./static/fonts/thai/IBMPlexSansThai-Medium.woff2",
		"./IBMPlexSansThai-Regular.woff2": "./static/fonts/thai/IBMPlexSansThai-Regular.woff2",
		"./IBMPlexSansThai-SemiBold.woff2": "./static/fonts/thai/IBMPlexSansThai-SemiBold.woff2",
		"./IBMPlexSansThai-Text.woff2": "./static/fonts/thai/IBMPlexSansThai-Text.woff2",
		"./IBMPlexSansThai-Thin.woff2": "./static/fonts/thai/IBMPlexSansThai-Thin.woff2",
		"./IBMPlexSansThaiLooped-Bold.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Bold.woff2",
		"./IBMPlexSansThaiLooped-ExtraLight.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-ExtraLight.woff2",
		"./IBMPlexSansThaiLooped-Light.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Light.woff2",
		"./IBMPlexSansThaiLooped-Medium.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Medium.woff2",
		"./IBMPlexSansThaiLooped-Regular.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Regular.woff2",
		"./IBMPlexSansThaiLooped-SemiBold.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-SemiBold.woff2",
		"./IBMPlexSansThaiLooped-Text.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Text.woff2",
		"./IBMPlexSansThaiLooped-Thin.woff2": "./static/fonts/thai-looped/IBMPlexSansThaiLooped-Thin.woff2",
		"./IBMPlexSansVar-Italic.woff2": "./static/fonts/IBMPlexSansVar-Italic.woff2",
		"./IBMPlexSansVar-Roman.woff2": "./static/fonts/IBMPlexSansVar-Roman.woff2",
		"./base.css": "./src/base.css",
		"./base.js": "./src/base.js",
		"./baseCSS.css": "./src/baseCSS.css",
		"./baseLayout": "./src/routes/layout.svelte",
		"./basic.test.js": "./e2e/basic.test.js",
		"./fontStyle.css": "./src/fontStyle.css",
		"./forTailwind.css": "./src/forTailwind.css",
		"./playwright.config.js": "./playwright.config.js",
		"./postcss.config.js": "./postcss.config.js",
		"./svelte.config.js": "./svelte.config.js",
		"./tailwind.config": "./tailwind.config.ts",
		"./traverse.test.js": "./e2e/traverse.test.js",
		"./vite.config.js": "./vite.config.js"
	}
}
</file>

<file path="libraries/base/playwright.config.js">
import { devices } from '@playwright/test'
/** @type {import('@playwright/test').PlaywrightTestConfig} */
export default {
	forbidOnly: !!process.env.CI,
	fullyParallel: true,
	/* Configure projects for major browsers */
	projects: [
		{
			name: 'chromium',
			use: { ...devices['Desktop Chrome'], screenshot: 'only-on-failure' },
		},
		process.env.CI ?
			{
				name: 'firefox',
				use: { ...devices['Desktop Firefox'] },
			}
		:	{},
		{
			name: 'webkit',
			use: { ...devices['Desktop Safari'] },
		},
		/* against mobile viewports. */
		{
			name: 'Mobile Chrome',
			use: { ...devices['Pixel 5'] },
		},
		{
			name: 'Mobile Safari',
			use: { ...devices['iPhone 12'] },
		},
		/* against branded browsers. */
		process.env.CI ?
			{
				name: 'Microsoft Edge',
				use: { ...devices['Desktop Edge'], channel: 'msedge' },
			}
		:	{},
		process.env.CI ?
			{
				name: 'Google Chrome',
				use: { ...devices['Desktop Chrome'], channel: 'chrome' },
			}
		:	{},
	],
	outputDir: './playwright-report',
	reporter:
		process.env.GITHUB_ACTIONS ?
			[['junit', { outputFile: 'junit.xml' }], ['github'], ['html']]
		:	'html',
	// retries: process.env.CI ? 1 : 0,
	retries: 1,
	testDir: 'e2e',
	timeout: 180_000,
	use: {
		// video: 'retain-on-failure',
		// 브라우저 컨텍스트 타임아웃 증가 (HMR 대기용)
		launchOptions: {
			slowMo: process.env.CI ? 0 : 100, // 느린 환경에서 UI 갱신 대기
		},
		contextOptions: {
			reducedMotion: 'reduce',
		},
		screenshot: 'only-on-failure',
		trace: 'on-first-retry',
	},
	workers: process.env.CI ? 2 : '50%',
}
</file>

<file path="libraries/base/postcss.config.js">
import tailwindcss from '@tailwindcss/postcss'
import presetEnv from 'postcss-preset-env'
const config = {
	plugins: [
		tailwindcss(),
		presetEnv({
			autoprefixer: { grid: false },
			enableClientSidePolyfills: true,
			minimumVendorImplementations: 2,
			stage: 3,
		}),
	],
}
export default config
</file>

<file path="libraries/base/src/app.css">
@import url('@library/base/base.css');
</file>

<file path="libraries/base/src/app.html">
<!doctype html>
<html lang="%paraglide.lang%" dir="%paraglide.textDirection%">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
		<script
			src="//instant.page/5.2.0"
			type="module"
			integrity="sha384-jnZyxPjiipYXnSU0ygqeac2q7CVYMbh84q0uHVRRxEtvFPiQYbXWUorga2aqZJ0z"
		></script>
		<script src="https://code.iconify.design/iconify-icon/2.3.0/iconify-icon.min.js"></script>
	</body>
</html>
</file>

<file path="libraries/base/src/base.css">
/* Tailwind CSS의 default layer는
@layer theme, base, components, utilities;
*/
@layer base, base0, base1, theme, components, utilities;
@import url('sanitize.css') layer(base0);
@import url('sanitize.css/forms.css') layer(base0);
@import url('sanitize.css/typography.css') layer(base0);
@import url('sanitize.css/assets.css') layer(base0);
@import url('sanitize.css/reduce-motion.css') layer(base0);
@import url('open-props/style') layer(base1);
@import url('open-props/normalize') layer(base1);
@import url('open-props/media') layer(base1);
/* @import url('open-props/postcss/buttons') layer(base0); */
@import url('./tailwind.css');
@import url('./baseClasses.css');
@import url('./baseVariables.css');
@import url('./baseCSS.css');
</file>

<file path="libraries/base/src/base.js">
export function init() {
	// 모바일 브라우저에서 가상 키보드의 크기 고려 안하기
	if ('virtualKeyboard' in navigator) {
		// @ts-ignore
		navigator.virtualKeyboard.overlaysContent = true
	}
}
</file>

<file path="libraries/base/src/base.test.js">
import { runTest } from './baseTest.js'
runTest()
</file>

<file path="libraries/base/src/baseClasses.css">
.boxed {
	position: relative;
	container: boxed / inline-size;
}
.gutter {
	scrollbar-gutter: stable both-edges;
}
.long-text {
	/* font가 load 되면서 생기는 flash를 줄이기 위해 ch 대신 em 사용 */
	max-inline-size: 40em;
	margin: auto;
	font-size: var(--font-size-2);
}
.ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
.clip {
	overflow: hidden;
	text-overflow: clip;
	white-space: nowrap;
}
.frame {
	overflow: hidden;
	display: flex;
	align-items: center;
	justify-content: center;
	aspect-ratio: var(--ratio-widescreen);
	& > img,
	& > video {
		inline-size: 100%;
		block-size: 100%;
		object-fit: cover;
	}
}
.gradient-text-1 {
	background: var(--gradient-1);
	background-clip: text;
	-webkit-text-fill-color: transparent;
}
.noise-noise-noise {
	/* stack grain with a gradient */
	background-image: var(--gradient-3), var(--noise-3);
	/* fit noise image to element */
	background-size: cover;
	/* force colors and noise to collide */
	filter: var(--noise-filter-3);
}
.cluster {
	display: flex;
	flex-wrap: wrap;
	gap: var(--space, 1rem);
	align-items: center;
	justify-content: flex-start;
}
.grid {
	display: grid;
	grid-gap: 1rem;
}
@supports (width: min(250px, 100%)) {
	.grid {
		grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
	}
}
</file>

<file path="libraries/base/src/baseCSS.css">
:root {
	font-size: var(--font-size-0);
	text-size-adjust: 100%;
	color-scheme: light dark;
}
body {
	position: relative;
	inset: 0;
	container: body / inline-size;
	overflow: auto;
	inline-size: 100svi;
	block-size: 100svb;
}
*,
*::before,
*::after {
	overscroll-behavior: contain;
	box-sizing: border-box;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	text-wrap: stable;
	text-rendering: optimizelegibility;
	word-break: keep-all;
	line-break: strict;
	overflow-wrap: break-word;
}
button,
.button-type {
	cursor: pointer;
	user-select: none;
	position: relative;
	overflow: hidden;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	inline-size: fit-content;
	max-inline-size: min(100%, 100cqi);
	padding: max(0.5em, 0.5rem) max(1.5em, 1.5rem);
	text-align: center;
	text-decoration: none;
	text-transform: capitalize;
	white-space: nowrap;
	vertical-align: middle;
	appearance: auto;
	&:active,
	&:hover {
		opacity: 0.7;
	}
	&:focus {
		z-index: 1;
		outline: 2px dashed color-mix(in srgb, var(--gray-12) 40%, transparent 60%);
		outline-offset: 2px;
	}
}
div {
	color: inherit;
	outline: var(--size-1) solid transparent;
	outline-offset: calc(-1 * var(--size-1));
}
ol,
ul,
dl {
	/* open-props/normalize 스타일 덮어쓰기 */
	font-size: 1em;
}
p {
	font-size: 1em;
	line-height: var(--font-lineheight-4);
	& ~ p {
		margin-block-start: 0.5em;
	}
}
img {
	max-inline-size: 100%;
	object-fit: cover;
}
a {
	hyphens: none;
	overflow-wrap: anywhere;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	max-inline-size: initial;
	margin-block-end: 0.25em;
	font-size: 1em;
	line-height: var(--font-lineheight-1);
	hyphens: none;
	text-wrap: balance;
}
h1 {
	margin-block-end: 0.5em;
	font-weight: 700;
}
h2 {
	font-weight: 600;
}
h3 {
	font-weight: 500;
}
h4,
h5,
h6 {
	font-weight: 400;
}
[id] {
	scroll-margin-block-start: var(--font-size-5);
}
blockquote {
	max-inline-size: 80%;
	margin-block: 2em;
	margin-inline-start: 2em;
	font-size: 0.75em;
	line-height: var(--font-lineheight-2);
}
/* Scrollbar */
@media (forced-colors: none) {
	/* 1. 모든 브라우저에 적용되는 기본 스타일 */
	* {
		scrollbar-color: color-mix(in oklch, currentcolor 35%, transparent) transparent;
	}
	/* 4. Firefox용 컨테이너 쿼리 */
	@container (max-width: 15ch) {
		* {
			scrollbar-width: thin;
		}
	}
	/* 2. WebKit 계열 브라우저 전용 스타일 */
	@supports (-webkit-appearance: none) and (not (-moz-appearance: none)) {
		* {
			scrollbar-color: initial; /* 웹킷 스크롤바 활성화 */
		}
		::-webkit-scrollbar {
			inline-size: min(1ch, var(--font-size-2));
			block-size: min(1ex, var(--font-size-2));
		}
		::-webkit-scrollbar-thumb {
			background-color: color-mix(in oklch, currentcolor 35%, transparent);
		}
		::-webkit-scrollbar-track {
			background-color: transparent;
		}
		/* 3. 컨테이너 쿼리 대응 */
		/* Fix  */
		@container (max-width: 15ch) {
			::-webkit-scrollbar {
				/* stylelint-disable-next-line plugin/use-logical-properties-and-values */
				width: min(0.5ch, var(--font-size-1));
			}
		}
		@container (max-height: 15ex) {
			::-webkit-scrollbar {
				/* stylelint-disable-next-line plugin/use-logical-properties-and-values */
				height: min(0.5ex, var(--font-size-1));
			}
		}
	}
}
</file>

<file path="libraries/base/src/baseTest.js">
import { describe, expect, it } from 'vitest'
export function runTest() {
	describe('그냥 테스트', () => {
		it('adds 1 + 2 to equal 3', () => {
			expect(1 + 2).toBe(3)
		})
	})
}
</file>

<file path="libraries/base/src/baseVariables.css">
:root {
	/* Space 3xs: 5px → 5px */
	--space-3xs: clamp(0.3125rem, 0.3125rem + 0vi, 0.3125rem);
	/* Space 2xs: 9px → 10px */
	--space-2xs: clamp(0.5625rem, 0.5408rem + 0.1087vi, 0.625rem);
	/* Space xs: 14px → 15px */
	--space-xs: clamp(0.875rem, 0.8533rem + 0.1087vi, 0.9375rem);
	/* Space s: 18px → 20px */
	--space-s: clamp(1.125rem, 1.0815rem + 0.2174vi, 1.25rem);
	/* Space m: 27px → 30px */
	--space-m: clamp(1.6875rem, 1.6223rem + 0.3261vi, 1.875rem);
	/* Space l: 36px → 40px */
	--space-l: clamp(2.25rem, 2.163rem + 0.4348vi, 2.5rem);
	/* Space xl: 54px → 60px */
	--space-xl: clamp(3.375rem, 3.2446rem + 0.6522vi, 3.75rem);
	/* Space 2xl: 72px → 80px */
	--space-2xl: clamp(4.5rem, 4.3261rem + 0.8696vi, 5rem);
	/* Space 3xl: 108px → 120px */
	--space-3xl: clamp(6.75rem, 6.4891rem + 1.3043vi, 7.5rem);
	/* One-up pairs */
	/* Space 3xs-2xs: 5px → 10px */
	--space-3xs-2xs: clamp(0.3125rem, 0.2038rem + 0.5435vi, 0.625rem);
	/* Space 2xs-xs: 9px → 15px */
	--space-2xs-xs: clamp(0.5625rem, 0.4321rem + 0.6522vi, 0.9375rem);
	/* Space xs-s: 14px → 20px */
	--space-xs-s: clamp(0.875rem, 0.7446rem + 0.6522vi, 1.25rem);
	/* Space s-m: 18px → 30px */
	--space-s-m: clamp(1.125rem, 0.8641rem + 1.3043vi, 1.875rem);
	/* Space m-l: 27px → 40px */
	--space-m-l: clamp(1.6875rem, 1.4049rem + 1.413vi, 2.5rem);
	/* Space l-xl: 36px → 60px */
	--space-l-xl: clamp(2.25rem, 1.7283rem + 2.6087vi, 3.75rem);
	/* Space xl-2xl: 54px → 80px */
	--space-xl-2xl: clamp(3.375rem, 2.8098rem + 2.8261vi, 5rem);
	/* Space 2xl-3xl: 72px → 120px */
	--space-2xl-3xl: clamp(4.5rem, 3.4565rem + 5.2174vi, 7.5rem);
	/* Custom pairs */
	/* Space s-l: 18px → 40px */
	--space-s-l: clamp(1.125rem, 0.6467rem + 2.3913vi, 2.5rem);
}
:root {
	/* Step -2: 9.7222px → 10.24px */
	--font-size-02: clamp(0.6076rem, 0.5964rem + 0.0563vi, 0.64rem);
	/* Step -1: 11.6667px → 12.8px */
	--font-size-01: clamp(0.7292rem, 0.7045rem + 0.1232vi, 0.8rem);
	/* Step 0: 14px → 16px */
	--font-size-0: clamp(0.875rem, 0.8315rem + 0.2174vi, 1rem);
	/* Step 1: 16.8px → 20px */
	--font-size-1: clamp(1.05rem, 0.9804rem + 0.3478vi, 1.25rem);
	/* Step 2: 20.16px → 25px */
	--font-size-2: clamp(1.26rem, 1.1548rem + 0.5261vi, 1.5625rem);
	/* Step 3: 24.192px → 31.25px */
	--font-size-3: clamp(1.512rem, 1.3586rem + 0.7672vi, 1.9531rem);
	/* Step 4: 29.0304px → 39.0625px */
	--font-size-4: clamp(1.8144rem, 1.5963rem + 1.0904vi, 2.4414rem);
	/* Step 5: 34.8365px → 48.8281px */
	--font-size-5: clamp(2.1773rem, 1.8731rem + 1.5208vi, 3.0518rem);
}
/* Open Props variables 덮어쓰기 Or 확장 */
body {
	--size-content-4: 80ch;
	--radius-2-5: 0.5rem;
}
/* 다크 테마일 때 색깔 변수 거꾸로 매핑 */
.dark {
	--gray-0: var(--gray-12);
	--gray-1: var(--gray-11);
	--gray-2: var(--gray-10);
	--gray-3: var(--gray-9);
	--gray-4: var(--gray-8);
	--gray-5: var(--gray-7);
	--gray-6: var(--gray-6);
	--gray-7: var(--gray-5);
	--gray-8: var(--gray-4);
	--gray-9: var(--gray-3);
	--gray-10: var(--gray-2);
	--gray-11: var(--gray-1);
	--gray-12: var(--gray-0);
	--stone-0: var(--stone-12);
	--stone-1: var(--stone-11);
	--stone-2: var(--stone-10);
	--stone-3: var(--stone-9);
	--stone-4: var(--stone-8);
	--stone-5: var(--stone-7);
	--stone-6: var(--stone-6);
	--stone-7: var(--stone-5);
	--stone-8: var(--stone-4);
	--stone-9: var(--stone-3);
	--stone-10: var(--stone-2);
	--stone-11: var(--stone-1);
	--stone-12: var(--stone-0);
	--red-0: var(--red-12);
	--red-1: var(--red-11);
	--red-2: var(--red-10);
	--red-3: var(--red-9);
	--red-4: var(--red-8);
	--red-5: var(--red-7);
	--red-6: var(--red-6);
	--red-7: var(--red-5);
	--red-8: var(--red-4);
	--red-9: var(--red-3);
	--red-10: var(--red-2);
	--red-11: var(--red-1);
	--red-12: var(--red-0);
	--pink-0: var(--pink-12);
	--pink-1: var(--pink-11);
	--pink-2: var(--pink-10);
	--pink-3: var(--pink-9);
	--pink-4: var(--pink-8);
	--pink-5: var(--pink-7);
	--pink-6: var(--pink-6);
	--pink-7: var(--pink-5);
	--pink-8: var(--pink-4);
	--pink-9: var(--pink-3);
	--pink-10: var(--pink-2);
	--pink-11: var(--pink-1);
	--pink-12: var(--pink-0);
	--purple-0: var(--purple-12);
	--purple-1: var(--purple-11);
	--purple-2: var(--purple-10);
	--purple-3: var(--purple-9);
	--purple-4: var(--purple-8);
	--purple-5: var(--purple-7);
	--purple-6: var(--purple-6);
	--purple-7: var(--purple-5);
	--purple-8: var(--purple-4);
	--purple-9: var(--purple-3);
	--purple-10: var(--purple-2);
	--purple-11: var(--purple-1);
	--purple-12: var(--purple-0);
	--violet-0: var(--violet-12);
	--violet-1: var(--violet-11);
	--violet-2: var(--violet-10);
	--violet-3: var(--violet-9);
	--violet-4: var(--violet-8);
	--violet-5: var(--violet-7);
	--violet-6: var(--violet-6);
	--violet-7: var(--violet-5);
	--violet-8: var(--violet-4);
	--violet-9: var(--violet-3);
	--violet-10: var(--violet-2);
	--violet-11: var(--violet-1);
	--violet-12: var(--violet-0);
	--indigo-0: var(--indigo-12);
	--indigo-1: var(--indigo-11);
	--indigo-2: var(--indigo-10);
	--indigo-3: var(--indigo-9);
	--indigo-4: var(--indigo-8);
	--indigo-5: var(--indigo-7);
	--indigo-6: var(--indigo-6);
	--indigo-7: var(--indigo-5);
	--indigo-8: var(--indigo-4);
	--indigo-9: var(--indigo-3);
	--indigo-10: var(--indigo-2);
	--indigo-11: var(--indigo-1);
	--indigo-12: var(--indigo-0);
	--blue-0: var(--blue-12);
	--blue-1: var(--blue-11);
	--blue-2: var(--blue-10);
	--blue-3: var(--blue-9);
	--blue-4: var(--blue-8);
	--blue-5: var(--blue-7);
	--blue-6: var(--blue-6);
	--blue-7: var(--blue-5);
	--blue-8: var(--blue-4);
	--blue-9: var(--blue-3);
	--blue-10: var(--blue-2);
	--blue-11: var(--blue-1);
	--blue-12: var(--blue-0);
	--cyan-0: var(--cyan-12);
	--cyan-1: var(--cyan-11);
	--cyan-2: var(--cyan-10);
	--cyan-3: var(--cyan-9);
	--cyan-4: var(--cyan-8);
	--cyan-5: var(--cyan-7);
	--cyan-6: var(--cyan-6);
	--cyan-7: var(--cyan-5);
	--cyan-8: var(--cyan-4);
	--cyan-9: var(--cyan-3);
	--cyan-10: var(--cyan-2);
	--cyan-11: var(--cyan-1);
	--cyan-12: var(--cyan-0);
	--teal-0: var(--teal-12);
	--teal-1: var(--teal-11);
	--teal-2: var(--teal-10);
	--teal-3: var(--teal-9);
	--teal-4: var(--teal-8);
	--teal-5: var(--teal-7);
	--teal-6: var(--teal-6);
	--teal-7: var(--teal-5);
	--teal-8: var(--teal-4);
	--teal-9: var(--teal-3);
	--teal-10: var(--teal-2);
	--teal-11: var(--teal-1);
	--teal-12: var(--teal-0);
	--green-0: var(--green-12);
	--green-1: var(--green-11);
	--green-2: var(--green-10);
	--green-3: var(--green-9);
	--green-4: var(--green-8);
	--green-5: var(--green-7);
	--green-6: var(--green-6);
	--green-7: var(--green-5);
	--green-8: var(--green-4);
	--green-9: var(--green-3);
	--green-10: var(--green-2);
	--green-11: var(--green-1);
	--green-12: var(--green-0);
	--lime-0: var(--lime-12);
	--lime-1: var(--lime-11);
	--lime-2: var(--lime-10);
	--lime-3: var(--lime-9);
	--lime-4: var(--lime-8);
	--lime-5: var(--lime-7);
	--lime-6: var(--lime-6);
	--lime-7: var(--lime-5);
	--lime-8: var(--lime-4);
	--lime-9: var(--lime-3);
	--lime-10: var(--lime-2);
	--lime-11: var(--lime-1);
	--lime-12: var(--lime-0);
	--yellow-0: var(--yellow-12);
	--yellow-1: var(--yellow-11);
	--yellow-2: var(--yellow-10);
	--yellow-3: var(--yellow-9);
	--yellow-4: var(--yellow-8);
	--yellow-5: var(--yellow-7);
	--yellow-6: var(--yellow-6);
	--yellow-7: var(--yellow-5);
	--yellow-8: var(--yellow-4);
	--yellow-9: var(--yellow-3);
	--yellow-10: var(--yellow-2);
	--yellow-11: var(--yellow-1);
	--yellow-12: var(--yellow-0);
	--orange-0: var(--orange-12);
	--orange-1: var(--orange-11);
	--orange-2: var(--orange-10);
	--orange-3: var(--orange-9);
	--orange-4: var(--orange-8);
	--orange-5: var(--orange-7);
	--orange-6: var(--orange-6);
	--orange-7: var(--orange-5);
	--orange-8: var(--orange-4);
	--orange-9: var(--orange-3);
	--orange-10: var(--orange-2);
	--orange-11: var(--orange-1);
	--orange-12: var(--orange-0);
	--choco-0: var(--choco-12);
	--choco-1: var(--choco-11);
	--choco-2: var(--choco-10);
	--choco-3: var(--choco-9);
	--choco-4: var(--choco-8);
	--choco-5: var(--choco-7);
	--choco-6: var(--choco-6);
	--choco-7: var(--choco-5);
	--choco-8: var(--choco-4);
	--choco-9: var(--choco-3);
	--choco-10: var(--choco-2);
	--choco-11: var(--choco-1);
	--choco-12: var(--choco-0);
	--brown-0: var(--brown-12);
	--brown-1: var(--brown-11);
	--brown-2: var(--brown-10);
	--brown-3: var(--brown-9);
	--brown-4: var(--brown-8);
	--brown-5: var(--brown-7);
	--brown-6: var(--brown-6);
	--brown-7: var(--brown-5);
	--brown-8: var(--brown-4);
	--brown-9: var(--brown-3);
	--brown-10: var(--brown-2);
	--brown-11: var(--brown-1);
	--brown-12: var(--brown-0);
	--sand-0: var(--sand-12);
	--sand-1: var(--sand-11);
	--sand-2: var(--sand-10);
	--sand-3: var(--sand-9);
	--sand-4: var(--sand-8);
	--sand-5: var(--sand-7);
	--sand-6: var(--sand-6);
	--sand-7: var(--sand-5);
	--sand-8: var(--sand-4);
	--sand-9: var(--sand-3);
	--sand-10: var(--sand-2);
	--sand-11: var(--sand-1);
	--sand-12: var(--sand-0);
	--camo-0: var(--camo-12);
	--camo-1: var(--camo-11);
	--camo-2: var(--camo-10);
	--camo-3: var(--camo-9);
	--camo-4: var(--camo-8);
	--camo-5: var(--camo-7);
	--camo-6: var(--camo-6);
	--camo-7: var(--camo-5);
	--camo-8: var(--camo-4);
	--camo-9: var(--camo-3);
	--camo-10: var(--camo-2);
	--camo-11: var(--camo-1);
	--camo-12: var(--camo-0);
	--jungle-0: var(--jungle-12);
	--jungle-1: var(--jungle-11);
	--jungle-2: var(--jungle-10);
	--jungle-3: var(--jungle-9);
	--jungle-4: var(--jungle-8);
	--jungle-5: var(--jungle-7);
	--jungle-6: var(--jungle-6);
	--jungle-7: var(--jungle-5);
	--jungle-8: var(--jungle-4);
	--jungle-9: var(--jungle-3);
	--jungle-10: var(--jungle-2);
	--jungle-11: var(--jungle-1);
	--jungle-12: var(--jungle-0);
}
.dark {
	/* dark theme 일 때 variable 바뀌는 거 덮어씌워서 안 바뀌게 하기  */
	--link: var(--indigo-7);
	--link-visited: var(--purple-7);
	--text-1: var(--gray-12);
	--text-2: var(--gray-7);
	--surface-1: var(--gray-0);
	--surface-2: var(--gray-2);
	--surface-3: var(--gray-3);
	--surface-4: var(--gray-4);
	--scrollthumb-color: var(--gray-7);
}
</file>

<file path="libraries/base/src/daisyUI.css">
@plugin 'daisyui';
:root {
	/* --radius-selector: var(--radius-2-5); */
	--radius-selector: var(--radius-1);
	/* --radius-field: var(--radius-2); */
	--radius-field: var(--radius-1);
	/* --radius-box: var(--radius-2-5); */
	--radius-box: var(--radius-1);
	--size-selector: var(--size-1);
	--size-field: var(--size-1);
	--border: var(--border-size-1);
	--depth: 1;
	--noise: 0;
	--rounded-box: var(--radius-3);
	--rounded-btn: var(--radius-2-5);
	--rounded-badge: var(--radius-4);
	--animation-btn: 0.25s;
	--animation-input: 0.2s;
	--btn-focus-scale: 0.95;
	--border-btn: var(--border-size-1);
	--tab-border: var(--border-size-1);
	--tab-radius: var(--radius-1);
}
:root {
	--color-base-100: var(--gray-0);
	--color-base-200: var(--gray-2);
	--color-base-300: var(--gray-4);
	--color-base-content: var(--gray-12);
	--color-neutral: var(--gray-7);
	--color-neutral-content: var(--gray-0);
	--color-info: var(--cyan-3);
	--color-info-content: var(--gray-12);
	--color-success: var(--green-9);
	--color-success-content: var(--gray-0);
	--color-warning: var(--orange-7);
	--color-warning-content: var(--gray-0);
	--color-error: var(--red-9);
	--color-error-content: var(--gray-0);
}
</file>

<file path="libraries/base/src/fontFace.css">
@font-face {
	font-family: 'IBM Plex Sans';
	font-weight: 100 900;
	font-style: normal;
	font-display: swap;
	/* url에 주어진 path가 상대 경로일 시 Fontaine 작동 안하는 문제 */
	src: url('@library/base/IBMPlexSansVar-Roman.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	/* hinted font: 저해상도에서의 가독성 우선 */
	src: url('@library/base/IBMPlexSansKR-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 400; /* Text (일반적으로 Regular와 동일한 굵기로 사용) */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Thin.woff2') format('woff2');
}
@font-face {
	/* 다국어 폰트에는 italic이 없어서, 만약 라틴 알파벳의 italic이 적용되면 뒤의 fallback font에서 italic이 적용되도록 뒤에 추가함. 안그러면 italic을 synthetic하게 만들거고 그걸 방지하기 위해서임. */
	font-family: 'IBM Plex Sans KR';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Math';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMath.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 700; /* Bold Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-BoldItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 200; /* ExtraLight Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ExtraLightItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 300; /* Light Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-LightItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 500; /* Medium Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-MediumItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Regular.woff2') format('woff2');
}
/* IBM Plex Mono의 Regular Italic 폰트가 없음 */
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 600; /* SemiBold Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-SemiBoldItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Text Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-TextItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 100; /* Thin Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ThinItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 100 900;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
</file>

<file path="libraries/base/src/fontStyle.css">
/* font-family가 있는 파일에 @font-face가 있어야 fontaine이 제대로 작동하는듯해서 여기 둠 */
@font-face {
	font-family: 'IBM Plex Sans';
	font-weight: 100 700;
	font-style: normal;
	font-display: swap;
	/* url에 주어진 path가 상대 경로일 시 Fontaine 작동 안하는 문제 */
	src: url('@library/base/IBMPlexSansVar-Roman.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	/* hinted font: 저해상도에서의 가독성 우선 */
	src: url('@library/base/IBMPlexSansKR-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 400; /* Text (일반적으로 Regular와 동일한 굵기로 사용) */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans KR';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansKR-Thin.woff2') format('woff2');
}
@font-face {
	/* 다국어 폰트에는 italic이 없어서, 만약 라틴 알파벳의 italic이 적용되면 뒤의 fallback font에서 italic이 적용되도록 뒤에 추가함. 안그러면 italic을 synthetic하게 만들거고 그걸 방지하기 위해서임. */
	font-family: 'IBM Plex Sans KR';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThaiLooped-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai Looped';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Math';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMath.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansArabic-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Arabic';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansDevanagari-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Devanagari';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansHebrew-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Hebrew';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansJP-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans JP';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 700; /* Bold Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-BoldItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 200; /* ExtraLight Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ExtraLightItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 300; /* Light Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-LightItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 500; /* Medium Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-MediumItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Regular.woff2') format('woff2');
}
/* IBM Plex Mono의 Regular Italic 폰트가 없음 */
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 600; /* SemiBold Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-SemiBoldItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 400; /* Text Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-TextItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Mono';
	font-weight: 100; /* Thin Italic */
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexMono-ThinItalic.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansSC-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans SC';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansTC-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans TC';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 700; /* Bold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Bold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 200; /* ExtraLight */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-ExtraLight.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 300; /* Light */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Light.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 500; /* Medium */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Medium.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 400; /* Regular */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Regular.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 600; /* SemiBold */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-SemiBold.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 400; /* Text */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Text.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 100; /* Thin */
	font-style: normal;
	font-display: swap;
	src: url('@library/base/IBMPlexSansThai-Thin.woff2') format('woff2');
}
@font-face {
	font-family: 'IBM Plex Sans Thai';
	font-weight: 100 700;
	font-style: italic;
	font-display: swap;
	src: url('@library/base/IBMPlexSansVar-Italic.woff2') format('woff2-variations');
}
html,
.english {
	font-family: 'IBM Plex Sans';
	font-feature-settings: 'ss02';
	font-variant-numeric: slashed-zero;
}
/* Arabic */
html[lang^='ar'] {
	font-family: 'IBM Plex Sans Arabic';
}
/* Chinese Simplified */
html[lang^='zh'] {
	font-family: 'IBM Plex Sans SC';
}
/* Chinese Traditional */
html[lang='zh-tw'],
html[lang='zh-hk'],
html[lang='zh-Hant'],
html[lang='zh-TW'],
html[lang='zh-HK'],
html[lang='zh-tTW'] {
	font-family: 'IBM Plex Sans TC';
}
/* Hebrew */
html[lang='he'] {
	font-family: 'IBM Plex Sans Hebrew';
}
/* Hindi and other Devanagari-based languages */
html[lang='hi'],
html[lang='sa'],
html[lang='ne'] {
	font-family: 'IBM Plex Sans Devanagari';
}
/* Japanese */
html[lang='ja'] {
	font-family: 'IBM Plex Sans JP';
}
/* Korean */
html[lang='ko'],
html[lang='ko-kr'],
html[lang='ko-kp'] {
	font-family: 'IBM Plex Sans KR';
}
/* Thai */
html[lang='th'] {
	font-family: 'IBM Plex Sans Thai';
}
code,
kbd,
samp,
pre {
	font-family: 'IBM Plex Mono';
}
</file>

<file path="libraries/base/src/hooks.client.ts">
import * as Sentry from '@sentry/sveltekit'
const isDeployEnv =
	process.env.CF_PAGES_BRANCH === 'main' || process.env.CF_PAGES_BRANCH === 'production'
Sentry.init({
	dsn: 'https://f92c54aa251145c5a82fe3f56d688c24@o4508958888034304.ingest.us.sentry.io/4508958894129152',
	tracesSampleRate: isDeployEnv ? 0.1 : 1,
	integrations: [],
	replaysSessionSampleRate: isDeployEnv ? 0.1 : 0,
	replaysOnErrorSampleRate: 1.0,
})
import('@sentry/sveltekit')
	// eslint-disable-next-line github/no-then
	.then((lazyLoadedSentry) => {
		Sentry.addIntegration(
			lazyLoadedSentry.replayIntegration({
				maskAllText: true,
				blockAllMedia: true,
			}),
		)
		Sentry.addIntegration(lazyLoadedSentry.replayCanvasIntegration())
	})
	// eslint-disable-next-line github/no-then
	.catch((error) => {
		console.error('Error loading Sentry:', error)
	})
const myErrorHandler = ({ error, event }) => {
	console.error('클라이언트 측에서 오류 발생:', error, event)
}
export const handleError = Sentry.handleErrorWithSentry(myErrorHandler)
// or alternatively, if you don't have a custom error handler:
// export const handleError = handleErrorWithSentry();
</file>

<file path="libraries/base/src/hooks.server.ts">
import { paraglideMiddleware } from '@library/paraglide/server.js'
import { handleErrorWithSentry, initCloudflareSentryHandle, sentryHandle } from '@sentry/sveltekit'
import type { Handle } from '@sveltejs/kit'
import { sequence } from '@sveltejs/kit/hooks'
const myErrorHandler = ({ error, event }) => {
	console.error('서버 측에서 오류 발생:', error, event)
}
export const handleError = handleErrorWithSentry(myErrorHandler)
const paraglideHandle: Handle = ({ event, resolve }) =>
	paraglideMiddleware(event.request, ({ locale }) => {
		return resolve(event, {
			transformPageChunk: ({ html }) => html.replace('%lang%', locale),
		})
	})
const isDeployEnv =
	process.env.CF_PAGES_BRANCH === 'main' || process.env.CF_PAGES_BRANCH === 'production'
export const handle = sequence(
	initCloudflareSentryHandle({
		dsn: 'https://f92c54aa251145c5a82fe3f56d688c24@o4508958888034304.ingest.us.sentry.io/4508958894129152',
		tracesSampleRate: isDeployEnv ? 0.1 : 1,
	}),
	sentryHandle(),
	paraglideHandle,
)
</file>

<file path="libraries/base/src/hooks.ts">
import { deLocalizeUrl } from '@library/paraglide/runtime.js'
import type { Reroute } from '@sveltejs/kit'
export const reroute: Reroute = (request) => {
	return deLocalizeUrl(request.url).pathname
}
</file>

<file path="libraries/base/src/routes/layout.svelte">
<script>
import '../base.css'
import { partytownSnippet } from '@qwik.dev/partytown/integration'
import * as Sentry from '@sentry/sveltekit'
import { init } from '../base'
init()
const { appName, children } = $props()
Sentry.setTag('App Name', appName)
</script>
<svelte:head>
	<!-- eslint-disable-next-line  -->
	<script>
	// Forward the necessary functions to the web worker layer
	partytown = {
		forward: [],
	}
	</script>
	<!-- eslint-disable-next-line  -->
	{@html '<script>' + partytownSnippet() + '</script>'}
</svelte:head>
<div>
	{@render children()}
	<div id="Top_Layout_Check"></div>
</div>
</file>

<file path="libraries/base/src/tailwind.css">
@import url('tailwindcss');
@import url('./daisyUI.css');
@plugin 'tailwindcss-animate';
@source '../../../apps/*/src/**/*.{html,js,ts,svelte,mdx}';
@source '../../../libraries/*/src/**/*.{html,js,ts,svelte,mdx}';
@source '../../../storybook/src/**/*.{html,js,ts,svelte,mdx}';
/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.
  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
	*,
	::after,
	::before,
	::backdrop,
	::file-selector-button {
		border-color: var(--gray-2, currentColor);
	}
}
:root {
	--radius: var(--radius-2);
}
/* Shadcn variables 덮어쓰기 Or 확장 */
:root {
	--background: hsl(0deg 0% 100%); /* white */
	--foreground: hsl(210deg 40% 2%); /* gray-12 */
	--muted: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--muted-foreground: hsl(228deg 100% 86.5%); /* indigo-2 */
	--popover: hsl(0deg 0% 100%); /* white */
	--popover-foreground: hsl(210deg 40% 2%); /* gray-12 */
	--card: hsl(0deg 0% 100%); /* white */
	--card-foreground: hsl(210deg 40% 2%); /* gray-12 */
	--border: hsl(223deg 100% 96.5%); /* indigo-0 */
	--input: hsl(223deg 100% 96.5%); /* indigo-0 */
	--primary: hsl(214deg 13.7% 10%); /* gray-10 */
	--primary-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--primary-content: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--secondary: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--secondary-foreground: hsl(214deg 13.7% 10%); /* gray-10 */
	--secondary-content: hsl(214deg 13.7% 10%); /* gray-10 */
	--accent: var(--gray-4);
	--accent-foreground: var(--gray-10);
	--accent-content: var(--gray-10);
	--destructive: hsl(0deg 73.8% 53.5%); /* red-8 */
	--destructive-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--destructive-content: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--ring: hsl(210deg 40% 2%); /* gray-12 */
	--sidebar-background: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--sidebar-foreground: hsl(210deg 10.3% 22.7%); /* gray-8 */
	--sidebar-primary: hsl(214deg 13.7% 10%); /* gray-10 */
	--sidebar-primary-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--sidebar-primary-content: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--sidebar-accent: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--sidebar-accent-foreground: hsl(214deg 13.7% 10%); /* gray-10 */
	--sidebar-accent-content: hsl(214deg 13.7% 10%); /* gray-10 */
	--sidebar-border: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--sidebar-ring: hsl(228deg 80.9% 59%); /* indigo-7 */
}
.dark {
	--background: hsl(210deg 40% 2%); /* gray-12 */
	--foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--muted: hsl(210deg 10.3% 22.7%); /* gray-8 */
	--muted-foreground: hsl(228deg 100% 78.4%); /* indigo-3 */
	--popover: hsl(210deg 40% 2%); /* gray-12 */
	--popover-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--card: hsl(210deg 40% 2%); /* gray-12 */
	--card-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--border: hsl(210deg 10.3% 22.7%); /* gray-8 */
	--input: hsl(210deg 10.3% 22.7%); /* gray-8 */
	--primary: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--primary-foreground: hsl(214deg 13.7% 10%); /* gray-10 */
	--primary-content: hsl(214deg 13.7% 10%); /* gray-10 */
	--secondary: hsl(210deg 10.3% 22.7%); /* gray-8 */
	--secondary-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--secondary-content: hsl(210deg 16.7% 97.6%); /* gray-0 */
	/* --accent: hsl(228deg 80.9% 59%); indigo-7
	--accent-foreground: hsl(210deg 16.7% 97.6%); gray-0
	--accent-content: hsl(210deg 16.7% 97.6%); gray-0 */
	--destructive: hsl(0deg 65.6% 29.6%); /* red-12 */
	--destructive-foreground: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--destructive-content: hsl(210deg 16.7% 97.6%); /* gray-0 */
	--ring: hsl(210deg 14% 83.1%); /* gray-4 */
	--sidebar-background: hsl(214deg 13.7% 10%); /* gray-10 */
	--sidebar-foreground: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--sidebar-primary: hsl(230deg 57.3% 49.6%); /* indigo-9 */
	--sidebar-primary-foreground: hsl(0deg 0%) 100%; /* white */
	--sidebar-primary-content: hsl(0deg 0%) 100%; /* white */
	--sidebar-accent: hsl(210deg 10.8% 14.5%); /* gray-9 */
	--sidebar-accent-foreground: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--sidebar-accent-content: hsl(210deg 16.7% 95.3%); /* gray-1 */
	--sidebar-border: hsl(210deg 10.8% 14.5%); /* gray-9 */
	--sidebar-ring: hsl(228deg 80.9% 59%); /* indigo-7 */
}
@theme {
	--color-border: var(--border);
	--color-input: var(--input);
	--color-ring: var(--ring);
	--color-background: var(--background);
	--color-foreground: var(--foreground);
	--color-primary: var(--primary);
	--color-primary-foreground: var(--primary-foreground);
	--color-primary-content: var(--primary-content);
	--color-secondary: var(--secondary);
	--color-secondary-foreground: var(--secondary-foreground);
	--color-secondary-content: var(--secondary-content);
	--color-destructive: var(--destructive);
	--color-destructive-foreground: var(--destructive-foreground);
	--color-destructive-content: var(--destructive-content);
	--color-muted: var(--muted);
	--color-muted-foreground: var(--muted-foreground);
	--color-accent: var(--accent);
	--color-accent-foreground: var(--accent-foreground);
	--color-accent-content: var(--accent-content);
	--color-popover: var(--popover);
	--color-popover-foreground: var(--popover-foreground);
	--color-card: var(--card);
	--color-card-foreground: var(--card-foreground) / <alpha-value>;
	/* stylelint-disable-next-line custom-property-pattern */
	--color-sidebar-DEFAULT: var(--sidebar-background);
	--color-sidebar-foreground: var(--sidebar-foreground);
	--color-sidebar-primary: var(--sidebar-primary);
	--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
	--color-sidebar-primary-content: var(--sidebar-primary-content);
	--color-sidebar-accent: var(--sidebar-accent);
	--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
	--color-sidebar-accent-content: var(--sidebar-accent-content);
	--color-sidebar-border: var(--sidebar-border);
	--color-sidebar-ring: var(--sidebar-ring);
	--radius-xl: var(--radius-4);
	--radius-lg: var(--radius-3);
	--radius-md: var(--radius-2);
	--radius-sm: var(--radius-1);
	--animate-accordion-down: accordion-down 0.2s ease-out;
	--animate-accordion-up: accordion-up 0.2s ease-out;
	--animate-caret-blink: caret-blink 1.25s ease-out infinite;
	@keyframes accordion-down {
		from {
			block-size: 0;
		}
		to {
			block-size: var(--bits-accordion-content-height);
		}
	}
	@keyframes accordion-up {
		from {
			block-size: var(--bits-accordion-content-height);
		}
		to {
			block-size: 0;
		}
	}
	@keyframes caret-blink {
		0%,
		70%,
		100% {
			opacity: 1;
		}
		20%,
		50% {
			opacity: 0;
		}
	}
}
@utility container {
	margin-inline: auto;
	padding-inline: 2rem;
}
@layer base {
	* {
		/* stylelint-disable-next-line at-rule-no-deprecated */
		@apply border-border;
	}
	body {
		/* stylelint-disable-next-line at-rule-no-deprecated */
		@apply bg-background text-foreground;
	}
}
</file>

<file path="libraries/base/svelte.config.js">
import adapter from '@sveltejs/adapter-cloudflare'
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'
const ifNotProduction = process.env.NODE_ENV !== 'production'
const config = {
	compilerOptions: {
		accessors: ifNotProduction, // 타입 접근성 향상
		enableSourcemap: ifNotProduction, // 타입 추적 개선
	},
	kit: {
		// adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://kit.svelte.dev/docs/adapters for more information about adapters.
		adapter: adapter(),
		alias: {
			$shadcn: '../../libraries/ui/src/shadcn',
			'$shadcn/*': '../../libraries/ui/src/shadcn/*',
		},
	},
	preprocess: vitePreprocess(),
}
export default config
</file>

<file path="libraries/base/tsconfig.json">
{
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"isolatedModules": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"noEmit": true,
		"noImplicitAny": false,
		"paths": {
			"$shadcn": ["../../libraries/ui/src/shadcn"],
			"$shadcn/*": ["../../libraries/ui/src/shadcn/*"]
		},
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": false,
		"strictNullChecks": true,
		"target": "esnext",
		"verbatimModuleSyntax": true
	},
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"node_modules/**",
		"src/service-worker/**",
		"static/**"
	],
	"include": [
		"src/**/*",
		"e2e/**/*",
		"*.js",
		"*.ts",
		"*.svelte",
		"*.cjs",
		"*.mjs",
		"**/*.js",
		"**/*.ts",
		"**/*.svelte",
		"**/*.cjs",
		"**/*.mjs"
	]
}
</file>

<file path="libraries/base/vite.config.js">
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import { partytownVite } from '@qwik.dev/partytown/utils'
import tailwindcss from '@tailwindcss/vite'
import { FontaineTransform } from 'fontaine'
import tsconfigPaths from 'vite-tsconfig-paths'
import { configDefaults, defineConfig, mergeConfig } from 'vitest/config'
// Simulate __dirname in ESM
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
let currentEnv
if (process.env.CF_PAGES_BRANCH === 'main' || process.env.CF_PAGES_BRANCH === 'production') {
	currentEnv = 'DEPLOYED'
} else if (process.env.GITHUB_ACTIONS) {
	currentEnv = 'CI'
} else {
	currentEnv = process.env.NODE_ENV
}
const baseConfig = defineConfig({
	build: {
		sourcemap: currentEnv === 'development' ? true : 'hidden', // Sentry 설정에서 sourcemap 파일 지움
		cssMinify: 'lightningcss',
	},
	css: {
		devSourcemap: true,
	},
	plugins: [
		// @ts-ignore
		tsconfigPaths(),
		// @ts-ignore
		tailwindcss(),
		partytownVite({}),
		// @ts-ignore
		FontaineTransform.vite({
			fallbacks: ['BlinkMacSystemFont', 'Segoe UI', 'Helvetica Neue', 'Noto Sans', 'Arial'],
			resolvePath(id) {
				// 여기서 id는 @font-face에서 url에 주어진 string. 거기서부터 파일 경로를 찾아가야 하기 때문에 package.json의 exports에서 이름을 파일 경로로 변환할 수 있는 것들로 했음
				const absolutePath = path.join(__dirname, 'static', 'fonts', id.replace(/^.+\//, ''))
				return absolutePath
			},
		}),
	],
	server: {
		fs: {
			allow: ['.', path.resolve(__dirname, './static')],
		},
	},
	test: {
		include: ['src/**/*.{test,spec}.{js,ts}'],
		reporters: process.env.GITHUB_ACTIONS ? ['junit', 'github-actions'] : 'default',
		outputFile: './vitest-report/result.xml',
	},
})
const defaultConfig = mergeConfig(configDefaults, baseConfig)
// @ts-ignore
export { currentEnv, defaultConfig }
export default defaultConfig
</file>

<file path="libraries/helpers/package.json">
{
	"name": "@library/helpers",
	"version": "1.0.0",
	"description": "",
	"license": "ISC",
	"author": "",
	"type": "module",
	"main": "index.js",
	"scripts": {
		"depCheck": "npx depcheck",
		"eslint": "eslint .",
		"eslint-fix": "eslint --fix . || true",
		"format": "prettier . --write --ignore-unknown --ignore-path ../../.prettierignore",
		"test:unit": "vitest run"
	},
	"dependencies": {
		"mutative": "^1.1.0",
		"ramda": "^0.30.1",
		"random-js": "^2.1.0"
	},
	"devDependencies": {
		"@library/base": "workspace:*"
	},
	"keywords": [],
	"exports": {
		"./monads": "./src/monads.js",
		"./mutative": "./src/mutative.js",
		"./random_engine": "./src/random_engine.js",
		"./R": "./src/R.js"
	}
}
</file>

<file path="libraries/helpers/src/base.test.js">
import { runTest } from '@library/base/baseTest.js'
runTest()
</file>

<file path="libraries/helpers/src/monads.js">
// @ts-nocheck
import { inspect } from 'node:util'
import { compose, curry, identity } from './R'
const createCompose = curry(
	(F, G) =>
		class Compose {
			constructor(x) {
				this.$value = x
			}
			// ----- Pointed (Compose F G)
			static of(x) {
				return new Compose(F(G(x)))
			}
			// ----- Applicative (Compose F G)
			ap(f) {
				return f.map(this.$value)
			}
			[inspect.custom]() {
				return `Compose(${inspect(this.$value)})`
			}
			// ----- Functor (Compose F G)
			map(function_) {
				return new Compose(this.$value.map((x) => x.map(function_)))
			}
		},
)
class Identity {
	constructor(x) {
		this.$value = x
	}
	// ----- Pointed Identity
	static of(x) {
		return new Identity(x)
	}
	// ----- Applicative Identity
	ap(f) {
		return f.map(this.$value)
	}
	// ----- Monad Identity
	chain(function_) {
		return this.map(function_).join(',')
	}
	[inspect.custom]() {
		return `Identity(${inspect(this.$value)})`
	}
	join() {
		return this.$value
	}
	// ----- Functor Identity
	map(function_) {
		return Identity.of(function_(this.$value))
	}
	// ----- Traversable Identity
	sequence(of) {
		return this.traverse(of, identity)
	}
	traverse(of, function_) {
		return function_(this.$value).map(Identity.of)
	}
}
class IO {
	constructor(function_) {
		this.unsafePerformIO = function_
	}
	// ----- Pointed IO
	static of(x) {
		return new IO(() => x)
	}
	// ----- Applicative IO
	ap(f) {
		return this.chain((function_) => f.map(function_))
	}
	// ----- Monad IO
	chain(function_) {
		return this.map(function_).join(',')
	}
	[inspect.custom]() {
		return 'IO(?)'
	}
	join() {
		return new IO(() => this.unsafePerformIO().unsafePerformIO())
	}
	// ----- Functor IO
	map(function_) {
		return new IO(compose(function_, this.unsafePerformIO))
	}
}
class List {
	constructor(xs) {
		this.$value = xs
	}
	// ----- Pointed List
	static of(x) {
		return new List([x])
	}
	concat(x) {
		return new List(this.$value.concat(x))
	}
	[inspect.custom]() {
		return `List(${inspect(this.$value)})`
	}
	// ----- Functor List
	map(function_) {
		return new List(this.$value.map(function_))
	}
	// ----- Traversable List
	sequence(of) {
		return this.traverse(of, identity)
	}
	traverse(of, function_) {
		return this.$value.reduce(
			(f, a) =>
				function_(a)
					.map((b) => (bs) => bs.concat(b))
					.ap(f),
			of(new List([])),
		)
	}
}
/**
 * Maybe monad represents an optional value that either holds a value of type T or nothing.
 *
 * @template T - The type of the inner value that Maybe holds.
 */
class Maybe {
	get isJust() {
		return !this.isNothing
	}
	get isNothing() {
		return this.$value === null || this.$value === undefined
	}
	constructor(x) {
		this.$value = x
	}
	// ----- Pointed Maybe
	static of(x) {
		return new Maybe(x)
	}
	// ----- Applicative Maybe
	ap(f) {
		return this.isNothing ? this : f.map(this.$value)
	}
	// ----- Monad Maybe
	chain(function_) {
		return this.map(function_).join(',')
	}
	getOrElse(defaultValue) {
		return this.isNothing ? defaultValue : this.$value
	}
	getValue() {
		return this.$value
	}
	[inspect.custom]() {
		return this.isNothing ? 'Nothing' : `Just(${inspect(this.$value)})`
	}
	join() {
		return this.isNothing ? this : this.$value
	}
	// ----- Functor Maybe
	/**
	 * Applies a function to the inner value of Maybe, if it exists.
	 *
	 * @template U
	 * @param {function(T): U} function_ - A function to apply to the inner value.
	 * @returns {Maybe<U>} - A new Maybe instance with the transformed value.
	 */
	map(function_) {
		return this.isNothing ? this : Maybe.of(function_(this.$value))
	}
	// ----- Traversable Maybe
	sequence(of) {
		return this.traverse(of, identity)
	}
	traverse(of, function_) {
		return this.isNothing ? of(this) : function_(this.$value).map(Maybe.of)
	}
}
class Task {
	constructor(fork) {
		this.fork = fork
	}
	// ----- Pointed (Task a)
	static of(x) {
		return new Task((_, resolve) => resolve(x))
	}
	static rejected(x) {
		return new Task((reject, _) => reject(x))
	}
	// ----- Applicative (Task a)
	ap(f) {
		return this.chain((function_) => f.map(function_))
	}
	// ----- Monad (Task a)
	chain(function_) {
		return new Task((reject, resolve) =>
			this.fork(reject, (x) => function_(x).fork(reject, resolve)),
		)
	}
	[inspect.custom]() {
		return 'Task(?)'
	}
	join() {
		return this.chain(identity)
	}
	// ----- Functor (Task a)
	map(function_) {
		return new Task((reject, resolve) => this.fork(reject, compose(resolve, function_)))
	}
}
export { createCompose, Identity, IO, List, Map, Maybe, Task }
export { default as Validator } from './validator.js'
</file>

<file path="libraries/helpers/src/mutative.js">
import { makeCreator } from 'mutative'
const create = makeCreator({
	strict: process.env.NODE_ENV !== 'production',
})
export { create }
export { unsafe } from 'mutative'
</file>

<file path="libraries/helpers/src/R.js">
export * as R from 'ramda'
</file>

<file path="libraries/helpers/src/random_engine.js">
import { nodeCrypto, Random, shuffle } from 'random-js'
const random = new Random(nodeCrypto)
const shuffleArray = (array) => shuffle(nodeCrypto, array)
export { random, shuffleArray }
</file>

<file path="libraries/helpers/src/validator.js">
import { inspect } from 'node:util'
import { R } from './R'
/**
 * @typedef {Object} Condition
 * @property {string} error - 오류 메시지
 * @property {(config: Object) => boolean} function - 조건 함수
 */
const getErrors = R.curry(
	/**
	 * 조건 배열에 대한 오류 배열을 반환하는 함수
	 *
	 * @function getErrors
	 * @param {Object} config - 조건 배열에 대한 config
	 * @param {Condition[]} conditions - 조건 배열
	 * @returns {string[]} - 오류 배열
	 */
	(config, conditions) =>
		R.pipe(
			R.reject((condition) => condition.function(config)),
			R.map((condition) => condition.error),
		)(conditions),
)
/** @template T - The type of the inner value that Validator holds. */
export default class Validator {
	/**
	 * @param {Object} config - 설정 객체
	 * @param {string[]} [errors=[]] - 오류 배열. Default is `[]`
	 */
	constructor(config, errors = []) {
		/** @type {Object} */
		this.config = config
		/** @type {string[]} */
		this.errors = errors
	}
	/**
	 * @param {string[]} errors - 오류 배열
	 * @returns {Validator}
	 */
	static fail(errors) {
		return new Validator(undefined, errors)
	}
	// ----- Pointed Validator
	/**
	 * @param {Object} config - 설정 객체
	 * @returns {Validator}
	 */
	static of(config) {
		return new Validator(config)
	}
	/**
	 * @param {string} error - 오류 메시지
	 * @returns {Validator}
	 */
	addError(error) {
		if (this.isNothing()) {
			return this
		}
		return new Validator(this.config, R.append(error, this.errors))
	}
	/**
	 * @param {string[]} errors - 오류 배열
	 * @returns {Validator}
	 */
	addErrors(errors) {
		if (this.isNothing()) {
			return this
		}
		return new Validator(this.config, R.concat(this.errors, errors))
	}
	// ----- Applicative Validator
	/**
	 * @param {Validator} validator - Validator 인스턴스
	 * @returns {Validator}
	 */
	ap(validator) {
		if (this.isNothing()) {
			return this
		}
		// 여기서 this.config는 function: (config, errors) -> { config, errors }
		return validator.map(this.config)
	}
	/** @returns {Object} - 설정 객체 */
	getConfig() {
		return this.config
	}
	/** @returns {string[]} - 오류 배열 */
	getErrors() {
		return this.errors
	}
	/** @returns {{ config: Object; errors: string[] }} - 내부 값 객체 */
	getInnerValue() {
		return { config: this.config, errors: this.errors }
	}
	/** @returns {string} - 커스텀 인스펙트 결과 */
	[inspect.custom]() {
		return this.isNothing() ? `Invalid(${inspect(this.errors)})` : `Valid(${inspect(this.config)})`
	}
	/** @returns {boolean} - 설정 객체가 null 또는 undefined인지 여부 */
	isNothing() {
		return this.config === null || this.config === undefined
	}
	/**
	 * Mutable Method
	 *
	 * @param {Condition[]} newConditions - 새로운 조건 배열
	 * @returns {boolean} - 전체 조건 배열이 유효한지 여부
	 */
	isValidWith(newConditions) {
		// @ts-ignore
		// file deepcode ignore WrongNumberOfArguments: Curry
		this.errors = R.concat(this.errors, getErrors(this.config)(newConditions))
		return this.errors.length === 0
	}
	/**
	 * @param {(config: Object, errors: string[]) => [Object, string[]]} function_ - 매핑 함수
	 * @returns {Validator}
	 */
	map(function_) {
		if (this.isNothing()) {
			return this
		}
		return new Validator(...function_(this.config, this.errors))
	}
	/**
	 * @param {(config: Object) => Object} function_ - 설정 매핑 함수
	 * @returns {Validator}
	 */
	mapConfig(function_) {
		if (this.isNothing()) {
			return this
		}
		return new Validator(function_(this.config), this.errors)
	}
	/**
	 * @param {(errors: string[]) => string[]} function_ - 오류 매핑 함수
	 * @returns {Validator}
	 */
	mapErrors(function_) {
		if (this.isNothing()) {
			return this
		}
		return new Validator(this.config, function_(this.errors))
	}
	/**
	 * @param {Validator | Validator[]} validators - Validator 인스턴스 또는 배열
	 * @returns {Validator}
	 */
	mergeErrors(validators) {
		// X mutable
		this.errors =
			Array.isArray(validators) ?
				R.pipe(
					R.map((validator) => validator.errors),
					R.flatten,
					R.concat(this.errors),
				)(validators)
			:	R.concat(this.errors, validators.errors)
		return this
	}
	// ----- Traversable Validator
	/**
	 * @param {Function} of - Applicative 함수
	 * @returns {Validator}
	 */
	sequence(of) {
		return this.traverse(of, R.identity)
	}
	/**
	 * @param {Function} of - Applicative 함수
	 * @param {Function} function_ - 매핑 함수
	 * @returns {Validator}
	 */
	traverse(of, function_) {
		if (this.isNothing()) {
			return of(this)
		}
		return function_(this.config).map(Validator.of)
	}
}
// Tests
const config1 = Validator.fail(['1'])
const config2 = Validator.fail(['2'])
const config3 = Validator.fail(['3'])
config1.mergeErrors([config2, config3])
console.log(config1)
// Tests
const gt0 = R.both(R.is(Number), R.gt(R.__, 0))
const conditions = {
	size: {
		error: 'size must be greater than 0',
		function: ({ size }) => gt0(size),
	},
	sizesFixed: {
		error: 'Fixed size must be greater than 0',
		function: ({ sizesFixed }) => R.all(gt0)(sizesFixed),
	},
}
Validator.of({ size: 2 }).isValidWith([conditions.size]) /* ? */
</file>

<file path="libraries/helpers/tsconfig.json">
{
	"_comments": [
		"exclude와 include는 extends 되지 않아서 따로 써줘야 함",
		"compilerOptions.paths 쓸 거면 packajs.json의 import 부분에도 작성하기"
	],
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"node_modules/**",
		"src/service-worker/**",
		"static/**"
	],
	"extends": ["@library/base/tsconfig.json"],
	"include": [
		"src/**/*",
		"*.js",
		"*.ts",
		"*.svelte",
		"*.cjs",
		"*.mjs",
		"**/*.js",
		"**/*.ts",
		"**/*.svelte",
		"**/*.cjs",
		"**/*.mjs"
	]
}
</file>

<file path="libraries/paraglide/messages/en.json">
{
	"$schema": "https://inlang.com/schema/inlang-message-format",
	"antsy_aloof_barbel_read": "Icon",
	"deft_east_mouse_hope": "Hello",
	"hello_world": "Hello, {name} from en! 123",
	"tangy_late_wallaby_grip": "Welcome to SvelteKit",
	"welcome": "Welcome to SvelteKit"
}
</file>

<file path="libraries/paraglide/messages/ko.json">
{
	"$schema": "https://inlang.com/schema/inlang-message-format",
	"antsy_aloof_barbel_read": "아이콘",
	"deft_east_mouse_hope": "안녕하세요",
	"hello_world": "Hello, {name} from ko!",
	"tangy_late_wallaby_grip": "Welcome to SvelteKit",
	"welcome": "SvelteKit에 오신 것을 환영합니다"
}
</file>

<file path="libraries/paraglide/package.json">
{
	"name": "@library/paraglide",
	"version": "1.0.0",
	"description": "",
	"license": "ISC",
	"author": "",
	"type": "module",
	"main": "index.js",
	"scripts": {
		"paraglide-compile": "npx @inlang/paraglide-js compile --project ./project.inlang --outdir ./paraglide-output",
		"translate": "npx @inlang/cli machine translate --project ./project.inlang"
	},
	"keywords": [],
	"exports": {
		"./messages.js": "./paraglide-output/messages.js",
		"./paraglide_outdir": "./paraglide-output",
		"./paraglide_project": "./project.inlang",
		"./runtime.js": "./paraglide-output/runtime.js",
		"./server.js": "./paraglide-output/server.js"
	}
}
</file>

<file path="libraries/paraglide/project.inlang/.gitignore">
cache
</file>

<file path="libraries/paraglide/project.inlang/project_id">
1eeecf35644ef427047fc70d38d3d073d542c21e5b4e97b6e072d83b060a0d75
</file>

<file path="libraries/paraglide/project.inlang/settings.json">
{
	"$schema": "https://inlang.com/schema/project-settings",
	"languageTags": ["en", "ko"],
	"modules": [
		"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-empty-pattern@1/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-identical-pattern@1/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-missing-translation@1/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-without-source@1/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/message-lint-rule-valid-js-identifier@1/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/plugin-message-format@2/dist/index.js",
		"https://cdn.jsdelivr.net/npm/@inlang/plugin-m-function-matcher@0/dist/index.js"
	],
	"plugin.inlang.messageFormat": {
		"pathPattern": "./messages/{languageTag}.json"
	},
	"sourceLanguageTag": "en"
}
</file>

<file path="libraries/ui/components.json">
{
	"$schema": "https://next.shadcn-svelte.com/schema.json",
	"aliases": {
		"components": "$shadcn/components",
		"utils": "$shadcn/utils",
		"ui": "$shadcn/components/ui",
		"hooks": "$shadcn/hooks"
	},
	"registry": "https://next.shadcn-svelte.com/registry",
	"style": "default",
	"tailwind": {
		"config": "tailwind.config.ts",
		"css": "src\\app.css",
		"baseColor": "slate"
	},
	"typescript": true
}
</file>

<file path="libraries/ui/package.json">
{
	"name": "@library/ui",
	"version": "0.0.1",
	"type": "module",
	"files": [
		"dist",
		"!dist/**/*.spec.*",
		"!dist/**/*.test.*"
	],
	"scripts": {
		"check": "svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "pnpm run check -- --watch",
		"depCheck": "npx depcheck",
		"eslint": "eslint . --ignore-pattern ./src/shadcn/components/**",
		"eslint-all": "eslint .",
		"eslint-fix": "eslint --fix . || true",
		"format": "prettier . --write --ignore-unknown --ignore-path ../../.prettierignore",
		"shadcn": "pnpm dlx shadcn-svelte@next add",
		"stylelint": "stylelint --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore",
		"stylelint-fix": "stylelint --fix --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore || true",
		"test:unit": "vitest run"
	},
	"sideEffects": [],
	"types": "./dist/index.d.ts",
	"dependencies": {
		"@formkit/auto-animate": "^0.8.2",
		"@internationalized/date": "^3.7.0",
		"@library/base": "workspace:*",
		"@tanstack/table-core": "^8.21.2",
		"bits-ui": "1.3.15",
		"clsx": "^2.1.1",
		"embla-carousel-svelte": "^8.5.2",
		"formsnap": "^2.0.0",
		"lucide-svelte": "^0.483.0",
		"mode-watcher": "^0.5.1",
		"paneforge": "1.0.0-next.2",
		"svelte-sonner": "^0.3.28",
		"sveltekit-superforms": "^2.24.0",
		"tailwind-merge": "^3.1.0",
		"tailwind-variants": "^1.0.0",
		"vaul-svelte": "1.0.0-next.7",
		"zod": "^3.24.2"
	},
	"exports": {
		"./accordion": "./src/shadcn/components/ui/accordion/index.ts",
		"./alert": "./src/shadcn/components/ui/alert/index.ts",
		"./alert-dialog": "./src/shadcn/components/ui/alert-dialog/index.ts",
		"./aspect-ratio": "./src/shadcn/components/ui/aspect-ratio/index.ts",
		"./avatar": "./src/shadcn/components/ui/avatar/index.ts",
		"./badge": "./src/shadcn/components/ui/badge/index.ts",
		"./breadcrumb": "./src/shadcn/components/ui/breadcrumb/index.ts",
		"./button_daisy.svelte": "./src/daisyui/button.svelte",
		"./button_shadcn": "./src/shadcn/components/ui/button/index.ts",
		"./calendar": "./src/shadcn/components/ui/calendar/index.ts",
		"./card": "./src/shadcn/components/ui/card/index.ts",
		"./carousel": "./src/shadcn/components/ui/carousel/index.ts",
		"./checkbox": "./src/shadcn/components/ui/checkbox/index.ts",
		"./collapsible": "./src/shadcn/components/ui/collapsible/index.ts",
		"./combobox": "./src/shadcn/components/ui/combobox/index.ts",
		"./command": "./src/shadcn/components/ui/command/index.ts",
		"./context-menu": "./src/shadcn/components/ui/context-menu/index.ts",
		"./data-table": "./src/shadcn/components/ui/data-table/index.ts",
		"./date-picker": "./src/shadcn/components/ui/date-picker/index.ts",
		"./dialog": "./src/shadcn/components/ui/dialog/index.ts",
		"./drawer": "./src/shadcn/components/ui/drawer/index.ts",
		"./dropdown-menu": "./src/shadcn/components/ui/dropdown-menu/index.ts",
		"./form": "./src/shadcn/components/ui/form/index.ts",
		"./hover-card": "./src/shadcn/components/ui/hover-card/index.ts",
		"./icon": "./src/custom/icon.svelte",
		"./input": "./src/shadcn/components/ui/input/index.ts",
		"./input-otp": "./src/shadcn/components/ui/input-otp/index.ts",
		"./label": "./src/shadcn/components/ui/label/index.ts",
		"./menubar": "./src/shadcn/components/ui/menubar/index.ts",
		"./pagination": "./src/shadcn/components/ui/pagination/index.ts",
		"./popover": "./src/shadcn/components/ui/popover/index.ts",
		"./progress": "./src/shadcn/components/ui/progress/index.ts",
		"./radio-group": "./src/shadcn/components/ui/radio-group/index.ts",
		"./range-calendar": "./src/shadcn/components/ui/range-calendar/index.ts",
		"./resizable": "./src/shadcn/components/ui/resizable/index.ts",
		"./scroll-area": "./src/shadcn/components/ui/scroll-area/index.ts",
		"./select": "./src/shadcn/components/ui/select/index.ts",
		"./separator": "./src/shadcn/components/ui/separator/index.ts",
		"./sheet": "./src/shadcn/components/ui/sheet/index.ts",
		"./sidebar": "./src/shadcn/components/ui/sidebar/index.ts",
		"./skeleton": "./src/shadcn/components/ui/skeleton/index.ts",
		"./slider": "./src/shadcn/components/ui/slider/index.ts",
		"./sonner": "./src/shadcn/components/ui/sonner/index.ts",
		"./switch": "./src/shadcn/components/ui/switch/index.ts",
		"./table": "./src/shadcn/components/ui/table/index.ts",
		"./tabs": "./src/shadcn/components/ui/tabs/index.ts",
		"./textarea": "./src/shadcn/components/ui/textarea/index.ts",
		"./toggle": "./src/shadcn/components/ui/toggle/index.ts",
		"./toggle-group": "./src/shadcn/components/ui/toggle-group/index.ts",
		"./tooltip": "./src/shadcn/components/ui/tooltip/index.ts"
	},
	"import": {
		"$shadcn": "./src/shadcn",
		"$shadcn/*": "./src/shadcn/*"
	},
	"svelte": "./dist/index.js"
}
</file>

<file path="libraries/ui/src/app.css">
@import url('@library/base/base.css');
</file>

<file path="libraries/ui/src/app.d.ts">
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}
export {}
</file>

<file path="libraries/ui/src/app.html">
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div>%sveltekit.body%</div>
	</body>
</html>
</file>

<file path="libraries/ui/src/base.test.js">
import { runTest } from '@library/base/baseTest.js'
runTest()
</file>

<file path="libraries/ui/src/custom/icon.svelte">
<script>
let { children, icon, ...restProps } = $props()
;('') // eslint-disable-line no-unused-expressions
</script>
<span class="with-icon" {...restProps}>
	<iconify-icon class="icon" {icon}></iconify-icon>
	{@render children?.()}
</span>
<style>
.icon {
	inline-size: 0.75em;
	inline-size: 1cap;
	block-size: 0.75em;
	block-size: 1cap;
	font-size: 1.125em;
}
.with-icon {
	display: inline-flex;
	align-items: baseline;
	& .icon {
		position: relative;
		/* IBM Plex Sans 기준 */
		inset-block-end: 0.125em;
		margin-inline-end: 0.5em;
	}
}
</style>
</file>

<file path="libraries/ui/src/daisyui/button.stories.svelte">
<script module>
// @ts-nocheck
import { defineMeta } from '@storybook/addon-svelte-csf'
import Button from './button.svelte'
const { Story } = defineMeta({
	component: Button,
	tags: ['autodocs'],
})
;('') // eslint-disable-line
</script>
{#snippet multiple()}
	<div style:width="calc(100% / 2)" class="boxed">
		<Button variant="primary">Primary Button</Button>
		<Button variant="secondary">Secondary Button</Button>
		<Button variant="outline">Outline Button</Button>
		<Button variant="text">Text Button</Button>
		<Button variant="accent">Accent Button</Button>
		<Button variant="info">Info Button</Button>
		<Button variant="success">Success Button</Button>
		<Button variant="warning">Warning Button</Button>
		<Button variant="error">Error Button</Button>
		<Button disabled variant="primary">Disabled Primary Button</Button>
		<Button disabled variant="secondary">Disabled Secondary Button</Button>
	</div>
{/snippet}
<!-- Todo: 여러 컴포넌트 추가하는거 storybook.mdx에 설명 추가 -->
<Story name="Bunch">
	{@render multiple()}
</Story>
<Story name="Primary">
	{#snippet children()}
		<Button variant="primary">Primary Button</Button>
	{/snippet}
</Story>
<Story name="Secondary" args={{ variant: 'secondary' }}>
	{#snippet children(args)}
		<Button {...args}>Secondary Button</Button>
	{/snippet}
</Story>
<Story name="Outline" args={{ variant: 'outline' }}>
	{#snippet children(args)}
		<Button {...args}>Outline Button</Button>
	{/snippet}
</Story>
<Story name="Text" args={{ variant: 'text' }}>
	{#snippet children(args)}
		<Button {...args}>Text Button</Button>
	{/snippet}
</Story>
<Story name="Accent" args={{ variant: 'accent' }}>
	{#snippet children(args)}
		<Button {...args}>Accent Button</Button>
	{/snippet}
</Story>
<Story name="Info" args={{ variant: 'info' }}>
	{#snippet children(args)}
		<Button {...args}>Info Button</Button>
	{/snippet}
</Story>
<Story name="Success" args={{ variant: 'success' }}>
	{#snippet children(args)}
		<Button {...args}>Success Button</Button>
	{/snippet}
</Story>
<Story name="Warning" args={{ variant: 'warning' }}>
	{#snippet children(args)}
		<Button {...args}>Warning Button</Button>
	{/snippet}
</Story>
<Story name="Error" args={{ variant: 'error' }}>
	{#snippet children(args)}
		<Button {...args}>Error Button</Button>
	{/snippet}
</Story>
<Story name="Disabled" args={{ disabled: true, variant: 'primary' }}>
	{#snippet children(args)}
		<Button {...args}>Disabled Primary Button</Button>
	{/snippet}
</Story>
<Story name="Disabled / Secondary" args={{ disabled: true, variant: 'secondary' }}>
	{#snippet children(args)}
		<Button {...args}>Disabled Secondary Button</Button>
	{/snippet}
</Story>
</file>

<file path="libraries/ui/src/daisyui/button.svelte">
<script>
/**
 * @typedef {'primary'
 * 	| 'secondary'
 * 	| 'accent'
 * 	| 'info'
 * 	| 'success'
 * 	| 'warning'
 * 	| 'error'
 * 	| 'outline'
 * 	| 'text'} variant
 * @property {string} [href]
 */
let { children, href, variant = 'primary', ...restProps } = $props()
;('') // eslint-disable-line
</script>
{#if href}
	<a class={`button-type btn btn-${variant}`} {href} role="button" type="button" {...restProps}>
		{@render children?.()}
	</a>
{:else}
	<button class={`button-type btn btn-${variant}`} type="button" {...restProps}>
		{@render children?.()}
	</button>
{/if}
<style>
.button-type {
	font-size: var(--font-size-2);
	font-weight: var(--font-weight-5);
}
.btn-outline {
	border-width: var(--border-size-2);
	background-color: transparent;
}
.btn-text {
	border: none;
	background-color: transparent;
	box-shadow: none;
}
</style>
</file>

<file path="libraries/ui/src/shadcn/components/ui/accordion/accordion-content.svelte">
<script lang="ts">
import { Accordion as AccordionPrimitive, type WithoutChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<AccordionPrimitive.ContentProps> = $props()
</script>
<AccordionPrimitive.Content
	class={cn(
		`data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden
		text-sm transition-all`,
		className,
	)}
	bind:ref
	{...restProps}
>
	<div class="pb-4 pt-0">
		{@render children?.()}
	</div>
</AccordionPrimitive.Content>
</file>

<file path="libraries/ui/src/shadcn/components/ui/accordion/accordion-item.svelte">
<script lang="ts">
import { Accordion as AccordionPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: AccordionPrimitive.ItemProps = $props()
</script>
<AccordionPrimitive.Item class={cn('border-b', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/accordion/accordion-trigger.svelte">
<script lang="ts">
import { Accordion as AccordionPrimitive, type WithoutChild } from 'bits-ui'
import ChevronDown from 'lucide-svelte/icons/chevron-down'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	level = 3,
	ref = $bindable(),
	...restProps
}: WithoutChild<AccordionPrimitive.TriggerProps> & {
	level?: AccordionPrimitive.HeaderProps['level']
} = $props()
</script>
<AccordionPrimitive.Header class="flex" {level}>
	<AccordionPrimitive.Trigger
		class={cn(
			`flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline
			[&[data-state=open]>svg]:rotate-180`,
			className,
		)}
		bind:ref
		{...restProps}
	>
		{@render children?.()}
		<ChevronDown class="size-4 shrink-0 transition-transform duration-200" />
	</AccordionPrimitive.Trigger>
</AccordionPrimitive.Header>
</file>

<file path="libraries/ui/src/shadcn/components/ui/accordion/index.ts">
import { Accordion as AccordionPrimitive } from 'bits-ui'
const { Root } = AccordionPrimitive
export {
	//
	Root as Accordion,
	Root,
}
export { default as AccordionContent, default as Content } from './accordion-content.svelte'
export { default as AccordionItem, default as Item } from './accordion-item.svelte'
export { default as AccordionTrigger, default as Trigger } from './accordion-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-action.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: AlertDialogPrimitive.ActionProps = $props()
</script>
<AlertDialogPrimitive.Action class={cn(buttonVariants(), className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-cancel.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: AlertDialogPrimitive.CancelProps = $props()
</script>
<AlertDialogPrimitive.Cancel
	class={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-content.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive, type WithoutChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
import AlertDialogOverlay from './alert-dialog-overlay.svelte'
let {
	class: className,
	portalProps,
	ref = $bindable(),
	...restProps
}: WithoutChild<AlertDialogPrimitive.ContentProps> & {
	portalProps?: AlertDialogPrimitive.PortalProps
} = $props()
</script>
<AlertDialogPrimitive.Portal {...portalProps}>
	<AlertDialogOverlay />
	<AlertDialogPrimitive.Content
		class={cn(
			`bg-background data-[state=open]:animate-in data-[state=closed]:animate-out
			data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95
			data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2
			data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2
			data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg
			translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 sm:rounded-lg`,
			className,
		)}
		bind:ref
		{...restProps}
	/>
</AlertDialogPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-description.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: AlertDialogPrimitive.DescriptionProps = $props()
</script>
<AlertDialogPrimitive.Description
	class={cn('text-muted-foreground text-sm', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-overlay.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: AlertDialogPrimitive.OverlayProps = $props()
</script>
<AlertDialogPrimitive.Overlay
	class={cn(
		`data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
		data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/alert-dialog-title.svelte">
<script lang="ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	level = 3,
	ref = $bindable(),
	...restProps
}: AlertDialogPrimitive.TitleProps = $props()
</script>
<AlertDialogPrimitive.Title
	class={cn('text-lg font-semibold', className)}
	{level}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert-dialog/index.ts">
import { AlertDialog as AlertDialogPrimitive } from 'bits-ui'
const { Root } = AlertDialogPrimitive
const { Trigger } = AlertDialogPrimitive
const { Portal } = AlertDialogPrimitive
export {
	//
	Root as AlertDialog,
	Portal as AlertDialogPortal,
	Trigger as AlertDialogTrigger,
	Portal,
	Root,
	Trigger,
}
export { default as Action, default as AlertDialogAction } from './alert-dialog-action.svelte'
export { default as AlertDialogCancel, default as Cancel } from './alert-dialog-cancel.svelte'
export { default as AlertDialogContent, default as Content } from './alert-dialog-content.svelte'
export {
	default as AlertDialogDescription,
	default as Description,
} from './alert-dialog-description.svelte'
export { default as AlertDialogFooter, default as Footer } from './alert-dialog-footer.svelte'
export { default as AlertDialogHeader, default as Header } from './alert-dialog-header.svelte'
export { default as AlertDialogOverlay, default as Overlay } from './alert-dialog-overlay.svelte'
export { default as AlertDialogTitle, default as Title } from './alert-dialog-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert/alert-description.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('text-sm [&_p]:leading-relaxed', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert/alert-title.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	level = 5,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	level?: 1 | 2 | 3 | 4 | 5 | 6
} = $props()
</script>
<div
	bind:this={ref}
	class={cn('mb-1 font-medium leading-none tracking-tight', className)}
	aria-level={level}
	role="heading"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert/alert.svelte">
<script lang="ts" module>
import { tv, type VariantProps } from 'tailwind-variants'
export const alertVariants = tv({
	base: '[&>svg]:text-foreground relative w-full rounded-lg border p-4 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7',
	defaultVariants: {
		variant: 'default',
	},
	variants: {
		variant: {
			default: 'bg-background text-foreground',
			destructive:
				'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',
		},
	},
})
export type AlertVariant = VariantProps<typeof alertVariants>['variant']
</script>
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	variant = 'default',
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	variant?: AlertVariant
} = $props()
</script>
<div bind:this={ref} class={cn(alertVariants({ variant }), className)} {...restProps} role="alert">
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/alert/index.ts">
export { default as Alert, type AlertVariant, alertVariants, default as Root } from './alert.svelte'
export { default as AlertDescription, default as Description } from './alert-description.svelte'
export { default as AlertTitle, default as Title } from './alert-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/aspect-ratio/index.ts">
import { AspectRatio as AspectRatioPrimitive } from 'bits-ui'
const { Root } = AspectRatioPrimitive
export { Root as AspectRatio, Root }
</file>

<file path="libraries/ui/src/shadcn/components/ui/avatar/avatar-fallback.svelte">
<script lang="ts">
import { Avatar as AvatarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: AvatarPrimitive.FallbackProps = $props()
</script>
<AvatarPrimitive.Fallback
	class={cn('bg-muted flex h-full w-full items-center justify-center rounded-full', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/avatar/avatar-image.svelte">
<script lang="ts">
import { Avatar as AvatarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: AvatarPrimitive.ImageProps = $props()
</script>
<AvatarPrimitive.Image
	class={cn('aspect-square h-full w-full', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/avatar/avatar.svelte">
<script lang="ts">
import { Avatar as AvatarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: AvatarPrimitive.RootProps = $props()
</script>
<AvatarPrimitive.Root
	class={cn('relative flex size-10 shrink-0 overflow-hidden rounded-full', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/avatar/index.ts">
export { default as Avatar, default as Root } from './avatar.svelte'
export { default as AvatarFallback, default as Fallback } from './avatar-fallback.svelte'
export { default as AvatarImage, default as Image } from './avatar-image.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/badge/badge.svelte">
<script lang="ts" module>
import { tv, type VariantProps } from 'tailwind-variants'
export const badgeVariants = tv({
	base: 'focus:ring-ring inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-offset-2',
	defaultVariants: {
		variant: 'default',
	},
	variants: {
		variant: {
			default: 'bg-primary text-primary-foreground hover:bg-primary/80 border-transparent',
			destructive:
				'bg-destructive text-destructive-foreground hover:bg-destructive/80 border-transparent',
			outline: 'text-foreground',
			secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80 border-transparent',
		},
	},
})
export type BadgeVariant = VariantProps<typeof badgeVariants>['variant']
</script>
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAnchorAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	href,
	ref = $bindable(),
	variant = 'default',
	...restProps
}: WithElementRef<HTMLAnchorAttributes> & {
	variant?: BadgeVariant
} = $props()
</script>
<svelte:element
	this={href ? 'a' : 'span'}
	bind:this={ref}
	class={cn(badgeVariants({ variant }), className)}
	{href}
	{...restProps}
>
	{@render children?.()}
</svelte:element>
</file>

<file path="libraries/ui/src/shadcn/components/ui/badge/index.ts">
export { default as Badge } from './badge.svelte'
export { type BadgeVariant, badgeVariants } from './badge.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-ellipsis.svelte">
<script lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import Ellipsis from 'lucide-svelte/icons/ellipsis'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildren<WithElementRef<HTMLAttributes<HTMLSpanElement>>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('flex size-9 items-center justify-center', className)}
	aria-hidden="true"
	role="presentation"
	{...restProps}
>
	<Ellipsis class="size-4" />
	<span class="sr-only">More</span>
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-item.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLLiAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLLiAttributes> = $props()
</script>
<li bind:this={ref} class={cn('inline-flex items-center gap-1.5', className)} {...restProps}>
	{@render children?.()}
</li>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-link.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { Snippet } from 'svelte'
import type { HTMLAnchorAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	child,
	children,
	class: className,
	href,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAnchorAttributes> & {
	child?: Snippet<[{ props: HTMLAnchorAttributes }]>
} = $props()
const attrs = $derived({
	class: cn('hover:text-foreground transition-colors', className),
	href,
	...restProps,
})
</script>
{#if child}
	{@render child({ props: attrs })}
{:else}
	<a bind:this={ref} {...attrs}>
		{@render children?.()}
	</a>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-list.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLOlAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLOlAttributes> = $props()
</script>
<ol
	bind:this={ref}
	class={cn(
		'text-muted-foreground flex flex-wrap items-center gap-1.5 break-words text-sm sm:gap-2.5',
		className,
	)}
	{...restProps}
>
	{@render children?.()}
</ol>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-page.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLSpanElement>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('text-foreground font-normal', className)}
	aria-current="page"
	aria-disabled="true"
	role="link"
	{...restProps}
>
	{@render children?.()}
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb-separator.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import type { HTMLLiAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLLiAttributes> = $props()
</script>
<li
	bind:this={ref}
	class={cn('[&>svg]:size-3.5', className)}
	aria-hidden="true"
	role="presentation"
	{...restProps}
>
	{#if children}
		{@render children?.()}
	{:else}
		<ChevronRight />
	{/if}
</li>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/breadcrumb.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<nav bind:this={ref} class={className} aria-label="breadcrumb" {...restProps}>
	{@render children?.()}
</nav>
</file>

<file path="libraries/ui/src/shadcn/components/ui/breadcrumb/index.ts">
export { default as Breadcrumb, default as Root } from './breadcrumb.svelte'
export { default as BreadcrumbEllipsis, default as Ellipsis } from './breadcrumb-ellipsis.svelte'
export { default as BreadcrumbItem, default as Item } from './breadcrumb-item.svelte'
export { default as BreadcrumbLink, default as Link } from './breadcrumb-link.svelte'
export { default as BreadcrumbList, default as List } from './breadcrumb-list.svelte'
export { default as BreadcrumbPage, default as Page } from './breadcrumb-page.svelte'
export { default as BreadcrumbSeparator, default as Separator } from './breadcrumb-separator.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/button/button.svelte">
<script lang="ts" module>
import type { WithElementRef } from 'bits-ui'
import type { HTMLAnchorAttributes, HTMLButtonAttributes } from 'svelte/elements'
import { tv, type VariantProps } from 'tailwind-variants'
export const buttonVariants = tv({
	base: 'ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
	defaultVariants: {
		size: 'default',
		variant: 'default',
	},
	variants: {
		size: {
			default: 'h-10 px-4 py-2',
			icon: 'h-10 w-10',
			lg: 'h-11 rounded-md px-8',
			sm: 'h-9 rounded-md px-3',
		},
		variant: {
			default: 'bg-primary text-primary-foreground hover:bg-primary/90',
			destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
			ghost: 'hover:bg-accent hover:text-accent-foreground',
			link: 'text-primary underline-offset-4 hover:underline',
			outline: 'border-input bg-background hover:bg-accent hover:text-accent-foreground border',
			secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
		},
	},
})
export type ButtonVariant = VariantProps<typeof buttonVariants>['variant']
export type ButtonSize = VariantProps<typeof buttonVariants>['size']
export type ButtonProps = WithElementRef<HTMLAnchorAttributes> &
	WithElementRef<HTMLButtonAttributes> & {
		size?: ButtonSize
		variant?: ButtonVariant
	}
</script>
<script lang="ts">
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	href,
	ref = $bindable(),
	size = 'default',
	type = 'button',
	variant = 'default',
	...restProps
}: ButtonProps = $props()
</script>
{#if href}
	<a bind:this={ref} class={cn(buttonVariants({ size, variant }), className)} {href} {...restProps}>
		{@render children?.()}
	</a>
{:else}
	<button
		bind:this={ref}
		class={cn(buttonVariants({ size, variant }), className)}
		{type}
		{...restProps}
	>
		{@render children?.()}
	</button>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/button/index.js">
export { default as Button, buttonVariants, default as Root } from './button.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/button/index.ts">
export {
	default as Button,
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
	buttonVariants,
	type ButtonProps as Props,
	default as Root,
} from './button.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-cell.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.CellProps = $props()
</script>
<CalendarPrimitive.Cell
	class={cn(
		`[&:has([data-selected])]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50
		relative size-9 p-0 text-center text-sm focus-within:relative focus-within:z-20
		[&:has([data-selected])]:rounded-md`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-day.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.DayProps = $props()
</script>
<CalendarPrimitive.Day
	class={cn(
		buttonVariants({ variant: 'ghost' }),
		'size-9 p-0 font-normal',
		`[&[data-today]:not([data-selected])]:bg-accent
		[&[data-today]:not([data-selected])]:text-accent-foreground`,
		// Selected
		`data-selected:bg-primary data-selected:text-primary-foreground data-selected:hover:bg-primary
		data-selected:hover:text-primary-foreground data-selected:focus:bg-primary
		data-selected:focus:text-primary-foreground data-selected:opacity-100`,
		// Disabled
		'data-disabled:text-muted-foreground data-disabled:opacity-50',
		// Unavailable
		'data-unavailable:text-destructive-foreground data-unavailable:line-through',
		// Outside months
		`data-outside-month:text-muted-foreground [&[data-outside-month][data-selected]]:bg-accent/50
		[&[data-outside-month][data-selected]]:text-muted-foreground data-outside-month:pointer-events-none
		data-outside-month:opacity-50 [&[data-outside-month][data-selected]]:opacity-30`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-body.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: CalendarPrimitive.GridBodyProps = $props()
</script>
<CalendarPrimitive.GridBody class={cn(className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-head.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: CalendarPrimitive.GridHeadProps = $props()
</script>
<CalendarPrimitive.GridHead class={cn(className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-grid-row.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.GridRowProps = $props()
</script>
<CalendarPrimitive.GridRow class={cn('flex', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-grid.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.GridProps = $props()
</script>
<CalendarPrimitive.Grid
	class={cn('w-full border-collapse space-y-1', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-head-cell.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: CalendarPrimitive.HeadCellProps = $props()
</script>
<CalendarPrimitive.HeadCell
	class={cn('text-muted-foreground w-9 rounded-md text-[0.8rem] font-normal', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-header.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.HeaderProps = $props()
</script>
<CalendarPrimitive.Header
	class={cn('relative flex w-full items-center justify-between pt-1', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-heading.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CalendarPrimitive.HeadingProps = $props()
</script>
<CalendarPrimitive.Heading class={cn('text-sm font-medium', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-months.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-next-button.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: CalendarPrimitive.PrevButtonProps = $props()
</script>
{#snippet Fallback()}
	<ChevronRight class="size-4" />
{/snippet}
<CalendarPrimitive.NextButton
	class={cn(
		buttonVariants({ variant: 'outline' }),
		'size-7 bg-transparent p-0 opacity-50 hover:opacity-100',
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar-prev-button.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive } from 'bits-ui'
import ChevronLeft from 'lucide-svelte/icons/chevron-left'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: CalendarPrimitive.PrevButtonProps = $props()
</script>
{#snippet Fallback()}
	<ChevronLeft class="size-4" />
{/snippet}
<CalendarPrimitive.PrevButton
	class={cn(
		buttonVariants({ variant: 'outline' }),
		'size-7 bg-transparent p-0 opacity-50 hover:opacity-100',
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/calendar.svelte">
<script lang="ts">
import { Calendar as CalendarPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
import * as Calendar from './index'
let {
	class: className,
	placeholder = $bindable(),
	ref = $bindable(),
	value = $bindable(),
	weekdayFormat = 'short',
	...restProps
}: WithoutChildrenOrChild<CalendarPrimitive.RootProps> = $props()
</script>
<!--
Discriminated Unions + Destructing (required for bindable) do not
get along, so we shut typescript up by casting `value` to `never`.
-->
<CalendarPrimitive.Root
	class={cn('p-3', className)}
	{weekdayFormat}
	bind:value={value as never}
	bind:ref
	bind:placeholder
	{...restProps}
>
	{#snippet children({ months, weekdays })}
		<Calendar.Header>
			<Calendar.PrevButton />
			<Calendar.Heading />
			<Calendar.NextButton />
		</Calendar.Header>
		<Calendar.Months>
			{#each months as month}
				<Calendar.Grid>
					<Calendar.GridHead>
						<Calendar.GridRow class="flex">
							{#each weekdays as weekday}
								<Calendar.HeadCell>
									{weekday.slice(0, 2)}
								</Calendar.HeadCell>
							{/each}
						</Calendar.GridRow>
					</Calendar.GridHead>
					<Calendar.GridBody>
						{#each month.weeks as weekDates}
							<Calendar.GridRow class="mt-2 w-full">
								{#each weekDates as date}
									<Calendar.Cell {date} month={month.value}>
										<Calendar.Day />
									</Calendar.Cell>
								{/each}
							</Calendar.GridRow>
						{/each}
					</Calendar.GridBody>
				</Calendar.Grid>
			{/each}
		</Calendar.Months>
	{/snippet}
</CalendarPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/calendar/index.ts">
export { default as Calendar } from './calendar.svelte'
export { default as Cell } from './calendar-cell.svelte'
export { default as Day } from './calendar-day.svelte'
export { default as Grid } from './calendar-grid.svelte'
export { default as GridBody } from './calendar-grid-body.svelte'
export { default as GridHead } from './calendar-grid-head.svelte'
export { default as GridRow } from './calendar-grid-row.svelte'
export { default as HeadCell } from './calendar-head-cell.svelte'
export { default as Header } from './calendar-header.svelte'
export { default as Heading } from './calendar-heading.svelte'
export { default as Months } from './calendar-months.svelte'
export { default as NextButton } from './calendar-next-button.svelte'
export { default as PrevButton } from './calendar-prev-button.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card-content.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('p-6', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card-description.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLParagraphElement>> = $props()
</script>
<p bind:this={ref} class={cn('text-muted-foreground text-sm', className)} {...restProps}>
	{@render children?.()}
</p>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('flex items-center p-6 pt-0', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('flex flex-col space-y-1.5 p-6 pb-0', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card-title.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	level = 3,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	level?: 1 | 2 | 3 | 4 | 5 | 6
} = $props()
</script>
<div
	bind:this={ref}
	class={cn('text-2xl font-semibold leading-none tracking-tight', className)}
	aria-level={level}
	role="heading"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/card.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('bg-card text-card-foreground shadow-xs rounded-lg border', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/card/index.ts">
export { default as Card, default as Root } from './card.svelte'
export { default as CardContent, default as Content } from './card-content.svelte'
export { default as CardDescription, default as Description } from './card-description.svelte'
export { default as CardFooter, default as Footer } from './card-footer.svelte'
export { default as CardHeader, default as Header } from './card-header.svelte'
export { default as CardTitle, default as Title } from './card-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/carousel-content.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import emblaCarouselSvelte from 'embla-carousel-svelte'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
import { getEmblaContext } from './context.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
const emblaCtx = getEmblaContext('<Carousel.Content/>')
</script>
<!-- svelte-ignore event_directive_deprecated -->
<div
	class="overflow-hidden"
	on:emblaInit={emblaCtx.onInit}
	use:emblaCarouselSvelte={{
		options: {
			container: '[data-embla-container]',
			slides: '[data-embla-slide]',
			...emblaCtx.options,
			axis: emblaCtx.orientation === 'horizontal' ? 'x' : 'y',
		},
		plugins: emblaCtx.plugins,
	}}
>
	<div
		bind:this={ref}
		class={cn(
			'flex',
			emblaCtx.orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
			className,
		)}
		data-embla-container=""
		{...restProps}
	>
		{@render children?.()}
	</div>
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/carousel-item.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
import { getEmblaContext } from './context.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
const emblaCtx = getEmblaContext('<Carousel.Item/>')
</script>
<div
	bind:this={ref}
	class={cn(
		'min-w-0 shrink-0 grow-0 basis-full',
		emblaCtx.orientation === 'horizontal' ? 'pl-4' : 'pt-4',
		className,
	)}
	aria-roledescription="slide"
	data-embla-slide=""
	role="group"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/carousel-next.svelte">
<script lang="ts">
import type { WithoutChildren } from 'bits-ui'
import ArrowRight from 'lucide-svelte/icons/arrow-right'
import { Button, type Props } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
import { getEmblaContext } from './context.js'
let {
	class: className,
	ref = $bindable(),
	size = 'icon',
	variant = 'outline',
	...restProps
}: WithoutChildren<Props> = $props()
const emblaCtx = getEmblaContext('<Carousel.Next/>')
</script>
<Button
	class={cn(
		'absolute size-8 touch-manipulation rounded-full',
		emblaCtx.orientation === 'horizontal' ?
			'-right-12 top-1/2 -translate-y-1/2'
		:	'-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
		className,
	)}
	disabled={!emblaCtx.canScrollNext}
	onclick={emblaCtx.scrollNext}
	onkeydown={emblaCtx.handleKeyDown}
	{size}
	{variant}
	bind:ref
	{...restProps}
>
	<ArrowRight class="size-4" />
	<span class="sr-only">Next slide</span>
</Button>
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/carousel-previous.svelte">
<script lang="ts">
import type { WithoutChildren } from 'bits-ui'
import ArrowLeft from 'lucide-svelte/icons/arrow-left'
import { Button, type Props } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
import { getEmblaContext } from './context.js'
let {
	class: className,
	ref = $bindable(),
	size = 'icon',
	variant = 'outline',
	...restProps
}: WithoutChildren<Props> = $props()
const emblaCtx = getEmblaContext('<Carousel.Previous/>')
</script>
<Button
	class={cn(
		'absolute size-8 touch-manipulation rounded-full',
		emblaCtx.orientation === 'horizontal' ?
			'-left-12 top-1/2 -translate-y-1/2'
		:	'-top-12 left-1/2 -translate-x-1/2 rotate-90',
		className,
	)}
	disabled={!emblaCtx.canScrollPrev}
	onclick={emblaCtx.scrollPrev}
	onkeydown={emblaCtx.handleKeyDown}
	{size}
	{variant}
	{...restProps}
	bind:ref
>
	<ArrowLeft class="size-4" />
	<span class="sr-only">Previous slide</span>
</Button>
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/carousel.svelte">
<script lang="ts">
import { cn } from '$shadcn/utils.js'
import {
	type CarouselAPI,
	type CarouselProps,
	type EmblaContext,
	setEmblaContext,
} from './context.js'
let {
	children,
	class: className,
	opts = {},
	orientation = 'horizontal',
	plugins = [],
	setApi = () => {},
	...restProps
}: CarouselProps = $props()
let carouselState = $state<EmblaContext>({
	api: undefined,
	canScrollNext: false,
	canScrollPrev: false,
	handleKeyDown,
	onInit,
	options: opts,
	orientation,
	plugins,
	scrollNext,
	scrollPrev,
	scrollSnaps: [],
	scrollTo,
	selectedIndex: 0,
})
setEmblaContext(carouselState)
function scrollPrev() {
	carouselState.api?.scrollPrev()
}
function scrollNext() {
	carouselState.api?.scrollNext()
}
function scrollTo(index: number, jump?: boolean) {
	carouselState.api?.scrollTo(index, jump)
}
function onSelect(api: CarouselAPI) {
	if (!api) return
	carouselState.canScrollPrev = api.canScrollPrev()
	carouselState.canScrollNext = api.canScrollNext()
	carouselState.selectedIndex = api.selectedScrollSnap()
}
$effect(() => {
	if (carouselState.api) {
		onSelect(carouselState.api)
		carouselState.api.on('select', onSelect)
		carouselState.api.on('reInit', onSelect)
	}
})
function handleKeyDown(e: KeyboardEvent) {
	if (e.key === 'ArrowLeft') {
		e.preventDefault()
		scrollPrev()
	} else if (e.key === 'ArrowRight') {
		e.preventDefault()
		scrollNext()
	}
}
$effect(() => {
	setApi(carouselState.api)
})
function onInit(event: CustomEvent<CarouselAPI>) {
	carouselState.api = event.detail
	carouselState.scrollSnaps = carouselState.api.scrollSnapList()
}
$effect(() => {
	return () => {
		carouselState.api?.off('select', onSelect)
	}
})
</script>
<div class={cn('relative', className)} aria-roledescription="carousel" role="region" {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/context.ts">
import type { WithElementRef } from 'bits-ui'
import type { EmblaCarouselSvelteType } from 'embla-carousel-svelte'
import type emblaCarouselSvelte from 'embla-carousel-svelte'
import { getContext, hasContext, setContext } from 'svelte'
import type { HTMLAttributes } from 'svelte/elements'
export type CarouselAPI =
	NonNullable<NonNullable<EmblaCarouselSvelteType['$$_attributes']>['on:emblaInit']> extends (
		(evt: CustomEvent<infer CarouselAPI>) => void
	) ?
		CarouselAPI
	:	never
type EmblaCarouselConfig = NonNullable<Parameters<typeof emblaCarouselSvelte>[1]>
export type CarouselOptions = EmblaCarouselConfig['options']
export type CarouselPlugins = EmblaCarouselConfig['plugins']
////
export type CarouselProps = WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	opts?: CarouselOptions
	orientation?: 'horizontal' | 'vertical'
	plugins?: CarouselPlugins
	setApi?: (api: CarouselAPI | undefined) => void
}
const EMBLA_CAROUSEL_CONTEXT = Symbol('EMBLA_CAROUSEL_CONTEXT')
export type EmblaContext = {
	api: CarouselAPI | undefined
	canScrollNext: boolean
	canScrollPrev: boolean
	handleKeyDown: (e: KeyboardEvent) => void
	onInit: (e: CustomEvent<CarouselAPI>) => void
	options: CarouselOptions
	orientation: 'horizontal' | 'vertical'
	plugins: CarouselPlugins
	scrollNext: () => void
	scrollPrev: () => void
	scrollSnaps: number[]
	scrollTo: (index: number, jump?: boolean) => void
	selectedIndex: number
}
export function setEmblaContext(config: EmblaContext): EmblaContext {
	setContext(EMBLA_CAROUSEL_CONTEXT, config)
	return config
}
export function getEmblaContext(name = 'This component') {
	if (!hasContext(EMBLA_CAROUSEL_CONTEXT)) {
		throw new Error(`${name} must be used within a <Carousel.Root> component`)
	}
	return getContext<ReturnType<typeof setEmblaContext>>(EMBLA_CAROUSEL_CONTEXT)
}
</file>

<file path="libraries/ui/src/shadcn/components/ui/carousel/index.ts">
export { default as Carousel, default as Root } from './carousel.svelte'
export { default as CarouselContent, default as Content } from './carousel-content.svelte'
export { default as CarouselItem, default as Item } from './carousel-item.svelte'
export { default as CarouselNext, default as Next } from './carousel-next.svelte'
export { default as CarouselPrevious, default as Previous } from './carousel-previous.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/checkbox/checkbox.svelte">
<script lang="ts">
import { Checkbox as CheckboxPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import Check from 'lucide-svelte/icons/check'
import Minus from 'lucide-svelte/icons/minus'
import { cn } from '$shadcn/utils.js'
let {
	checked = $bindable(false),
	class: className,
	indeterminate = $bindable(false),
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<CheckboxPrimitive.RootProps> = $props()
</script>
<CheckboxPrimitive.Root
	class={cn(
		`border-primary ring-offset-background focus-visible:ring-ring data-[state=checked]:bg-primary
		data-[state=checked]:text-primary-foreground focus-visible:outline-hidden peer box-content size-4
		shrink-0 rounded-sm border focus-visible:ring-2 focus-visible:ring-offset-2
		disabled:cursor-not-allowed disabled:opacity-50 data-[disabled=true]:cursor-not-allowed
		data-[disabled=true]:opacity-50`,
		className,
	)}
	bind:ref
	bind:checked
	bind:indeterminate
	{...restProps}
>
	{#snippet children({ checked, indeterminate })}
		<div class="flex size-4 items-center justify-center text-current">
			{#if indeterminate}
				<Minus class="size-3.5" />
			{:else}
				<Check class={cn('size-3.5', !checked && 'text-transparent')} />
			{/if}
		</div>
	{/snippet}
</CheckboxPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/checkbox/index.ts">
export { default as Checkbox, default as Root } from './checkbox.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/collapsible/index.ts">
import { Collapsible as CollapsiblePrimitive } from 'bits-ui'
const { Root } = CollapsiblePrimitive
const { Trigger } = CollapsiblePrimitive
const { Content } = CollapsiblePrimitive
export {
	//
	Root as Collapsible,
	Content as CollapsibleContent,
	Trigger as CollapsibleTrigger,
	Content,
	Root,
	Trigger,
}
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-dialog.svelte">
<script lang="ts">
import type {
	Command as CommandPrimitive,
	Dialog as DialogPrimitive,
	WithoutChildrenOrChild,
} from 'bits-ui'
import type { Snippet } from 'svelte'
import * as Dialog from '$shadcn/components/ui/dialog/index.js'
import Command from './command.svelte'
let {
	children,
	open = $bindable(false),
	portalProps,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: WithoutChildrenOrChild<CommandPrimitive.RootProps> &
	WithoutChildrenOrChild<DialogPrimitive.RootProps> & {
		children: Snippet
		portalProps?: DialogPrimitive.PortalProps
	} = $props()
</script>
<Dialog.Root bind:open {...restProps}>
	<Dialog.Content class="overflow-hidden p-0 shadow-lg" {portalProps}>
		<Command
			class="**:data-command-group:px-2 **:data-command-input:h-12 **:data-command-item:px-2
				**:data-command-item:py-3 [&_[data-command-group]:not([hidden])_~[data-command-group]]:pt-0
				[&_[data-command-input-wrapper]_svg]:h-5 [&_[data-command-input-wrapper]_svg]:w-5
				[&_[data-command-item]_svg]:h-5 [&_[data-command-item]_svg]:w-5"
			{...restProps}
			{children}
			bind:value
			bind:ref
		/>
	</Dialog.Content>
</Dialog.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-empty.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CommandPrimitive.EmptyProps = $props()
</script>
<CommandPrimitive.Empty class={cn('py-6 text-center text-sm', className)} {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-group.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	heading,
	ref = $bindable(),
	...restProps
}: CommandPrimitive.GroupProps & {
	heading?: string
} = $props()
</script>
<CommandPrimitive.Group
	class={cn('text-foreground overflow-hidden p-1', className)}
	bind:ref
	{...restProps}
>
	{#if heading}
		<CommandPrimitive.GroupHeading class="text-muted-foreground px-2 py-1.5 text-xs font-medium">
			{heading}
		</CommandPrimitive.GroupHeading>
	{/if}
	<CommandPrimitive.GroupItems {children} />
</CommandPrimitive.Group>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-input.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import Search from 'lucide-svelte/icons/search'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: CommandPrimitive.InputProps = $props()
</script>
<div class="flex items-center border-b px-2" data-command-input-wrapper="">
	<Search class="mr-2 size-4 shrink-0 opacity-50" />
	<CommandPrimitive.Input
		class={cn(
			`placeholder:text-muted-foreground outline-hidden flex h-11 w-full rounded-md bg-transparent py-3
			text-base disabled:cursor-not-allowed disabled:opacity-50 md:text-sm`,
			className,
		)}
		bind:ref
		{...restProps}
		bind:value
	/>
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-item.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CommandPrimitive.ItemProps = $props()
</script>
<CommandPrimitive.Item
	class={cn(
		`aria-selected:bg-accent aria-selected:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center gap-2 rounded-sm px-2 py-1.5 text-sm [&_svg]:pointer-events-none [&_svg]:size-4
		[&_svg]:shrink-0`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-link-item.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CommandPrimitive.LinkItemProps = $props()
</script>
<CommandPrimitive.LinkItem
	class={cn(
		`aria-selected:bg-accent aria-selected:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm px-2 py-1.5 text-sm`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-list.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: CommandPrimitive.ListProps = $props()
</script>
<CommandPrimitive.List
	class={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
	{...restProps}
	bind:ref
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-separator.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: CommandPrimitive.SeparatorProps = $props()
</script>
<CommandPrimitive.Separator class={cn('bg-border -mx-1 h-px', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command-shortcut.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLSpanElement>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('text-muted-foreground ml-auto text-xs tracking-widest', className)}
	{...restProps}
>
	{@render children?.()}
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/command.svelte">
<script lang="ts">
import { Command as CommandPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: CommandPrimitive.RootProps = $props()
</script>
<CommandPrimitive.Root
	class={cn(
		'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',
		className,
	)}
	bind:value
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/command/index.ts">
import { Command as CommandPrimitive } from 'bits-ui'
const { Loading } = CommandPrimitive
export {
	//
	Loading as CommandLoading,
	Loading,
}
export { default as Command, default as Root } from './command.svelte'
export { default as CommandDialog, default as Dialog } from './command-dialog.svelte'
export { default as CommandEmpty, default as Empty } from './command-empty.svelte'
export { default as CommandGroup, default as Group } from './command-group.svelte'
export { default as CommandInput, default as Input } from './command-input.svelte'
export { default as CommandItem, default as Item } from './command-item.svelte'
export { default as CommandLinkItem, default as LinkItem } from './command-link-item.svelte'
export { default as CommandList, default as List } from './command-list.svelte'
export { default as CommandSeparator, default as Separator } from './command-separator.svelte'
export { default as CommandShortcut, default as Shortcut } from './command-shortcut.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-checkbox-item.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import Check from 'lucide-svelte/icons/check'
import Minus from 'lucide-svelte/icons/minus'
import type { Snippet } from 'svelte'
import { cn } from '$shadcn/utils.js'
let {
	checked = $bindable(false),
	children: childrenProp,
	class: className,
	indeterminate = $bindable(false),
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<ContextMenuPrimitive.CheckboxItemProps> & {
	children?: Snippet
} = $props()
</script>
<ContextMenuPrimitive.CheckboxItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	bind:checked
	bind:indeterminate
	{...restProps}
>
	{#snippet children({ checked, indeterminate })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if indeterminate}
				<Minus class="size-3.5" />
			{:else}
				<Check class={cn('size-3.5', !checked && 'text-transparent')} />
			{/if}
		</span>
		{@render childrenProp?.()}
	{/snippet}
</ContextMenuPrimitive.CheckboxItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-content.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	portalProps,
	ref = $bindable(),
	...restProps
}: ContextMenuPrimitive.ContentProps & {
	portalProps?: ContextMenuPrimitive.PortalProps
} = $props()
</script>
<ContextMenuPrimitive.Portal {...portalProps}>
	<ContextMenuPrimitive.Content
		class={cn(
			`bg-popover text-popover-foreground focus:outline-hidden z-50 min-w-[8rem] rounded-md border p-1
			shadow-md`,
			className,
		)}
		bind:ref
		{...restProps}
	/>
</ContextMenuPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-group-heading.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: ContextMenuPrimitive.GroupHeadingProps & {
	inset?: boolean
} = $props()
</script>
<ContextMenuPrimitive.GroupHeading
	class={cn('text-foreground px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-item.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: ContextMenuPrimitive.ItemProps & {
	inset?: boolean
} = $props()
</script>
<ContextMenuPrimitive.Item
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm px-2 py-1.5 text-sm`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-radio-item.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive, type WithoutChild } from 'bits-ui'
import Circle from 'lucide-svelte/icons/circle'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<ContextMenuPrimitive.RadioItemProps> = $props()
</script>
<ContextMenuPrimitive.RadioItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{#snippet children({ checked })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if checked}
				<Circle class="size-2 fill-current" />
			{/if}
		</span>
		{@render childrenProp?.({ checked })}
	{/snippet}
</ContextMenuPrimitive.RadioItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-separator.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: ContextMenuPrimitive.SeparatorProps = $props()
</script>
<ContextMenuPrimitive.Separator
	class={cn('bg-border -mx-1 my-1 h-px', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-shortcut.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLSpanElement>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('text-muted-foreground ml-auto text-xs tracking-widest', className)}
	{...restProps}
>
	{@render children?.()}
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-sub-content.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: ContextMenuPrimitive.SubContentProps = $props()
</script>
<ContextMenuPrimitive.SubContent
	class={cn(
		`bg-popover text-popover-foreground focus:outline-hidden z-50 min-w-[8rem] overflow-hidden rounded-md
		border p-1 shadow-md`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/context-menu-sub-trigger.svelte">
<script lang="ts">
import { ContextMenu as ContextMenuPrimitive, type WithoutChild } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: WithoutChild<ContextMenuPrimitive.SubTriggerProps> & {
	inset?: boolean
} = $props()
</script>
<ContextMenuPrimitive.SubTrigger
	class={cn(
		`data-highlighted:bg-accent data-[state=open]:bg-accent data-highlighted:text-accent-foreground
		data-[state=open]:text-accent-foreground outline-hidden flex cursor-default select-none items-center
		rounded-sm px-2 py-1.5 text-sm`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
>
	{@render children?.()}
	<ChevronRight class="ml-auto size-4" />
</ContextMenuPrimitive.SubTrigger>
</file>

<file path="libraries/ui/src/shadcn/components/ui/context-menu/index.ts">
import { ContextMenu as ContextMenuPrimitive } from 'bits-ui'
const { Sub } = ContextMenuPrimitive
const { Root } = ContextMenuPrimitive
const { Trigger } = ContextMenuPrimitive
const { Group } = ContextMenuPrimitive
const { RadioGroup } = ContextMenuPrimitive
export {
	//
	Root as ContextMenu,
	Group as ContextMenuGroup,
	RadioGroup as ContextMenuRadioGroup,
	Sub as ContextMenuSub,
	Trigger as ContextMenuTrigger,
	Group,
	RadioGroup,
	Root,
	Sub,
	Trigger,
}
export {
	default as CheckboxItem,
	default as ContextMenuCheckboxItem,
} from './context-menu-checkbox-item.svelte'
export { default as Content, default as ContextMenuContent } from './context-menu-content.svelte'
export {
	default as ContextMenuGroupHeading,
	default as GroupHeading,
} from './context-menu-group-heading.svelte'
export { default as ContextMenuItem, default as Item } from './context-menu-item.svelte'
export {
	default as ContextMenuRadioItem,
	default as RadioItem,
} from './context-menu-radio-item.svelte'
export {
	default as ContextMenuSeparator,
	default as Separator,
} from './context-menu-separator.svelte'
export { default as ContextMenuShortcut, default as Shortcut } from './context-menu-shortcut.svelte'
export {
	default as ContextMenuSubContent,
	default as SubContent,
} from './context-menu-sub-content.svelte'
export {
	default as ContextMenuSubTrigger,
	default as SubTrigger,
} from './context-menu-sub-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/data-table/data-table.svelte.ts">
import {
	createTable,
	type RowData,
	type TableOptions,
	type TableOptionsResolved,
	type TableState,
} from '@tanstack/table-core'
/**
 * Creates a reactive TanStack table object for Svelte.
 *
 * @example
 * 	;```svelte
 * 	<script>
 * 	  const table = createSvelteTable({ ... })
 * 	</script>
 *
 * 	<table>
 * 	  <thead>
 * 	    {#each table.getHeaderGroups() as headerGroup}
 * 	      <tr>
 * 	        {#each headerGroup.headers as header}
 * 	          <th colspan={header.colSpan}>
 * 	        	   <FlexRender content={header.column.columnDef.header} context={header.getContext()} />
 * 	        	 </th>
 * 	        {/each}
 * 	      </tr>
 * 	    {/each}
 * 	  </thead>
 * 		 <!-- ... -->
 * 	</table>
 * 	```
 *
 * @param options Table options to create the table with.
 * @returns A reactive table object.
 */
export function createSvelteTable<TData extends RowData>(options: TableOptions<TData>) {
	const resolvedOptions: TableOptionsResolved<TData> = mergeObjects(
		{
			mergeOptions: (
				defaultOptions: TableOptions<TData>,
				options: Partial<TableOptions<TData>>,
			) => {
				return mergeObjects(defaultOptions, options)
			},
			onStateChange() {},
			renderFallbackValue: null,
			state: {},
		},
		options,
	)
	const table = createTable(resolvedOptions)
	let state = $state<Partial<TableState>>(table.initialState)
	function updateOptions() {
		table.setOptions((prev) => {
			return mergeObjects(prev, options, {
				onStateChange: (updater: any) => {
					state = typeof updater === 'function' ? updater(state) : mergeObjects(state, updater)
					options.onStateChange?.(updater)
				},
				state: mergeObjects(state, options.state || {}),
			})
		})
	}
	updateOptions()
	$effect.pre(() => {
		updateOptions()
	})
	return table
}
/**
 * Merges objects together while keeping their getters alive. Taken from SolidJS:
 * {@link https://github.com/solidjs/solid/blob/24abc825c0996fd2bc8c1de1491efe9a7e743aff/packages/solid/src/server/rendering.ts#L82-L115}
 */
function mergeObjects<T>(source: T): T
function mergeObjects<T, U>(source: T, source1: U): T & U
function mergeObjects<T, U, V>(source: T, source1: U, source2: V): T & U & V
function mergeObjects<T, U, V, W>(source: T, source1: U, source2: V, source3: W): T & U & V & W
function mergeObjects(...sources: any): any {
	const target = {}
	for (let i = 0; i < sources.length; i++) {
		let source = sources[i]
		if (typeof source === 'function') source = source()
		if (source) {
			const descriptors = Object.getOwnPropertyDescriptors(source)
			for (const key in descriptors) {
				if (key in target) continue
				Object.defineProperty(target, key, {
					enumerable: true,
					get() {
						for (let i = sources.length - 1; i >= 0; i--) {
							let s = sources[i]
							if (typeof s === 'function') s = s()
							const v = (s || {})[key]
							if (v !== undefined) return v
						}
					},
				})
			}
		}
	}
	return target
}
</file>

<file path="libraries/ui/src/shadcn/components/ui/data-table/flex-render.svelte">
<script lang="ts" module>
import type { CellContext, ColumnDefTemplate, HeaderContext } from '@tanstack/table-core'
type TData = unknown
type TValue = unknown
type TContext = unknown
</script>
<script
	generics="TData, TValue, TContext extends CellContext<TData, TValue> | HeaderContext<TData, TValue>"
	lang="ts"
>
import { RenderComponentConfig, RenderSnippetConfig } from './render-helpers.js'
type Props = {
	/** The cell or header field of the current cell's column definition. */
	content?: TContext extends HeaderContext<TData, TValue> ?
		ColumnDefTemplate<HeaderContext<TData, TValue>>
	: TContext extends CellContext<TData, TValue> ? ColumnDefTemplate<CellContext<TData, TValue>>
	: never
	/** The result of the `getContext()` function of the header or cell */
	context: TContext
}
let { content, context }: Props = $props()
</script>
{#if typeof content === 'string'}
	{content}
{:else if typeof content === 'function'}
	<!-- It's unlikely that a CellContext will be passed to a Header -->
	<!-- eslint-disable-next-line @typescript-eslint/no-explicit-any -->
	{@const result = content(context as any)}
	{#if result instanceof RenderComponentConfig}
		{@const { component: Component, props } = result}
		<Component {...props} />
	{:else if result instanceof RenderSnippetConfig}
		{@const { params, snippet } = result}
		{@render snippet(params)}
	{:else}
		{result}
	{/if}
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/data-table/index.ts">
export { createSvelteTable } from './data-table.svelte.js'
export { default as FlexRender } from './flex-render.svelte'
export { renderComponent, renderSnippet } from './render-helpers.js'
</file>

<file path="libraries/ui/src/shadcn/components/ui/data-table/render-helpers.ts">
import type { Component, ComponentProps, Snippet } from 'svelte'
/**
 * A helper class to make it easy to identify Svelte components in `columnDef.cell` and
 * `columnDef.header` properties.
 *
 * > NOTE: This class should only be used internally by the adapter. If you're reading this and you
 * > don't know what this is for, you probably don't need it.
 *
 * @example
 * 	;```svelte
 * 	{@const result = content(context as any)}
 * 	{#if result instanceof RenderComponentConfig}
 * 	  {@const { component: Component, props } = result}
 * 	  <Component {...props} />
 * 	{/if}
 * 	```
 */
export class RenderComponentConfig<TComponent extends Component> {
	component: TComponent
	props: ComponentProps<TComponent> | Record<string, never>
	constructor(
		component: TComponent,
		props: ComponentProps<TComponent> | Record<string, never> = {},
	) {
		this.component = component
		this.props = props
	}
}
/**
 * A helper class to make it easy to identify Svelte Snippets in `columnDef.cell` and
 * `columnDef.header` properties.
 *
 * > NOTE: This class should only be used internally by the adapter. If you're reading this and you
 * > don't know what this is for, you probably don't need it.
 *
 * @example
 * 	;```svelte
 * 	{@const result = content(context as any)}
 * 	{#if result instanceof RenderSnippetConfig}
 * 	  {@const { snippet, params } = result}
 * 	  {@render snippet(params)}
 * 	{/if}
 * 	```
 */
export class RenderSnippetConfig<TProps> {
	params: TProps
	snippet: Snippet<[TProps]>
	constructor(snippet: Snippet<[TProps]>, params: TProps) {
		this.snippet = snippet
		this.params = params
	}
}
/**
 * A helper function to help create cells from Svelte components through ColumnDef's `cell` and
 * `header` properties.
 *
 * This is only to be used with Svelte Components - use `renderSnippet` for Svelte Snippets.
 *
 * @example
 * 	;```ts
 * 	// +page.svelte
 * 	const defaultColumns = [
 * 	  columnHelper.accessor('name', {
 * 	    header: header => renderComponent(SortHeader, { label: 'Name', header }),
 * 	  }),
 * 	  columnHelper.accessor('state', {
 * 	    header: header => renderComponent(SortHeader, { label: 'State', header }),
 * 	  }),
 * 	]
 * 	```
 *
 * @param component A Svelte component
 * @param props The props to pass to `component`
 * @returns A `RenderComponentConfig` object that helps svelte-table know how to render the
 *   header/cell component.
 * @see {@link https://tanstack.com/table/latest/docs/guide/column-defs}
 */
export function renderComponent<T extends Component<any>, Props extends ComponentProps<T>>(
	component: T,
	props: Props,
) {
	return new RenderComponentConfig(component, props)
}
/**
 * A helper function to help create cells from Svelte Snippets through ColumnDef's `cell` and
 * `header` properties.
 *
 * The snippet must only take one parameter.
 *
 * This is only to be used with Snippets - use `renderComponent` for Svelte Components.
 *
 * @example
 * 	;```ts
 * 	// +page.svelte
 * 	const defaultColumns = [
 * 	  columnHelper.accessor('name', {
 * 	    cell: cell => renderSnippet(nameSnippet, { name: cell.row.name }),
 * 	  }),
 * 	  columnHelper.accessor('state', {
 * 	    cell: cell => renderSnippet(stateSnippet, { state: cell.row.state }),
 * 	  }),
 * 	]
 * 	```
 *
 * @param snippet
 * @param params
 * @returns - A `RenderSnippetConfig` object that helps svelte-table know how to render the
 *   header/cell snippet.
 * @see {@link https://tanstack.com/table/latest/docs/guide/column-defs}
 */
export function renderSnippet<TProps>(snippet: Snippet<[TProps]>, params: TProps) {
	return new RenderSnippetConfig(snippet, params)
}
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-content.svelte">
<script lang="ts">
import { Dialog as DialogPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import X from 'lucide-svelte/icons/x'
import type { Snippet } from 'svelte'
import { cn } from '$shadcn/utils.js'
import * as Dialog from './index.js'
let {
	children,
	class: className,
	portalProps,
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<DialogPrimitive.ContentProps> & {
	children: Snippet
	portalProps?: DialogPrimitive.PortalProps
} = $props()
</script>
<Dialog.Portal {...portalProps}>
	<Dialog.Overlay />
	<DialogPrimitive.Content
		class={cn(
			`data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
			data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
			data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]
			data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-background
			fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4
			border p-6 shadow-lg duration-200 sm:rounded-lg`,
			className,
		)}
		bind:ref
		{...restProps}
	>
		{@render children?.()}
		<DialogPrimitive.Close
			class="ring-offset-background focus:ring-ring focus:outline-hidden absolute right-4 top-4 rounded-sm
				opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2
				disabled:pointer-events-none"
		>
			<X class="size-4" />
			<span class="sr-only">Close</span>
		</DialogPrimitive.Close>
	</DialogPrimitive.Content>
</Dialog.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-description.svelte">
<script lang="ts">
import { Dialog as DialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: DialogPrimitive.DescriptionProps = $props()
</script>
<DialogPrimitive.Description
	class={cn('text-muted-foreground text-sm', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-overlay.svelte">
<script lang="ts">
import { Dialog as DialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: DialogPrimitive.OverlayProps = $props()
</script>
<DialogPrimitive.Overlay
	class={cn(
		`data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
		data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/dialog-title.svelte">
<script lang="ts">
import { Dialog as DialogPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: DialogPrimitive.TitleProps = $props()
</script>
<DialogPrimitive.Title
	class={cn('text-lg font-semibold leading-none tracking-tight', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dialog/index.ts">
import { Dialog as DialogPrimitive } from 'bits-ui'
const { Root } = DialogPrimitive
const { Trigger } = DialogPrimitive
const { Close } = DialogPrimitive
const { Portal } = DialogPrimitive
export {
	Close,
	//
	Root as Dialog,
	Close as DialogClose,
	Portal as DialogPortal,
	Trigger as DialogTrigger,
	Portal,
	Root,
	Trigger,
}
export { default as Content, default as DialogContent } from './dialog-content.svelte'
export { default as Description, default as DialogDescription } from './dialog-description.svelte'
export { default as DialogFooter, default as Footer } from './dialog-footer.svelte'
export { default as DialogHeader, default as Header } from './dialog-header.svelte'
export { default as DialogOverlay, default as Overlay } from './dialog-overlay.svelte'
export { default as DialogTitle, default as Title } from './dialog-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-content.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
import { cn } from '$shadcn/utils.js'
import DrawerOverlay from './drawer-overlay.svelte'
let {
	children,
	class: className,
	portalProps,
	ref = $bindable(),
	...restProps
}: DrawerPrimitive.ContentProps & {
	portalProps?: DrawerPrimitive.PortalProps
} = $props()
</script>
<DrawerPrimitive.Portal {...portalProps}>
	<DrawerOverlay />
	<DrawerPrimitive.Content
		class={cn(
			'bg-background fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border',
			className,
		)}
		bind:ref
		{...restProps}
	>
		<div class="bg-muted mx-auto mt-4 h-2 w-[100px] rounded-full"></div>
		{@render children?.()}
	</DrawerPrimitive.Content>
</DrawerPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-description.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: DrawerPrimitive.DescriptionProps = $props()
</script>
<DrawerPrimitive.Description
	class={cn('text-muted-foreground text-sm', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('mt-auto flex flex-col gap-2 p-4', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('grid gap-1.5 p-4 text-center sm:text-left', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-nested.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
let {
	activeSnapPoint = $bindable(),
	open = $bindable(false),
	shouldScaleBackground = true,
	...restProps
}: DrawerPrimitive.RootProps = $props()
</script>
<DrawerPrimitive.NestedRoot {shouldScaleBackground} bind:open bind:activeSnapPoint {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-overlay.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: DrawerPrimitive.OverlayProps = $props()
</script>
<DrawerPrimitive.Overlay
	class={cn('fixed inset-0 z-50 bg-black/80', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer-title.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: DrawerPrimitive.TitleProps = $props()
</script>
<DrawerPrimitive.Title
	class={cn('text-lg font-semibold leading-none tracking-tight', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/drawer.svelte">
<script lang="ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
let {
	activeSnapPoint = $bindable(),
	open = $bindable(false),
	shouldScaleBackground = true,
	...restProps
}: DrawerPrimitive.RootProps = $props()
</script>
<DrawerPrimitive.Root {shouldScaleBackground} bind:open bind:activeSnapPoint {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/drawer/index.ts">
import { Drawer as DrawerPrimitive } from 'vaul-svelte'
const { Trigger } = DrawerPrimitive
const { Portal } = DrawerPrimitive
const { Close } = DrawerPrimitive
export {
	Close,
	//
	Close as DrawerClose,
	Portal as DrawerPortal,
	Trigger as DrawerTrigger,
	Portal,
	Trigger,
}
export { default as Drawer, default as Root } from './drawer.svelte'
export { default as Content, default as DrawerContent } from './drawer-content.svelte'
export { default as Description, default as DrawerDescription } from './drawer-description.svelte'
export { default as DrawerFooter, default as Footer } from './drawer-footer.svelte'
export { default as DrawerHeader, default as Header } from './drawer-header.svelte'
export { default as DrawerNestedRoot, default as NestedRoot } from './drawer-nested.svelte'
export { default as DrawerOverlay, default as Overlay } from './drawer-overlay.svelte'
export { default as DrawerTitle, default as Title } from './drawer-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-checkbox-item.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import Check from 'lucide-svelte/icons/check'
import Minus from 'lucide-svelte/icons/minus'
import type { Snippet } from 'svelte'
import { cn } from '$shadcn/utils.js'
let {
	checked = $bindable(false),
	children: childrenProp,
	class: className,
	indeterminate = $bindable(false),
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<DropdownMenuPrimitive.CheckboxItemProps> & {
	children?: Snippet
} = $props()
</script>
<DropdownMenuPrimitive.CheckboxItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	bind:checked
	bind:indeterminate
	{...restProps}
>
	{#snippet children({ checked, indeterminate })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if indeterminate}
				<Minus class="size-4" />
			{:else}
				<Check class={cn('size-4', !checked && 'text-transparent')} />
			{/if}
		</span>
		{@render childrenProp?.()}
	{/snippet}
</DropdownMenuPrimitive.CheckboxItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-content.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	portalProps,
	ref = $bindable(),
	sideOffset = 4,
	...restProps
}: DropdownMenuPrimitive.ContentProps & {
	portalProps?: DropdownMenuPrimitive.PortalProps
} = $props()
</script>
<DropdownMenuPrimitive.Portal {...portalProps}>
	<DropdownMenuPrimitive.Content
		class={cn(
			`bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out
			data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95
			data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2
			data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2
			data-[side=top]:slide-in-from-bottom-2 outline-hidden z-50 min-w-[8rem] overflow-hidden rounded-md
			border p-1 shadow-md`,
			className,
		)}
		{sideOffset}
		bind:ref
		{...restProps}
	/>
</DropdownMenuPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-group-heading.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: DropdownMenuPrimitive.GroupHeadingProps & {
	inset?: boolean
} = $props()
</script>
<DropdownMenuPrimitive.GroupHeading
	class={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-item.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: DropdownMenuPrimitive.ItemProps & {
	inset?: boolean
} = $props()
</script>
<DropdownMenuPrimitive.Item
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center gap-2 rounded-sm px-2 py-1.5 text-sm transition-colors [&_svg]:pointer-events-none
		[&_svg]:size-4 [&_svg]:shrink-0`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-label.svelte">
<script lang="ts">
import { type WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	inset?: boolean
} = $props()
</script>
<div
	bind:this={ref}
	class={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-radio-item.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive, type WithoutChild } from 'bits-ui'
import Circle from 'lucide-svelte/icons/circle'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<DropdownMenuPrimitive.RadioItemProps> = $props()
</script>
<DropdownMenuPrimitive.RadioItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{#snippet children({ checked })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if checked}
				<Circle class="size-2 fill-current" />
			{/if}
		</span>
		{@render childrenProp?.({ checked })}
	{/snippet}
</DropdownMenuPrimitive.RadioItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-separator.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: DropdownMenuPrimitive.SeparatorProps = $props()
</script>
<DropdownMenuPrimitive.Separator
	class={cn('bg-muted -mx-1 my-1 h-px', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-shortcut.svelte">
<script lang="ts">
import { type WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLSpanElement>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('ml-auto text-xs tracking-widest opacity-60', className)}
	{...restProps}
>
	{@render children?.()}
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-sub-content.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: DropdownMenuPrimitive.SubContentProps = $props()
</script>
<DropdownMenuPrimitive.SubContent
	class={cn(
		`bg-popover text-popover-foreground focus:outline-hidden z-50 min-w-[8rem] rounded-md border p-1
		shadow-lg`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/dropdown-menu-sub-trigger.svelte">
<script lang="ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: DropdownMenuPrimitive.SubTriggerProps & {
	inset?: boolean
} = $props()
</script>
<DropdownMenuPrimitive.SubTrigger
	class={cn(
		`data-highlighted:bg-accent data-[state=open]:bg-accent outline-hidden flex cursor-default
		select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm [&_svg]:pointer-events-none
		[&_svg]:size-4 [&_svg]:shrink-0`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
>
	{@render children?.()}
	<ChevronRight class="ml-auto" />
</DropdownMenuPrimitive.SubTrigger>
</file>

<file path="libraries/ui/src/shadcn/components/ui/dropdown-menu/index.ts">
import { DropdownMenu as DropdownMenuPrimitive } from 'bits-ui'
const { Sub } = DropdownMenuPrimitive
const { Root } = DropdownMenuPrimitive
const { Trigger } = DropdownMenuPrimitive
const { Group } = DropdownMenuPrimitive
const { RadioGroup } = DropdownMenuPrimitive
export {
	Root as DropdownMenu,
	Group as DropdownMenuGroup,
	RadioGroup as DropdownMenuRadioGroup,
	Sub as DropdownMenuSub,
	Trigger as DropdownMenuTrigger,
	Group,
	RadioGroup,
	Root,
	Sub,
	Trigger,
}
export {
	default as CheckboxItem,
	default as DropdownMenuCheckboxItem,
} from './dropdown-menu-checkbox-item.svelte'
export { default as Content, default as DropdownMenuContent } from './dropdown-menu-content.svelte'
export {
	default as DropdownMenuGroupHeading,
	default as GroupHeading,
} from './dropdown-menu-group-heading.svelte'
export { default as DropdownMenuItem, default as Item } from './dropdown-menu-item.svelte'
export { default as DropdownMenuLabel, default as Label } from './dropdown-menu-label.svelte'
export {
	default as DropdownMenuRadioItem,
	default as RadioItem,
} from './dropdown-menu-radio-item.svelte'
export {
	default as DropdownMenuSeparator,
	default as Separator,
} from './dropdown-menu-separator.svelte'
export {
	default as DropdownMenuShortcut,
	default as Shortcut,
} from './dropdown-menu-shortcut.svelte'
export {
	default as DropdownMenuSubContent,
	default as SubContent,
} from './dropdown-menu-sub-content.svelte'
export {
	default as DropdownMenuSubTrigger,
	default as SubTrigger,
} from './dropdown-menu-sub-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-button.svelte">
<script lang="ts">
import * as Button from '$shadcn/components/ui/button/index.js'
let { ref = $bindable(), ...restProps }: Button.Props = $props()
</script>
<Button.Root type="submit" bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-description.svelte">
<script lang="ts">
import type { WithoutChild } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<FormPrimitive.DescriptionProps> = $props()
</script>
<FormPrimitive.Description
	class={cn('text-muted-foreground text-sm', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-element-field.svelte">
<script lang="ts" module>
import type { FormPathLeaves as _FormPathLeaves } from 'sveltekit-superforms'
type T = Record<string, unknown>
type U = _FormPathLeaves<T>
</script>
<script generics="T extends Record<string, unknown>, U extends _FormPathLeaves<T>" lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	form,
	name,
	ref = $bindable(),
	...restProps
}: FormPrimitive.ElementFieldProps<T, U> &
	WithoutChildren<WithElementRef<HTMLAttributes<HTMLDivElement>>> = $props()
</script>
<FormPrimitive.ElementField {name} {form}>
	{#snippet children({ constraints, errors, tainted, value })}
		<div bind:this={ref} class={cn('space-y-2', className)} {...restProps}>
			{@render childrenProp?.({ constraints, errors, tainted, value: value as T[U] })}
		</div>
	{/snippet}
</FormPrimitive.ElementField>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-field-errors.svelte">
<script lang="ts">
import type { WithoutChild } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	errorClasses,
	ref = $bindable(),
	...restProps
}: WithoutChild<FormPrimitive.FieldErrorsProps> & {
	errorClasses?: string | undefined | undefined
} = $props()
</script>
<FormPrimitive.FieldErrors
	class={cn('text-destructive text-sm font-medium', className)}
	bind:ref
	{...restProps}
>
	{#snippet children({ errorProps, errors })}
		{#if childrenProp}
			{@render childrenProp({ errorProps, errors })}
		{:else}
			{#each errors as error}
				<div {...errorProps} class={cn(errorClasses)}>{error}</div>
			{/each}
		{/if}
	{/snippet}
</FormPrimitive.FieldErrors>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-field.svelte">
<script lang="ts" module>
import type { FormPath as _FormPath } from 'sveltekit-superforms'
type T = Record<string, unknown>
type U = _FormPath<T>
</script>
<script generics="T extends Record<string, unknown>, U extends _FormPath<T>" lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	form,
	name,
	ref = $bindable(),
	...restProps
}: FormPrimitive.FieldProps<T, U> &
	WithoutChildren<WithElementRef<HTMLAttributes<HTMLDivElement>>> = $props()
</script>
<FormPrimitive.Field {name} {form}>
	{#snippet children({ constraints, errors, tainted, value })}
		<div bind:this={ref} class={cn('space-y-2', className)} {...restProps}>
			{@render childrenProp?.({ constraints, errors, tainted, value: value as T[U] })}
		</div>
	{/snippet}
</FormPrimitive.Field>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-fieldset.svelte">
<script lang="ts" module>
import type { FormPath as _FormPath } from 'sveltekit-superforms'
type T = Record<string, unknown>
type U = _FormPath<T>
</script>
<script generics="T extends Record<string, unknown>, U extends _FormPath<T>" lang="ts">
import type { WithoutChild } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	form,
	name,
	ref = $bindable(),
	...restProps
}: WithoutChild<FormPrimitive.FieldsetProps<T, U>> = $props()
</script>
<FormPrimitive.Fieldset {name} class={cn('space-y-2', className)} {form} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-label.svelte">
<script lang="ts">
import type { WithoutChild } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import { Label } from '$shadcn/components/ui/label/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<FormPrimitive.LabelProps> = $props()
</script>
<FormPrimitive.Label {...restProps} bind:ref>
	{#snippet child({ props })}
		<Label {...props} class={cn('data-fs-error:text-destructive', className)}>
			{@render children?.()}
		</Label>
	{/snippet}
</FormPrimitive.Label>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/form-legend.svelte">
<script lang="ts">
import type { WithoutChild } from 'bits-ui'
import * as FormPrimitive from 'formsnap'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<FormPrimitive.LegendProps> = $props()
</script>
<FormPrimitive.Legend
	class={cn('data-fs-error:text-destructive text-sm font-medium leading-none', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/form/index.ts">
import * as FormPrimitive from 'formsnap'
const { Control } = FormPrimitive
export {
	Control,
	Control as FormControl,
	//
}
export { default as Button, default as FormButton } from './form-button.svelte'
export { default as Description, default as FormDescription } from './form-description.svelte'
export { default as ElementField, default as FormElementField } from './form-element-field.svelte'
export { default as Field, default as FormField } from './form-field.svelte'
export { default as FieldErrors, default as FormFieldErrors } from './form-field-errors.svelte'
export { default as Fieldset, default as FormFieldset } from './form-fieldset.svelte'
export { default as FormLabel, default as Label } from './form-label.svelte'
export { default as FormLegend, default as Legend } from './form-legend.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/hover-card/hover-card-content.svelte">
<script lang="ts">
import { LinkPreview as HoverCardPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	align = 'center',
	class: className,
	portalProps,
	ref = $bindable(),
	sideOffset = 4,
	...restProps
}: HoverCardPrimitive.ContentProps & {
	portalProps?: HoverCardPrimitive.PortalProps
} = $props()
</script>
<HoverCardPrimitive.Portal {...portalProps}>
	<HoverCardPrimitive.Content
		class={cn(
			'bg-popover text-popover-foreground outline-hidden z-50 mt-3 w-64 rounded-md border p-4 shadow-md',
			className,
		)}
		{align}
		{sideOffset}
		bind:ref
		{...restProps}
	/>
</HoverCardPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/hover-card/index.ts">
import { LinkPreview as HoverCardPrimitive } from 'bits-ui'
const { Root } = HoverCardPrimitive
const { Trigger } = HoverCardPrimitive
export { Root as HoverCard, Trigger as HoverCardTrigger, Root, Trigger }
export { default as Content, default as HoverCardContent } from './hover-card-content.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/input-otp/index.ts">
export { default as InputOTP, default as Root } from './input-otp.svelte'
export { default as Group, default as InputOTPGroup } from './input-otp-group.svelte'
export { default as InputOTPSeparator, default as Separator } from './input-otp-separator.svelte'
export { default as InputOTPSlot, default as Slot } from './input-otp-slot.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/input-otp/input-otp-group.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} class={cn('flex items-center', className)} {...restProps}>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/input-otp/input-otp-separator.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import Dot from 'lucide-svelte/icons/dot'
import type { HTMLAttributes } from 'svelte/elements'
let {
	children,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div bind:this={ref} role="separator" {...restProps}>
	{#if children}
		{@render children?.()}
	{:else}
		<Dot />
	{/if}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/input-otp/input-otp-slot.svelte">
<script lang="ts">
import { PinInput as InputOTPPrimitive } from 'bits-ui'
import type { ComponentProps } from 'svelte'
import { cn } from '$shadcn/utils.js'
let {
	cell,
	class: className,
	ref = $bindable(),
	...restProps
}: ComponentProps<typeof InputOTPPrimitive.Cell> = $props()
</script>
<InputOTPPrimitive.Cell
	class={cn(
		`border-input relative flex h-10 w-10 items-center justify-center border-y border-r text-sm
		transition-all first:rounded-l-md first:border-l last:rounded-r-md`,
		cell.isActive && 'ring-ring ring-offset-background z-10 ring-2',
		className,
	)}
	{cell}
	bind:ref
	{...restProps}
>
	{cell.char}
	{#if cell.hasFakeCaret}
		<div class="pointer-events-none absolute inset-0 flex items-center justify-center">
			<div class="animate-caret-blink bg-foreground h-4 w-px duration-1000"></div>
		</div>
	{/if}
</InputOTPPrimitive.Cell>
</file>

<file path="libraries/ui/src/shadcn/components/ui/input-otp/input-otp.svelte">
<script lang="ts">
import { PinInput as InputOTPPrimitive } from 'bits-ui'
import type { ComponentProps } from 'svelte'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: ComponentProps<typeof InputOTPPrimitive.Root> = $props()
</script>
<InputOTPPrimitive.Root
	class={cn(
		'has-disabled:opacity-50 flex items-center gap-2 disabled:[&_input]:cursor-not-allowed',
		className,
	)}
	bind:ref
	bind:value
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/input/index.ts">
export { default as Input, default as Root } from './input.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/input/input.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLInputAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(),
	...restProps
}: WithElementRef<HTMLInputAttributes> = $props()
</script>
<input
	bind:this={ref}
	class={cn(
		`border-input bg-background ring-offset-background placeholder:text-muted-foreground
		focus-visible:ring-ring focus-visible:outline-hidden flex h-10 w-full rounded-md border px-3 py-2
		text-base file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:ring-2
		focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm`,
		className,
	)}
	bind:value
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/label/index.ts">
export { default as Label, default as Root } from './label.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/label/label.svelte">
<script lang="ts">
import { Label as LabelPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: LabelPrimitive.RootProps = $props()
</script>
<LabelPrimitive.Root
	class={cn(
		'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/index.ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
const { Menu } = MenubarPrimitive
const { Group } = MenubarPrimitive
const { Sub } = MenubarPrimitive
const { RadioGroup } = MenubarPrimitive
export {
	Group,
	Menu,
	//
	Group as MenubarGroup,
	Menu as MenubarMenu,
	RadioGroup as MenubarRadioGroup,
	Sub as MenubarSub,
	RadioGroup,
	Sub,
}
export { default as Menubar, default as Root } from './menubar.svelte'
export {
	default as CheckboxItem,
	default as MenubarCheckboxItem,
} from './menubar-checkbox-item.svelte'
export { default as Content, default as MenubarContent } from './menubar-content.svelte'
export {
	default as GroupHeading,
	default as MenubarGroupHeading,
} from './menubar-group-heading.svelte'
export { default as Item, default as MenubarItem } from './menubar-item.svelte'
export { default as MenubarRadioItem, default as RadioItem } from './menubar-radio-item.svelte'
export { default as MenubarSeparator, default as Separator } from './menubar-separator.svelte'
export { default as MenubarShortcut, default as Shortcut } from './menubar-shortcut.svelte'
export { default as MenubarSubContent, default as SubContent } from './menubar-sub-content.svelte'
export { default as MenubarSubTrigger, default as SubTrigger } from './menubar-sub-trigger.svelte'
export { default as MenubarTrigger, default as Trigger } from './menubar-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-checkbox-item.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import Check from 'lucide-svelte/icons/check'
import Minus from 'lucide-svelte/icons/minus'
import type { Snippet } from 'svelte'
import { cn } from '$shadcn/utils.js'
let {
	checked = $bindable(false),
	children: childrenProp,
	class: className,
	indeterminate = $bindable(false),
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<MenubarPrimitive.CheckboxItemProps> & {
	children?: Snippet
} = $props()
</script>
<MenubarPrimitive.CheckboxItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	bind:checked
	bind:indeterminate
	{...restProps}
>
	{#snippet children({ checked, indeterminate })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if indeterminate}
				<Minus class="size-4" />
			{:else}
				<Check class={cn('size-4', !checked && 'text-transparent')} />
			{/if}
		</span>
		{@render childrenProp?.()}
	{/snippet}
</MenubarPrimitive.CheckboxItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-content.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	align = 'start',
	alignOffset = -4,
	class: className,
	portalProps,
	ref = $bindable(),
	side = 'bottom',
	sideOffset = 8,
	...restProps
}: MenubarPrimitive.ContentProps & {
	portalProps?: MenubarPrimitive.PortalProps
} = $props()
</script>
<MenubarPrimitive.Portal {...portalProps}>
	<MenubarPrimitive.Content
		class={cn(
			`bg-popover text-popover-foreground focus:outline-hidden z-50 min-w-[12rem] rounded-md border p-1
			shadow-md`,
			className,
		)}
		{align}
		{alignOffset}
		{side}
		{sideOffset}
		bind:ref
		{...restProps}
	/>
</MenubarPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-group-heading.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: MenubarPrimitive.GroupHeadingProps & {
	inset?: boolean
} = $props()
</script>
<MenubarPrimitive.GroupHeading
	class={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-item.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: MenubarPrimitive.ItemProps & {
	inset?: boolean
} = $props()
</script>
<MenubarPrimitive.Item
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm px-2 py-1.5 text-sm`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-radio-item.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive, type WithoutChild } from 'bits-ui'
import Circle from 'lucide-svelte/icons/circle'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<MenubarPrimitive.RadioItemProps> = $props()
</script>
<MenubarPrimitive.RadioItem
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex cursor-default select-none
		items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{#snippet children({ checked })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if checked}
				<Circle class="size-2 fill-current" />
			{/if}
		</span>
		{@render childrenProp?.({ checked })}
	{/snippet}
</MenubarPrimitive.RadioItem>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-separator.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: MenubarPrimitive.SeparatorProps = $props()
</script>
<MenubarPrimitive.Separator
	class={cn('bg-muted -mx-1 my-1 h-px', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-shortcut.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLSpanElement>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('text-muted-foreground ml-auto text-xs tracking-widest', className)}
	{...restProps}
>
	{@render children?.()}
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-sub-content.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: MenubarPrimitive.SubContentProps = $props()
</script>
<MenubarPrimitive.SubContent
	class={cn(
		'bg-popover text-popover-foreground focus:outline-hidden z-50 min-w-max rounded-md border p-1',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-sub-trigger.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive, type WithoutChild } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	inset,
	ref = $bindable(),
	...restProps
}: WithoutChild<MenubarPrimitive.SubTriggerProps> & {
	inset?: boolean
} = $props()
</script>
<MenubarPrimitive.SubTrigger
	class={cn(
		`data-highlighted:bg-accent data-[state=open]:bg-accent data-highlighted:text-accent-foreground
		data-[state=open]:text-accent-foreground outline-hidden data-disabled:pointer-events-none
		data-disabled:opacity-50 flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm`,
		inset && 'pl-8',
		className,
	)}
	bind:ref
	{...restProps}
>
	{@render children?.()}
	<ChevronRight class="ml-auto size-4" />
</MenubarPrimitive.SubTrigger>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar-trigger.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: MenubarPrimitive.TriggerProps = $props()
</script>
<MenubarPrimitive.Trigger
	class={cn(
		`data-highlighted:bg-accent data-[state=open]:bg-accent data-highlighted:text-accent-foreground
		data-[state=open]:text-accent-foreground outline-hidden flex cursor-default select-none items-center
		rounded-sm px-3 py-1.5 text-sm font-medium`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/menubar/menubar.svelte">
<script lang="ts">
import { Menubar as MenubarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: MenubarPrimitive.RootProps = $props()
</script>
<MenubarPrimitive.Root
	class={cn('bg-background flex h-10 items-center space-x-1 rounded-md border p-1', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/index.ts">
export { default as Pagination, default as Root } from './pagination.svelte'
export { default as Content, default as PaginationContent } from './pagination-content.svelte'
export { default as Ellipsis, default as PaginationEllipsis } from './pagination-ellipsis.svelte'
export { default as Item, default as PaginationItem } from './pagination-item.svelte'
export { default as Link, default as PaginationLink } from './pagination-link.svelte'
export {
	default as NextButton,
	default as PaginationNextButton,
} from './pagination-next-button.svelte'
export {
	default as PaginationPrevButton,
	default as PrevButton,
} from './pagination-prev-button.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-content.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLUListElement>> = $props()
</script>
<ul bind:this={ref} class={cn('flex flex-row items-center gap-1', className)} {...restProps}>
	{@render children?.()}
</ul>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-ellipsis.svelte">
<script lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import Ellipsis from 'lucide-svelte/icons/ellipsis'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildren<WithElementRef<HTMLAttributes<HTMLSpanElement>>> = $props()
</script>
<span
	bind:this={ref}
	class={cn('flex size-9 items-center justify-center', className)}
	aria-hidden="true"
	{...restProps}
>
	<Ellipsis class="size-4" />
	<span class="sr-only">More pages</span>
</span>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-item.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLLiAttributes } from 'svelte/elements'
let { children, ref = $bindable(), ...restProps }: WithElementRef<HTMLLiAttributes> = $props()
</script>
<li bind:this={ref} {...restProps}>
	{@render children?.()}
</li>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-link.svelte">
<script lang="ts">
import { Pagination as PaginationPrimitive } from 'bits-ui'
import { buttonVariants, type Props } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	isActive = false,
	page,
	ref = $bindable(),
	size = 'icon',
	...restProps
}: PaginationPrimitive.PageProps &
	Props & {
		isActive: boolean
	} = $props()
</script>
{#snippet Fallback()}
	{page.value}
{/snippet}
<PaginationPrimitive.Page
	class={cn(
		buttonVariants({
			size,
			variant: isActive ? 'outline' : 'ghost',
		}),
		className,
	)}
	children={children || Fallback}
	{page}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-next-button.svelte">
<script lang="ts">
import { Pagination as PaginationPrimitive } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: PaginationPrimitive.NextButtonProps = $props()
</script>
{#snippet Fallback()}
	<span>Next</span>
	<ChevronRight class="size-4" />
{/snippet}
<PaginationPrimitive.NextButton
	class={cn(
		buttonVariants({
			class: 'gap-1 pr-2.5',
			variant: 'ghost',
		}),
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination-prev-button.svelte">
<script lang="ts">
import { Pagination as PaginationPrimitive } from 'bits-ui'
import ChevronLeft from 'lucide-svelte/icons/chevron-left'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: PaginationPrimitive.PrevButtonProps = $props()
</script>
{#snippet Fallback()}
	<ChevronLeft class="size-4" />
	<span>Previous</span>
{/snippet}
<PaginationPrimitive.PrevButton
	class={cn(
		buttonVariants({
			class: 'gap-1 pl-2.5',
			variant: 'ghost',
		}),
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/pagination/pagination.svelte">
<script lang="ts">
import { Pagination as PaginationPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	count = 0,
	page = $bindable(1),
	perPage = 10,
	ref = $bindable(),
	siblingCount = 1,
	...restProps
}: PaginationPrimitive.RootProps = $props()
</script>
<PaginationPrimitive.Root
	class={cn('mx-auto flex w-full flex-col items-center', className)}
	{count}
	{perPage}
	{siblingCount}
	bind:ref
	bind:page
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/popover/index.ts">
import { Popover as PopoverPrimitive } from 'bits-ui'
const { Root } = PopoverPrimitive
const { Trigger } = PopoverPrimitive
const { Close } = PopoverPrimitive
export {
	Close,
	//
	Root as Popover,
	Close as PopoverClose,
	Trigger as PopoverTrigger,
	Root,
	Trigger,
}
export { default as Content, default as PopoverContent } from './popover-content.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/popover/popover-content.svelte">
<script lang="ts">
import { Popover as PopoverPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	align = 'center',
	class: className,
	portalProps,
	ref = $bindable(),
	sideOffset = 4,
	...restProps
}: PopoverPrimitive.ContentProps & {
	portalProps?: PopoverPrimitive.PortalProps
} = $props()
</script>
<PopoverPrimitive.Portal {...portalProps}>
	<PopoverPrimitive.Content
		class={cn(
			`bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out
			data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95
			data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2
			data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2
			data-[side=top]:slide-in-from-bottom-2 outline-hidden z-50 w-72 rounded-md border p-4 shadow-md`,
			className,
		)}
		{align}
		{sideOffset}
		bind:ref
		{...restProps}
	/>
</PopoverPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/progress/index.ts">
export { default as Progress, default as Root } from './progress.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/progress/progress.svelte">
<script lang="ts">
import { Progress as ProgressPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	max = 100,
	ref = $bindable(),
	value,
	...restProps
}: WithoutChildrenOrChild<ProgressPrimitive.RootProps> = $props()
</script>
<ProgressPrimitive.Root
	class={cn('bg-secondary relative h-4 w-full overflow-hidden rounded-full', className)}
	{max}
	{value}
	bind:ref
	{...restProps}
>
	<div
		style={`transform: translateX(-${100 - (100 * (value ?? 0)) / (max ?? 1)}%)`}
		class="bg-primary h-full w-full flex-1 transition-all"
	></div>
</ProgressPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/radio-group/index.ts">
export { default as RadioGroup, default as Root } from './radio-group.svelte'
export { default as Item, default as RadioGroupItem } from './radio-group-item.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/radio-group/radio-group-item.svelte">
<script lang="ts">
import { RadioGroup as RadioGroupPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import Circle from 'lucide-svelte/icons/circle'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<RadioGroupPrimitive.ItemProps> = $props()
</script>
<RadioGroupPrimitive.Item
	class={cn(
		`border-primary text-primary ring-offset-background focus-visible:ring-ring focus:outline-hidden
		aspect-square size-4 rounded-full border focus-visible:ring-2 focus-visible:ring-offset-2
		disabled:cursor-not-allowed disabled:opacity-50`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{#snippet children({ checked })}
		<div class="flex items-center justify-center">
			{#if checked}
				<Circle class="size-2.5 fill-current text-current" />
			{/if}
		</div>
	{/snippet}
</RadioGroupPrimitive.Item>
</file>

<file path="libraries/ui/src/shadcn/components/ui/radio-group/radio-group.svelte">
<script lang="ts">
import { RadioGroup as RadioGroupPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: RadioGroupPrimitive.RootProps = $props()
</script>
<RadioGroupPrimitive.Root class={cn('grid gap-2', className)} bind:ref bind:value {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/index.ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
const { GridHead } = RangeCalendarPrimitive
const { GridBody } = RangeCalendarPrimitive
export {
	GridBody,
	GridHead,
	//
}
export { default as RangeCalendar } from './range-calendar.svelte'
export { default as Cell } from './range-calendar-cell.svelte'
export { default as Day } from './range-calendar-day.svelte'
export { default as Grid } from './range-calendar-grid.svelte'
export { default as GridRow } from './range-calendar-grid-row.svelte'
export { default as HeadCell } from './range-calendar-head-cell.svelte'
export { default as Header } from './range-calendar-header.svelte'
export { default as Heading } from './range-calendar-heading.svelte'
export { default as Months } from './range-calendar-months.svelte'
export { default as NextButton } from './range-calendar-next-button.svelte'
export { default as PrevButton } from './range-calendar-prev-button.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-cell.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.CellProps = $props()
</script>
<RangeCalendarPrimitive.Cell
	class={cn(
		`[&:has([data-selected])]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50
		relative size-9 p-0 text-center text-sm focus-within:relative focus-within:z-20
		first:[&:has([data-selected])]:rounded-l-md last:[&:has([data-selected])]:rounded-r-md
		[&:has([data-selected][data-selection-end])]:rounded-r-md
		[&:has([data-selected][data-selection-start])]:rounded-l-md`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-day.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.DayProps = $props()
export { className as class }
</script>
<RangeCalendarPrimitive.Day
	class={cn(
		buttonVariants({ variant: 'ghost' }),
		'data-selected:opacity-100 size-9 p-0 font-normal',
		`[&[data-today]:not([data-selected])]:bg-accent
		[&[data-today]:not([data-selected])]:text-accent-foreground`,
		// Selection Start
		`data-selection-start:bg-primary data-selection-start:text-primary-foreground
		data-selection-start:hover:bg-primary data-selection-start:hover:text-primary-foreground
		data-selection-start:focus:bg-primary data-selection-start:focus:text-primary-foreground`,
		// Selection End
		`data-selection-end:bg-primary data-selection-end:text-primary-foreground
		data-selection-end:hover:bg-primary data-selection-end:hover:text-primary-foreground
		data-selection-end:focus:bg-primary data-selection-end:focus:text-primary-foreground`,
		// Outside months
		`data-outside-month:text-muted-foreground [&[data-outside-month][data-selected]]:bg-accent/50
		[&[data-outside-month][data-selected]]:text-muted-foreground data-outside-month:pointer-events-none
		data-outside-month:opacity-50 [&[data-outside-month][data-selected]]:opacity-30`,
		// Disabled
		'data-disabled:text-muted-foreground data-disabled:opacity-50',
		// Unavailable
		'data-unavailable:text-destructive-foreground data-unavailable:line-through',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-grid-row.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.GridRowProps = $props()
</script>
<RangeCalendarPrimitive.GridRow class={cn('flex', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-grid.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.GridProps = $props()
</script>
<RangeCalendarPrimitive.Grid
	class={cn('w-full border-collapse space-y-1', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-head-cell.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.HeadCellProps = $props()
</script>
<RangeCalendarPrimitive.HeadCell
	class={cn('text-muted-foreground w-9 rounded-md text-[0.8rem] font-normal', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-header.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.HeaderProps = $props()
</script>
<RangeCalendarPrimitive.Header
	class={cn('relative flex w-full items-center justify-between pt-1', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-heading.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.HeadingProps = $props()
</script>
<RangeCalendarPrimitive.Heading
	class={cn('text-sm font-medium', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-months.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-next-button.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import ChevronRight from 'lucide-svelte/icons/chevron-right'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.NextButtonProps = $props()
</script>
{#snippet Fallback()}
	<ChevronRight class="size-4" />
{/snippet}
<RangeCalendarPrimitive.NextButton
	class={cn(
		buttonVariants({ variant: 'outline' }),
		'size-7 bg-transparent p-0 opacity-50 hover:opacity-100',
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar-prev-button.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive } from 'bits-ui'
import ChevronLeft from 'lucide-svelte/icons/chevron-left'
import { buttonVariants } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: RangeCalendarPrimitive.PrevButtonProps = $props()
</script>
{#snippet Fallback()}
	<ChevronLeft class="size-4" />
{/snippet}
<RangeCalendarPrimitive.PrevButton
	class={cn(
		buttonVariants({ variant: 'outline' }),
		'size-7 bg-transparent p-0 opacity-50 hover:opacity-100',
		className,
	)}
	children={children || Fallback}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/range-calendar/range-calendar.svelte">
<script lang="ts">
import { RangeCalendar as RangeCalendarPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
import * as RangeCalendar from './index.js'
let {
	class: className,
	placeholder = $bindable(),
	ref = $bindable(),
	value = $bindable(),
	weekdayFormat = 'short',
	...restProps
}: WithoutChildrenOrChild<RangeCalendarPrimitive.RootProps> = $props()
</script>
<RangeCalendarPrimitive.Root
	class={cn('p-3', className)}
	{weekdayFormat}
	bind:ref
	bind:value
	bind:placeholder
	{...restProps}
>
	{#snippet children({ months, weekdays })}
		<RangeCalendar.Header>
			<RangeCalendar.PrevButton />
			<RangeCalendar.Heading />
			<RangeCalendar.NextButton />
		</RangeCalendar.Header>
		<RangeCalendar.Months>
			{#each months as month}
				<RangeCalendar.Grid>
					<RangeCalendar.GridHead>
						<RangeCalendar.GridRow class="flex">
							{#each weekdays as weekday}
								<RangeCalendar.HeadCell>
									{weekday.slice(0, 2)}
								</RangeCalendar.HeadCell>
							{/each}
						</RangeCalendar.GridRow>
					</RangeCalendar.GridHead>
					<RangeCalendar.GridBody>
						{#each month.weeks as weekDates}
							<RangeCalendar.GridRow class="mt-2 w-full">
								{#each weekDates as date}
									<RangeCalendar.Cell {date} month={month.value}>
										<RangeCalendar.Day />
									</RangeCalendar.Cell>
								{/each}
							</RangeCalendar.GridRow>
						{/each}
					</RangeCalendar.GridBody>
				</RangeCalendar.Grid>
			{/each}
		</RangeCalendar.Months>
	{/snippet}
</RangeCalendarPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/resizable/index.ts">
export { default as Handle, default as ResizableHandle } from './resizable-handle.svelte'
export { default as PaneGroup, default as ResizablePaneGroup } from './resizable-pane-group.svelte'
export { Pane, Pane as ResizablePane } from 'paneforge'
</file>

<file path="libraries/ui/src/shadcn/components/ui/resizable/resizable-handle.svelte">
<script lang="ts">
import type { WithoutChildrenOrChild } from 'bits-ui'
import GripVertical from 'lucide-svelte/icons/grip-vertical'
import * as ResizablePrimitive from 'paneforge'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	withHandle = false,
	...restProps
}: WithoutChildrenOrChild<ResizablePrimitive.PaneResizerProps> & {
	withHandle?: boolean
} = $props()
</script>
<ResizablePrimitive.PaneResizer
	class={cn(
		`bg-border focus-visible:ring-ring focus-visible:outline-hidden relative flex w-px items-center
		justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2
		focus-visible:ring-1 focus-visible:ring-offset-1 data-[direction=vertical]:h-px
		data-[direction=vertical]:w-full data-[direction=vertical]:after:left-0
		data-[direction=vertical]:after:h-1 data-[direction=vertical]:after:w-full
		data-[direction=vertical]:after:-translate-y-1/2 data-[direction=vertical]:after:translate-x-0
		[&[data-direction=vertical]>div]:rotate-90`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{#if withHandle}
		<div class="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-sm border">
			<GripVertical class="size-2.5" />
		</div>
	{/if}
</ResizablePrimitive.PaneResizer>
</file>

<file path="libraries/ui/src/shadcn/components/ui/resizable/resizable-pane-group.svelte">
<script lang="ts">
import * as ResizablePrimitive from 'paneforge'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	this: paneGroup = $bindable(),
	...restProps
}: ResizablePrimitive.PaneGroupProps & {
	this?: ResizablePrimitive.PaneGroup
} = $props()
</script>
<ResizablePrimitive.PaneGroup
	bind:this={paneGroup}
	class={cn('flex h-full w-full data-[direction=vertical]:flex-col', className)}
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/scroll-area/index.ts">
export { default as Root, default as ScrollArea } from './scroll-area.svelte'
export {
	default as ScrollAreaScrollbar,
	default as Scrollbar,
} from './scroll-area-scrollbar.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/scroll-area/scroll-area-scrollbar.svelte">
<script lang="ts">
import { ScrollArea as ScrollAreaPrimitive, type WithoutChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	orientation = 'vertical',
	ref = $bindable(),
	...restProps
}: WithoutChild<ScrollAreaPrimitive.ScrollbarProps> = $props()
</script>
<ScrollAreaPrimitive.Scrollbar
	class={cn(
		'flex touch-none select-none transition-colors',
		orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-px',
		orientation === 'horizontal' && 'h-2.5 w-full border-t border-t-transparent p-px',
		className,
	)}
	{orientation}
	bind:ref
	{...restProps}
>
	{@render children?.()}
	<ScrollAreaPrimitive.Thumb
		class={cn('bg-border relative rounded-full', orientation === 'vertical' && 'flex-1')}
	/>
</ScrollAreaPrimitive.Scrollbar>
</file>

<file path="libraries/ui/src/shadcn/components/ui/scroll-area/scroll-area.svelte">
<script lang="ts">
import { ScrollArea as ScrollAreaPrimitive, type WithoutChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
import { Scrollbar } from './index.js'
let {
	children,
	class: className,
	orientation = 'vertical',
	ref = $bindable(),
	scrollbarXClasses = '',
	scrollbarYClasses = '',
	...restProps
}: WithoutChild<ScrollAreaPrimitive.RootProps> & {
	orientation?: 'both' | 'horizontal' | 'vertical' | undefined
	scrollbarXClasses?: string | undefined
	scrollbarYClasses?: string | undefined
} = $props()
</script>
<ScrollAreaPrimitive.Root bind:ref {...restProps} class={cn('relative overflow-hidden', className)}>
	<ScrollAreaPrimitive.Viewport class="h-full w-full rounded-[inherit]">
		{@render children?.()}
	</ScrollAreaPrimitive.Viewport>
	{#if orientation === 'vertical' || orientation === 'both'}
		<Scrollbar class={scrollbarYClasses} orientation="vertical" />
	{/if}
	{#if orientation === 'horizontal' || orientation === 'both'}
		<Scrollbar class={scrollbarXClasses} orientation="horizontal" />
	{/if}
	<ScrollAreaPrimitive.Corner />
</ScrollAreaPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/index.ts">
import { Select as SelectPrimitive } from 'bits-ui'
const { Root } = SelectPrimitive
const { Group } = SelectPrimitive
export {
	Group,
	Root,
	//
	Root as Select,
	Group as SelectGroup,
}
export { default as Content, default as SelectContent } from './select-content.svelte'
export {
	default as GroupHeading,
	default as SelectGroupHeading,
} from './select-group-heading.svelte'
export { default as Item, default as SelectItem } from './select-item.svelte'
export {
	default as ScrollDownButton,
	default as SelectScrollDownButton,
} from './select-scroll-down-button.svelte'
export {
	default as ScrollUpButton,
	default as SelectScrollUpButton,
} from './select-scroll-up-button.svelte'
export { default as SelectSeparator, default as Separator } from './select-separator.svelte'
export { default as SelectTrigger, default as Trigger } from './select-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-content.svelte">
<script lang="ts">
import { Select as SelectPrimitive, type WithoutChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
import SelectScrollDownButton from './select-scroll-down-button.svelte'
import SelectScrollUpButton from './select-scroll-up-button.svelte'
let {
	children,
	class: className,
	portalProps,
	ref = $bindable(),
	sideOffset = 4,
	...restProps
}: WithoutChild<SelectPrimitive.ContentProps> & {
	portalProps?: SelectPrimitive.PortalProps
} = $props()
</script>
<SelectPrimitive.Portal {...portalProps}>
	<SelectPrimitive.Content
		class={cn(
			`data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
			data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
			data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2
			data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 bg-popover
			text-popover-foreground relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border
			shadow-md data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1
			data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1`,
			className,
		)}
		{sideOffset}
		bind:ref
		{...restProps}
	>
		<SelectScrollUpButton />
		<SelectPrimitive.Viewport
			class={cn(
				'h-[var(--bits-select-anchor-height)] w-full min-w-[var(--bits-select-anchor-width)] p-1',
			)}
		>
			{@render children?.()}
		</SelectPrimitive.Viewport>
		<SelectScrollDownButton />
	</SelectPrimitive.Content>
</SelectPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-group-heading.svelte">
<script lang="ts">
import { Select as SelectPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: SelectPrimitive.GroupHeadingProps = $props()
</script>
<SelectPrimitive.GroupHeading
	class={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-item.svelte">
<script lang="ts">
import { Select as SelectPrimitive, type WithoutChild } from 'bits-ui'
import Check from 'lucide-svelte/icons/check'
import { cn } from '$shadcn/utils.js'
let {
	children: childrenProp,
	class: className,
	label,
	ref = $bindable(),
	value,
	...restProps
}: WithoutChild<SelectPrimitive.ItemProps> = $props()
</script>
<SelectPrimitive.Item
	class={cn(
		`data-highlighted:bg-accent data-highlighted:text-accent-foreground outline-hidden
		data-disabled:pointer-events-none data-disabled:opacity-50 relative flex w-full cursor-default
		select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm`,
		className,
	)}
	{value}
	bind:ref
	{...restProps}
>
	{#snippet children({ highlighted, selected })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if selected}
				<Check class="size-4" />
			{/if}
		</span>
		{#if childrenProp}
			{@render childrenProp({ highlighted, selected })}
		{:else}
			{label || value}
		{/if}
	{/snippet}
</SelectPrimitive.Item>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-scroll-down-button.svelte">
<script lang="ts">
import { Select as SelectPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import ChevronDown from 'lucide-svelte/icons/chevron-down'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<SelectPrimitive.ScrollDownButtonProps> = $props()
</script>
<SelectPrimitive.ScrollDownButton
	class={cn('flex cursor-default items-center justify-center py-1', className)}
	bind:ref
	{...restProps}
>
	<ChevronDown class="size-4" />
</SelectPrimitive.ScrollDownButton>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-scroll-up-button.svelte">
<script lang="ts">
import { Select as SelectPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import ChevronUp from 'lucide-svelte/icons/chevron-up'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<SelectPrimitive.ScrollUpButtonProps> = $props()
</script>
<SelectPrimitive.ScrollUpButton
	class={cn('flex cursor-default items-center justify-center py-1', className)}
	bind:ref
	{...restProps}
>
	<ChevronUp class="size-4" />
</SelectPrimitive.ScrollUpButton>
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-separator.svelte">
<script lang="ts">
import type { Separator as SeparatorPrimitive } from 'bits-ui'
import { Separator } from '$shadcn/components/ui/separator/index.js'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: SeparatorPrimitive.RootProps = $props()
</script>
<Separator class={cn('bg-muted -mx-1 my-1 h-px', className)} bind:ref {...restProps} />
</file>

<file path="libraries/ui/src/shadcn/components/ui/select/select-trigger.svelte">
<script lang="ts">
import { Select as SelectPrimitive, type WithoutChild } from 'bits-ui'
import ChevronDown from 'lucide-svelte/icons/chevron-down'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChild<SelectPrimitive.TriggerProps> = $props()
</script>
<SelectPrimitive.Trigger
	class={cn(
		`border-input bg-background ring-offset-background data-placeholder:text-muted-foreground
		focus:ring-ring focus:outline-hidden flex h-10 w-full items-center justify-between rounded-md border
		px-3 py-2 text-sm focus:ring-2 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50
		[&>span]:line-clamp-1`,
		className,
	)}
	bind:ref
	{...restProps}
>
	{@render children?.()}
	<ChevronDown class="size-4 opacity-50" />
</SelectPrimitive.Trigger>
</file>

<file path="libraries/ui/src/shadcn/components/ui/separator/index.ts">
export { default as Root, default as Separator } from './separator.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/separator/separator.svelte">
<script lang="ts">
import { Separator as SeparatorPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	orientation = 'horizontal',
	ref = $bindable(),
	...restProps
}: SeparatorPrimitive.RootProps = $props()
</script>
<SeparatorPrimitive.Root
	class={cn(
		'bg-border shrink-0',
		orientation === 'horizontal' ? 'h-[1px] w-full' : 'min-h-full w-[1px]',
		className,
	)}
	{orientation}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/index.ts">
import { Dialog as SheetPrimitive } from 'bits-ui'
const { Root } = SheetPrimitive
const { Close } = SheetPrimitive
const { Trigger } = SheetPrimitive
const { Portal } = SheetPrimitive
export {
	Close,
	Portal,
	Root,
	//
	Root as Sheet,
	Close as SheetClose,
	Portal as SheetPortal,
	Trigger as SheetTrigger,
	Trigger,
}
export { default as Content, default as SheetContent } from './sheet-content.svelte'
export { default as Description, default as SheetDescription } from './sheet-description.svelte'
export { default as Footer, default as SheetFooter } from './sheet-footer.svelte'
export { default as Header, default as SheetHeader } from './sheet-header.svelte'
export { default as Overlay, default as SheetOverlay } from './sheet-overlay.svelte'
export { default as SheetTitle, default as Title } from './sheet-title.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-content.svelte">
<script lang="ts" module>
import { tv, type VariantProps } from 'tailwind-variants'
export const sheetVariants = tv({
	base: 'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 gap-4 p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
	defaultVariants: {
		side: 'right',
	},
	variants: {
		side: {
			bottom:
				'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t',
			left: 'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',
			right:
				'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',
			top: 'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b',
		},
	},
})
export type Side = VariantProps<typeof sheetVariants>['side']
</script>
<script lang="ts">
import { Dialog as SheetPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import X from 'lucide-svelte/icons/x'
import type { Snippet } from 'svelte'
import { cn } from '$shadcn/utils.js'
import SheetOverlay from './sheet-overlay.svelte'
let {
	children,
	class: className,
	portalProps,
	ref = $bindable(),
	side = 'right',
	...restProps
}: WithoutChildrenOrChild<SheetPrimitive.ContentProps> & {
	children: Snippet
	portalProps?: SheetPrimitive.PortalProps
	side?: Side
} = $props()
</script>
<SheetPrimitive.Portal {...portalProps}>
	<SheetOverlay />
	<SheetPrimitive.Content class={cn(sheetVariants({ side }), className)} bind:ref {...restProps}>
		{@render children?.()}
		<SheetPrimitive.Close
			class="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary focus:outline-hidden absolute
				right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2
				focus:ring-offset-2 disabled:pointer-events-none"
		>
			<X class="size-4" />
			<span class="sr-only">Close</span>
		</SheetPrimitive.Close>
	</SheetPrimitive.Content>
</SheetPrimitive.Portal>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-description.svelte">
<script lang="ts">
import { Dialog as SheetPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: SheetPrimitive.DescriptionProps = $props()
</script>
<SheetPrimitive.Description
	class={cn('text-muted-foreground text-sm', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col space-y-2 text-center sm:text-left', className)}
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-overlay.svelte">
<script lang="ts">
import { Dialog as SheetPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: SheetPrimitive.OverlayProps = $props()
export { className as class }
</script>
<SheetPrimitive.Overlay
	class={cn(
		`data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0
		data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sheet/sheet-title.svelte">
<script lang="ts">
import { Dialog as SheetPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: SheetPrimitive.TitleProps = $props()
</script>
<SheetPrimitive.Title
	class={cn('text-foreground text-lg font-semibold', className)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/constants.ts">
export const SIDEBAR_COOKIE_NAME = 'sidebar:state'
export const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
export const SIDEBAR_WIDTH = '16rem'
export const SIDEBAR_WIDTH_MOBILE = '18rem'
export const SIDEBAR_WIDTH_ICON = '3rem'
export const SIDEBAR_KEYBOARD_SHORTCUT = 'b'
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/context.svelte.ts">
import { getContext, setContext } from 'svelte'
import { IsMobile } from '$shadcn/hooks/is-mobile.svelte.js'
import { SIDEBAR_KEYBOARD_SHORTCUT } from './constants.js'
type Getter<T> = () => T
export type SidebarStateProps = {
	/**
	 * A getter function that returns the current open state of the sidebar. We use a getter function
	 * here to support `bind:open` on the `Sidebar.Provider` component.
	 */
	open: Getter<boolean>
	/**
	 * A function that sets the open state of the sidebar. To support `bind:open`, we need a source of
	 * truth for changing the open state to ensure it will be synced throughout the sub-components and
	 * any `bind:` references.
	 */
	setOpen: (open: boolean) => void
}
class SidebarState {
	readonly props: SidebarStateProps
	open = $derived.by(() => this.props.open())
	openMobile = $state(false)
	setOpen: SidebarStateProps['setOpen']
	state = $derived.by(() => (this.open ? 'expanded' : 'collapsed'))
	// Convenience getter for checking if the sidebar is mobile
	// without this, we would need to use `sidebar.isMobile.current` everywhere
	get isMobile() {
		return this.#isMobile.current
	}
	#isMobile: IsMobile
	constructor(props: SidebarStateProps) {
		this.setOpen = props.setOpen
		this.#isMobile = new IsMobile()
		this.props = props
	}
	// Event handler to apply to the `<svelte:window>`
	handleShortcutKeydown = (e: KeyboardEvent) => {
		if (e.key === SIDEBAR_KEYBOARD_SHORTCUT && (e.metaKey || e.ctrlKey)) {
			e.preventDefault()
			this.toggle()
		}
	}
	setOpenMobile = (value: boolean) => {
		this.openMobile = value
	}
	toggle = () => {
		return this.#isMobile.current ? (this.openMobile = !this.openMobile) : this.setOpen(!this.open)
	}
}
const SYMBOL_KEY = 'scn-sidebar'
/**
 * Instantiates a new `SidebarState` instance and sets it in the context.
 *
 * @param props The constructor props for the `SidebarState` class.
 * @returns The `SidebarState` instance.
 */
export function setSidebar(props: SidebarStateProps): SidebarState {
	return setContext(Symbol.for(SYMBOL_KEY), new SidebarState(props))
}
/**
 * Retrieves the `SidebarState` instance from the context. This is a class instance, so you cannot
 * destructure it.
 *
 * @returns The `SidebarState` instance.
 */
export function useSidebar(): SidebarState {
	return getContext(Symbol.for(SYMBOL_KEY))
}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/index.ts">
export { useSidebar } from './context.svelte.js'
export { default as Root, default as Sidebar } from './sidebar.svelte'
export { default as Content, default as SidebarContent } from './sidebar-content.svelte'
export { default as Footer, default as SidebarFooter } from './sidebar-footer.svelte'
export { default as Group, default as SidebarGroup } from './sidebar-group.svelte'
export {
	default as GroupAction,
	default as SidebarGroupAction,
} from './sidebar-group-action.svelte'
export {
	default as GroupContent,
	default as SidebarGroupContent,
} from './sidebar-group-content.svelte'
export { default as GroupLabel, default as SidebarGroupLabel } from './sidebar-group-label.svelte'
export { default as Header, default as SidebarHeader } from './sidebar-header.svelte'
export { default as Input, default as SidebarInput } from './sidebar-input.svelte'
export { default as Inset, default as SidebarInset } from './sidebar-inset.svelte'
export { default as Menu, default as SidebarMenu } from './sidebar-menu.svelte'
export { default as MenuAction, default as SidebarMenuAction } from './sidebar-menu-action.svelte'
export { default as MenuBadge, default as SidebarMenuBadge } from './sidebar-menu-badge.svelte'
export { default as MenuButton, default as SidebarMenuButton } from './sidebar-menu-button.svelte'
export { default as MenuItem, default as SidebarMenuItem } from './sidebar-menu-item.svelte'
export {
	default as MenuSkeleton,
	default as SidebarMenuSkeleton,
} from './sidebar-menu-skeleton.svelte'
export { default as MenuSub, default as SidebarMenuSub } from './sidebar-menu-sub.svelte'
export {
	default as MenuSubButton,
	default as SidebarMenuSubButton,
} from './sidebar-menu-sub-button.svelte'
export {
	default as MenuSubItem,
	default as SidebarMenuSubItem,
} from './sidebar-menu-sub-item.svelte'
export { default as Provider, default as SidebarProvider } from './sidebar-provider.svelte'
export { default as Rail, default as SidebarRail } from './sidebar-rail.svelte'
export { default as Separator, default as SidebarSeparator } from './sidebar-separator.svelte'
export { default as SidebarTrigger, default as Trigger } from './sidebar-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-content.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn(
		'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
		className,
	)}
	data-sidebar="content"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col gap-2 p-2', className)}
	data-sidebar="footer"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-action.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { Snippet } from 'svelte'
import type { HTMLButtonAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	child,
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLButtonAttributes> & {
	child?: Snippet<[{ props: Record<string, unknown> }]>
} = $props()
const propObj = $derived({
	class: cn(
		'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
		// Increases the hit area of the button on mobile.
		'after:absolute after:-inset-2 md:after:hidden',
		'group-data-[collapsible=icon]:hidden',
		className,
	),
	'data-sidebar': 'group-action',
	...restProps,
})
</script>
{#if child}
	{@render child({ props: propObj })}
{:else}
	<button bind:this={ref} {...propObj}>
		{@render children?.()}
	</button>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-content.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('w-full text-sm', className)}
	data-sidebar="group-content"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group-label.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { Snippet } from 'svelte'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	child,
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> & {
	child?: Snippet<[{ props: Record<string, unknown> }]>
} = $props()
const mergedProps = $derived({
	class: cn(
		'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
		'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
		className,
	),
	'data-sidebar': 'group-label',
	...restProps,
})
</script>
{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<div bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</div>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-group.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('relative flex w-full min-w-0 flex-col p-2', className)}
	data-sidebar="group"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('flex flex-col gap-2 p-2', className)}
	data-sidebar="header"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-input.svelte">
<script lang="ts">
import type { ComponentProps } from 'svelte'
import { Input } from '$shadcn/components/ui/input/index.js'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(''),
	...restProps
}: ComponentProps<typeof Input> = $props()
</script>
<Input
	class={cn(
		'bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2',
		className,
	)}
	data-sidebar="input"
	bind:ref
	bind:value
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-inset.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<main
	bind:this={ref}
	class={cn(
		'bg-background relative flex min-h-svh flex-1 flex-col',
		`peer-data-[variant=inset]:min-h-[calc(100svh-calc(var(--spacing)*4))]
		md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0
		md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2
		md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm`,
		className,
	)}
	{...restProps}
>
	{@render children?.()}
</main>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-action.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { Snippet } from 'svelte'
import type { HTMLButtonAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	child,
	children,
	class: className,
	ref = $bindable(),
	showOnHover = false,
	...restProps
}: WithElementRef<HTMLButtonAttributes> & {
	child?: Snippet<[{ props: Record<string, unknown> }]>
	showOnHover?: boolean
} = $props()
const mergedProps = $derived({
	class: cn(
		'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
		// Increases the hit area of the button on mobile.
		'after:absolute after:-inset-2 md:after:hidden',
		'peer-data-[size=sm]/menu-button:top-1',
		'peer-data-[size=default]/menu-button:top-1.5',
		'peer-data-[size=lg]/menu-button:top-2.5',
		'group-data-[collapsible=icon]:hidden',
		showOnHover &&
			'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
		className,
	),
	'data-sidebar': 'menu-action',
	...restProps,
})
</script>
{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<button bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</button>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-badge.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<div
	bind:this={ref}
	class={cn(
		`text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none
		items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums`,
		`peer-hover/menu-button:text-sidebar-accent-foreground
		peer-data-[active=true]/menu-button:text-sidebar-accent-foreground`,
		'peer-data-[size=sm]/menu-button:top-1',
		'peer-data-[size=default]/menu-button:top-1.5',
		'peer-data-[size=lg]/menu-button:top-2.5',
		'group-data-[collapsible=icon]:hidden',
		className,
	)}
	data-sidebar="menu-badge"
	{...restProps}
>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-button.svelte">
<script lang="ts" module>
import { tv, type VariantProps } from 'tailwind-variants'
export const sidebarMenuButtonVariants = tv({
	base: 'peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
	defaultVariants: {
		size: 'default',
		variant: 'default',
	},
	variants: {
		size: {
			default: 'h-8 text-sm',
			lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
			sm: 'h-7 text-xs',
		},
		variant: {
			default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
			outline:
				'bg-background hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
		},
	},
})
export type SidebarMenuButtonVariant = VariantProps<typeof sidebarMenuButtonVariants>['variant']
export type SidebarMenuButtonSize = VariantProps<typeof sidebarMenuButtonVariants>['size']
</script>
<script lang="ts">
import { mergeProps, type WithElementRef, type WithoutChildrenOrChild } from 'bits-ui'
import type { ComponentProps, Snippet } from 'svelte'
import type { HTMLAttributes } from 'svelte/elements'
import * as Tooltip from '$shadcn/components/ui/tooltip/index.js'
import { cn } from '$shadcn/utils.js'
import { useSidebar } from './context.svelte.js'
let {
	child,
	children,
	class: className,
	isActive = false,
	ref = $bindable(),
	size = 'default',
	tooltipContent,
	tooltipContentProps,
	variant = 'default',
	...restProps
}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {
	child?: Snippet<[{ props: Record<string, unknown> }]>
	isActive?: boolean
	size?: SidebarMenuButtonSize
	tooltipContent?: Snippet
	tooltipContentProps?: WithoutChildrenOrChild<ComponentProps<typeof Tooltip.Content>>
	variant?: SidebarMenuButtonVariant
} = $props()
const sidebar = useSidebar()
const buttonProps = $derived({
	class: cn(sidebarMenuButtonVariants({ size, variant }), className),
	'data-active': isActive,
	'data-sidebar': 'menu-button',
	'data-size': size,
	...restProps,
})
</script>
{#snippet Button({ props }: { props?: Record<string, unknown> })}
	{@const mergedProps = mergeProps(buttonProps, props)}
	{#if child}
		{@render child({ props: mergedProps })}
	{:else}
		<button bind:this={ref} {...mergedProps}>
			{@render children?.()}
		</button>
	{/if}
{/snippet}
{#if !tooltipContent}
	{@render Button({})}
{:else}
	<Tooltip.Root>
		<Tooltip.Trigger>
			{#snippet child({ props })}
				{@render Button({ props })}
			{/snippet}
		</Tooltip.Trigger>
		<Tooltip.Content
			align="center"
			children={tooltipContent}
			hidden={sidebar.state !== 'collapsed' || sidebar.isMobile}
			side="right"
			{...tooltipContentProps}
		/>
	</Tooltip.Root>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-item.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLLIElement>, HTMLLIElement> = $props()
</script>
<li
	bind:this={ref}
	class={cn('group/menu-item relative', className)}
	data-sidebar="menu-item"
	{...restProps}
>
	{@render children?.()}
</li>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-skeleton.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { Skeleton } from '$shadcn/components/ui/skeleton/index.js'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	showIcon = false,
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> & {
	showIcon?: boolean
} = $props()
// Random width between 50% and 90%
const width = `${Math.floor(Math.random() * 40) + 50}%`
</script>
<div
	bind:this={ref}
	class={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
	data-sidebar="menu-skeleton"
	{...restProps}
>
	{#if showIcon}
		<Skeleton class="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
	{/if}
	<Skeleton
		style="--skeleton-width: {width};"
		class="max-w-(--skeleton-width) h-4 flex-1"
		data-sidebar="menu-skeleton-text"
	/>
	{@render children?.()}
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub-button.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { Snippet } from 'svelte'
import type { HTMLAnchorAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	child,
	children,
	class: className,
	isActive,
	ref = $bindable(),
	size = 'md',
	...restProps
}: WithElementRef<HTMLAnchorAttributes> & {
	child?: Snippet<[{ props: Record<string, unknown> }]>
	isActive?: boolean
	size?: 'md' | 'sm'
} = $props()
const mergedProps = $derived({
	class: cn(
		'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
		'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
		size === 'sm' && 'text-xs',
		size === 'md' && 'text-sm',
		'group-data-[collapsible=icon]:hidden',
		className,
	),
	'data-active': isActive,
	'data-sidebar': 'menu-sub-button',
	'data-size': size,
	...restProps,
})
</script>
{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<a bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</a>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub-item.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
let {
	children,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLLIElement>> = $props()
</script>
<li bind:this={ref} data-sidebar="menu-sub-item" {...restProps}>
	{@render children?.()}
</li>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu-sub.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLUListElement>> = $props()
</script>
<ul
	bind:this={ref}
	class={cn(
		'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
		'group-data-[collapsible=icon]:hidden',
		className,
	)}
	data-sidebar="menu-sub"
	{...restProps}
>
	{@render children?.()}
</ul>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-menu.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLUListElement>, HTMLUListElement> = $props()
</script>
<ul
	bind:this={ref}
	class={cn('flex w-full min-w-0 flex-col gap-1', className)}
	data-sidebar="menu"
	{...restProps}
>
	{@render children?.()}
</ul>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-provider.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import * as Tooltip from '$shadcn/components/ui/tooltip/index.js'
import { cn } from '$shadcn/utils.js'
import {
	SIDEBAR_COOKIE_MAX_AGE,
	SIDEBAR_COOKIE_NAME,
	SIDEBAR_WIDTH,
	SIDEBAR_WIDTH_ICON,
} from './constants.js'
import { setSidebar } from './context.svelte.js'
let {
	children,
	class: className,
	onOpenChange = () => {},
	open = $bindable(true),
	ref = $bindable(),
	style,
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	onOpenChange?: (open: boolean) => void
	open?: boolean
} = $props()
const sidebar = setSidebar({
	open: () => open,
	setOpen: (value: boolean) => {
		open = value
		onOpenChange(value)
		// This sets the cookie to keep the sidebar state.
		document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
	},
})
</script>
<svelte:window onkeydown={sidebar.handleShortcutKeydown} />
<Tooltip.Provider delayDuration={0}>
	<div
		bind:this={ref}
		style:--sidebar-width={SIDEBAR_WIDTH}
		style:--sidebar-width-icon={SIDEBAR_WIDTH_ICON}
		{style}
		class={cn(
			'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
			className,
		)}
		{...restProps}
	>
		{@render children?.()}
	</div>
</Tooltip.Provider>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-rail.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
import { useSidebar } from './context.svelte.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> = $props()
const sidebar = useSidebar()
</script>
<button
	bind:this={ref}
	class={cn(
		`hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all
		ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px]
		group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex`,
		'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
		`[[data-side=left][data-state=collapsed]_&]:cursor-e-resize
		[[data-side=right][data-state=collapsed]_&]:cursor-w-resize`,
		`hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0
		group-data-[collapsible=offcanvas]:after:left-full`,
		'[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
		'[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
		className,
	)}
	aria-label="Toggle Sidebar"
	data-sidebar="rail"
	onclick={() => sidebar.toggle()}
	tabIndex={-1}
	title="Toggle Sidebar"
	{...restProps}
>
	{@render children?.()}
</button>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-separator.svelte">
<script lang="ts">
import type { ComponentProps } from 'svelte'
import { Separator } from '$shadcn/components/ui/separator/index.js'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: ComponentProps<typeof Separator> = $props()
</script>
<Separator
	class={cn('bg-sidebar-border mx-2 w-auto', className)}
	data-sidebar="separator"
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar-trigger.svelte">
<script lang="ts">
import PanelLeft from 'lucide-svelte/icons/panel-left'
import type { ComponentProps } from 'svelte'
import { Button } from '$shadcn/components/ui/button/index.js'
import { cn } from '$shadcn/utils.js'
import { useSidebar } from './context.svelte.js'
let {
	class: className,
	onclick,
	ref = $bindable(),
	...restProps
}: ComponentProps<typeof Button> & {
	onclick?: (e: MouseEvent) => void
} = $props()
const sidebar = useSidebar()
</script>
<Button
	class={cn('h-7 w-7', className)}
	data-sidebar="trigger"
	onclick={(e) => {
		onclick?.(e)
		sidebar.toggle()
	}}
	size="icon"
	type="button"
	variant="ghost"
	{...restProps}
>
	<PanelLeft />
	<span class="sr-only">Toggle Sidebar</span>
</Button>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sidebar/sidebar.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import * as Sheet from '$shadcn/components/ui/sheet/index.js'
import { cn } from '$shadcn/utils.js'
import { SIDEBAR_WIDTH_MOBILE } from './constants.js'
import { useSidebar } from './context.svelte.js'
let {
	children,
	class: className,
	collapsible = 'offcanvas',
	ref = $bindable(),
	side = 'left',
	variant = 'sidebar',
	...restProps
}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
	collapsible?: 'icon' | 'none' | 'offcanvas'
	side?: 'left' | 'right'
	variant?: 'floating' | 'inset' | 'sidebar'
} = $props()
const sidebar = useSidebar()
</script>
{#if collapsible === 'none'}
	<div
		bind:this={ref}
		class={cn(
			'bg-sidebar text-sidebar-foreground w-(--sidebar-width) flex h-full flex-col',
			className,
		)}
		{...restProps}
	>
		{@render children?.()}
	</div>
{:else if sidebar.isMobile}
	<Sheet.Root bind:open={() => sidebar.openMobile, (v) => sidebar.setOpenMobile(v)} {...restProps}>
		<Sheet.Content
			style="
				--sidebar-width: {SIDEBAR_WIDTH_MOBILE};"
			class="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
			data-mobile="true"
			data-sidebar="sidebar"
			{side}
		>
			<div class="flex h-full w-full flex-col">
				{@render children?.()}
			</div>
		</Sheet.Content>
	</Sheet.Root>
{:else}
	<div
		bind:this={ref}
		class="text-sidebar-foreground group peer hidden md:block"
		data-collapsible={sidebar.state === 'collapsed' ? collapsible : ''}
		data-side={side}
		data-state={sidebar.state}
		data-variant={variant}
	>
		<!-- This is what handles the sidebar gap on desktop -->
		<div
			class={cn(
				'w-(--sidebar-width) relative h-svh bg-transparent transition-[width] duration-200 ease-linear',
				'group-data-[collapsible=offcanvas]:w-0',
				'group-data-[side=right]:rotate-180',
				variant === 'floating' || variant === 'inset' ?
					'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+calc(var(--spacing)*4))]'
				:	'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',
			)}
		></div>
		<div
			class={cn(
				`w-(--sidebar-width) fixed inset-y-0 z-10 hidden h-svh transition-[left,right,width] duration-200
				ease-linear md:flex`,
				side === 'left' ?
					'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
				:	'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
				// Adjust the padding for floating and inset variants.
				variant === 'floating' || variant === 'inset' ?
					'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+calc(var(--spacing)*4)+2px)]'
				:	`group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r
					group-data-[side=right]:border-l`,
				className,
			)}
			{...restProps}
		>
			<div
				class="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col
					group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border
					group-data-[variant=floating]:shadow-sm"
				data-sidebar="sidebar"
			>
				{@render children?.()}
			</div>
		</div>
	</div>
{/if}
</file>

<file path="libraries/ui/src/shadcn/components/ui/skeleton/index.ts">
export { default as Root, default as Skeleton } from './skeleton.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/skeleton/skeleton.svelte">
<script lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildren<WithElementRef<HTMLAttributes<HTMLDivElement>>> = $props()
</script>
<div
	bind:this={ref}
	class={cn('bg-muted animate-pulse rounded-md', className)}
	{...restProps}
></div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/slider/index.ts">
export { default as Root, default as Slider } from './slider.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/slider/slider.svelte">
<script lang="ts">
import { Slider as SliderPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(),
	...restProps
}: WithoutChildrenOrChild<SliderPrimitive.RootProps> = $props()
</script>
<!--
Discriminated Unions + Destructing (required for bindable) do not
get along, so we shut typescript up by casting `value` to `never`.
-->
<SliderPrimitive.Root
	class={cn('relative flex w-full touch-none select-none items-center', className)}
	bind:value={value as never}
	bind:ref
	{...restProps}
>
	{#snippet children({ thumbs })}
		<span class="bg-secondary relative h-2 w-full grow overflow-hidden rounded-full">
			<SliderPrimitive.Range class="bg-primary absolute h-full" />
		</span>
		{#each thumbs as thumb}
			<SliderPrimitive.Thumb
				class="border-primary bg-background ring-offset-background focus-visible:ring-ring
					focus-visible:outline-hidden block size-5 rounded-full border-2 transition-colors
					focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
				index={thumb}
			/>
		{/each}
	{/snippet}
</SliderPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/sonner/index.ts">
export { default as Toaster } from './sonner.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/sonner/sonner.svelte">
<script lang="ts">
import { mode } from 'mode-watcher'
import { Toaster as Sonner, type ToasterProps as SonnerProps } from 'svelte-sonner'
let restProps: SonnerProps = $props()
</script>
<Sonner
	class="toaster group"
	theme={$mode}
	toastOptions={{
		classes: {
			actionButton: 'group-[.toast]:bg-primary group-[.toast]:text-primary-foreground',
			cancelButton: 'group-[.toast]:bg-muted group-[.toast]:text-muted-foreground',
			description: 'group-[.toast]:text-muted-foreground',
			toast:
				'group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg',
		},
	}}
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/switch/index.ts">
export { default as Root, default as Switch } from './switch.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/switch/switch.svelte">
<script lang="ts">
import { Switch as SwitchPrimitive, type WithoutChildrenOrChild } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	checked = $bindable(false),
	class: className,
	ref = $bindable(),
	...restProps
}: WithoutChildrenOrChild<SwitchPrimitive.RootProps> = $props()
</script>
<SwitchPrimitive.Root
	class={cn(
		`focus-visible:ring-ring focus-visible:ring-offset-background data-[state=checked]:bg-primary
		data-[state=unchecked]:bg-input focus-visible:outline-hidden peer inline-flex h-6 w-11 shrink-0
		cursor-pointer items-center rounded-full border-2 border-transparent transition-colors
		focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50`,
		className,
	)}
	bind:ref
	bind:checked
	{...restProps}
>
	<SwitchPrimitive.Thumb
		class={cn(
			`bg-background pointer-events-none block size-5 rounded-full shadow-lg ring-0 transition-transform
			data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0`,
		)}
	/>
</SwitchPrimitive.Root>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/index.ts">
export { default as Root, default as Table } from './table.svelte'
export { default as Body, default as TableBody } from './table-body.svelte'
export { default as Caption, default as TableCaption } from './table-caption.svelte'
export { default as Cell, default as TableCell } from './table-cell.svelte'
export { default as Footer, default as TableFooter } from './table-footer.svelte'
export { default as Head, default as TableHead } from './table-head.svelte'
export { default as Header, default as TableHeader } from './table-header.svelte'
export { default as Row, default as TableRow } from './table-row.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-body.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLTableSectionElement>> = $props()
</script>
<tbody bind:this={ref} class={cn('[&_tr:last-child]:border-0', className)} {...restProps}>
	{@render children?.()}
</tbody>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-caption.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLElement>> = $props()
</script>
<caption bind:this={ref} class={cn('text-muted-foreground mt-4 text-sm', className)} {...restProps}>
	{@render children?.()}
</caption>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-cell.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLTdAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLTdAttributes> = $props()
</script>
<td
	bind:this={ref}
	class={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)}
	{...restProps}
>
	{@render children?.()}
</td>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-footer.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLTableSectionElement>> = $props()
</script>
<tfoot bind:this={ref} class={cn('bg-muted/50 font-medium', className)} {...restProps}>
	{@render children?.()}
</tfoot>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-head.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLThAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLThAttributes> = $props()
</script>
<th
	bind:this={ref}
	class={cn(
		'text-muted-foreground h-12 px-4 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0',
		className,
	)}
	{...restProps}
>
	{@render children?.()}
</th>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-header.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLTableSectionElement>> = $props()
</script>
<thead bind:this={ref} class={cn('[&_tr]:border-b', className)} {...restProps}>
	{@render children?.()}
</thead>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table-row.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLAttributes<HTMLTableRowElement>> = $props()
</script>
<tr
	bind:this={ref}
	class={cn(
		'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',
		className,
	)}
	{...restProps}
>
	{@render children?.()}
</tr>
</file>

<file path="libraries/ui/src/shadcn/components/ui/table/table.svelte">
<script lang="ts">
import type { WithElementRef } from 'bits-ui'
import type { HTMLTableAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	ref = $bindable(),
	...restProps
}: WithElementRef<HTMLTableAttributes> = $props()
</script>
<div class="relative w-full overflow-auto">
	<table bind:this={ref} class={cn('w-full caption-bottom text-sm', className)} {...restProps}>
		{@render children?.()}
	</table>
</div>
</file>

<file path="libraries/ui/src/shadcn/components/ui/tabs/index.ts">
import { Tabs as TabsPrimitive } from 'bits-ui'
const { Root } = TabsPrimitive
export {
	Root,
	//
	Root as Tabs,
}
export { default as Content, default as TabsContent } from './tabs-content.svelte'
export { default as List, default as TabsList } from './tabs-list.svelte'
export { default as TabsTrigger, default as Trigger } from './tabs-trigger.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/tabs/tabs-content.svelte">
<script lang="ts">
import { Tabs as TabsPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: TabsPrimitive.ContentProps = $props()
</script>
<TabsPrimitive.Content
	class={cn(
		`ring-offset-background focus-visible:ring-ring focus-visible:outline-hidden mt-2
		focus-visible:ring-2 focus-visible:ring-offset-2`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/tabs/tabs-list.svelte">
<script lang="ts">
import { Tabs as TabsPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: TabsPrimitive.ListProps = $props()
</script>
<TabsPrimitive.List
	class={cn(
		'bg-muted text-muted-foreground inline-flex h-10 items-center justify-center rounded-md p-1',
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/tabs/tabs-trigger.svelte">
<script lang="ts">
import { Tabs as TabsPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let { class: className, ref = $bindable(), ...restProps }: TabsPrimitive.TriggerProps = $props()
</script>
<TabsPrimitive.Trigger
	class={cn(
		`ring-offset-background focus-visible:ring-ring data-[state=active]:bg-background
		data-[state=active]:text-foreground focus-visible:outline-hidden data-[state=active]:shadow-xs
		inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium
		transition-all focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none
		disabled:opacity-50`,
		className,
	)}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/textarea/index.ts">
type FormTextareaEvent<T extends Event = Event> = T & {
	currentTarget: EventTarget & HTMLTextAreaElement
}
type TextareaEvents = {
	blur: FormTextareaEvent<FocusEvent>
	change: FormTextareaEvent<Event>
	click: FormTextareaEvent<MouseEvent>
	focus: FormTextareaEvent<FocusEvent>
	input: FormTextareaEvent<InputEvent>
	keydown: FormTextareaEvent<KeyboardEvent>
	keypress: FormTextareaEvent<KeyboardEvent>
	keyup: FormTextareaEvent<KeyboardEvent>
	mouseenter: FormTextareaEvent<MouseEvent>
	mouseleave: FormTextareaEvent<MouseEvent>
	mouseover: FormTextareaEvent<MouseEvent>
	paste: FormTextareaEvent<ClipboardEvent>
}
export {
	type FormTextareaEvent,
	//
	type TextareaEvents,
}
export { default as Root, default as Textarea } from './textarea.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/textarea/textarea.svelte">
<script lang="ts">
import type { WithElementRef, WithoutChildren } from 'bits-ui'
import type { HTMLTextareaAttributes } from 'svelte/elements'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	value = $bindable(),
	...restProps
}: WithoutChildren<WithElementRef<HTMLTextareaAttributes>> = $props()
</script>
<textarea
	bind:this={ref}
	class={cn(
		`border-input bg-background ring-offset-background placeholder:text-muted-foreground
		focus-visible:ring-ring focus-visible:outline-hidden flex min-h-[80px] w-full rounded-md border px-3
		py-2 text-base focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed
		disabled:opacity-50 md:text-sm`,
		className,
	)}
	bind:value
	{...restProps}
></textarea>
</file>

<file path="libraries/ui/src/shadcn/components/ui/toggle-group/index.ts">
export { default as Root, default as ToggleGroup } from './toggle-group.svelte'
export { default as Item, default as ToggleGroupItem } from './toggle-group-item.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/toggle-group/toggle-group-item.svelte">
<script lang="ts">
import { ToggleGroup as ToggleGroupPrimitive } from 'bits-ui'
import { type ToggleVariants, toggleVariants } from '$shadcn/components/ui/toggle/index.js'
import { cn } from '$shadcn/utils.js'
import { getToggleGroupCtx } from './toggle-group.svelte'
let {
	class: className,
	ref = $bindable(),
	size,
	value = $bindable(),
	variant,
	...restProps
}: ToggleGroupPrimitive.ItemProps & ToggleVariants = $props()
const ctx = getToggleGroupCtx()
</script>
<ToggleGroupPrimitive.Item
	class={cn(
		toggleVariants({
			size: ctx.size || size,
			variant: ctx.variant || variant,
		}),
		className,
	)}
	{value}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/toggle-group/toggle-group.svelte">
<script lang="ts" module>
import { getContext, setContext } from 'svelte'
import type { ToggleVariants } from '$shadcn/components/ui/toggle/index.js'
export function setToggleGroupCtx(props: ToggleVariants) {
	setContext('toggleGroup', props)
}
export function getToggleGroupCtx() {
	return getContext<ToggleVariants>('toggleGroup')
}
</script>
<script lang="ts">
import { ToggleGroup as ToggleGroupPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	size = 'default',
	value = $bindable(),
	variant = 'default',
	...restProps
}: ToggleGroupPrimitive.RootProps & ToggleVariants = $props()
setToggleGroupCtx({
	size,
	variant,
})
</script>
<!--
Discriminated Unions + Destructing (required for bindable) do not
get along, so we shut typescript up by casting `value` to `never`.
-->
<ToggleGroupPrimitive.Root
	class={cn('flex items-center justify-center gap-1', className)}
	bind:value={value as never}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/toggle/index.ts">
export {
	default as Root,
	default as Toggle,
	type ToggleSize,
	type ToggleVariant,
	type ToggleVariants,
	toggleVariants,
} from './toggle.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/toggle/toggle.svelte">
<script lang="ts" module>
import { tv, type VariantProps } from 'tailwind-variants'
export const toggleVariants = tv({
	base: 'ring-offset-background hover:bg-muted hover:text-muted-foreground focus-visible:ring-ring data-[state=on]:bg-accent data-[state=on]:text-accent-foreground inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
	defaultVariants: {
		size: 'default',
		variant: 'default',
	},
	variants: {
		size: {
			default: 'h-10 min-w-10 px-3',
			lg: 'h-11 min-w-11 px-5',
			sm: 'h-9 min-w-9 px-2.5',
		},
		variant: {
			default: 'bg-transparent',
			outline: 'border-input hover:bg-accent hover:text-accent-foreground border bg-transparent',
		},
	},
})
export type ToggleVariant = VariantProps<typeof toggleVariants>['variant']
export type ToggleSize = VariantProps<typeof toggleVariants>['size']
export type ToggleVariants = VariantProps<typeof toggleVariants>
</script>
<script lang="ts">
import { Toggle as TogglePrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	pressed = $bindable(false),
	ref = $bindable(),
	size = 'default',
	variant = 'default',
	...restProps
}: TogglePrimitive.RootProps & {
	size?: ToggleSize
	variant?: ToggleVariant
} = $props()
</script>
<TogglePrimitive.Root
	class={cn(toggleVariants({ size, variant }), className)}
	bind:ref
	bind:pressed
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/components/ui/tooltip/index.ts">
import { Tooltip as TooltipPrimitive } from 'bits-ui'
const { Root } = TooltipPrimitive
const { Trigger } = TooltipPrimitive
const { Provider } = TooltipPrimitive
export {
	Provider,
	Root,
	//
	Root as Tooltip,
	Provider as TooltipProvider,
	Trigger as TooltipTrigger,
	Trigger,
}
export { default as Content, default as TooltipContent } from './tooltip-content.svelte'
</file>

<file path="libraries/ui/src/shadcn/components/ui/tooltip/tooltip-content.svelte">
<script lang="ts">
import { Tooltip as TooltipPrimitive } from 'bits-ui'
import { cn } from '$shadcn/utils.js'
let {
	class: className,
	ref = $bindable(),
	sideOffset = 4,
	...restProps
}: TooltipPrimitive.ContentProps = $props()
</script>
<TooltipPrimitive.Content
	class={cn(
		`bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out
		data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95
		data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2
		data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden
		rounded-md border px-3 py-1.5 text-sm shadow-md`,
		className,
	)}
	{sideOffset}
	bind:ref
	{...restProps}
/>
</file>

<file path="libraries/ui/src/shadcn/custom/button.svelte">
<script module>
import { tv } from 'tailwind-variants'
export const buttonVariants = tv({
	base: 'ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
	defaultVariants: {
		variant: 'default',
	},
	variants: {
		variant: {
			default: 'bg-primary text-primary-foreground hover:bg-primary/90',
			destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
			ghost: 'hover:bg-accent hover:text-accent-foreground',
			link: 'text-primary underline-offset-4 hover:underline',
			outline: 'border-input bg-background hover:bg-accent hover:text-accent-foreground border',
			secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
		},
	},
})
</script>
<script>
// @ts-nocheck
import { cn } from '$shadcn/utils.js'
let {
	children,
	class: className,
	href,
	ref = $bindable(),
	type = 'button',
	variant = 'default',
	...restProps
} = $props()
</script>
{#if href}
	<a
		bind:this={ref}
		class={cn(buttonVariants({ variant }), className)}
		{href}
		role="button"
		{...restProps}
	>
		{@render children?.()}
	</a>
{:else}
	<button bind:this={ref} class={cn(buttonVariants({ variant }), className)} {type} {...restProps}>
		{@render children?.()}
	</button>
{/if}
</file>

<file path="libraries/ui/src/shadcn/hooks/is-mobile.svelte.ts">
import { untrack } from 'svelte'
const MOBILE_BREAKPOINT = 768
export class IsMobile {
	get current() {
		return this.#current
	}
	#current = $state<boolean>(false)
	constructor() {
		$effect(() => {
			return untrack(() => {
				const mql = globalThis.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
				const onChange = () => {
					this.#current = window.innerWidth < MOBILE_BREAKPOINT
				}
				mql.addEventListener('change', onChange)
				onChange()
				return () => {
					mql.removeEventListener('change', onChange)
				}
			})
		})
	}
}
</file>

<file path="libraries/ui/src/shadcn/hooks/justJS.js">
import 'svelte'
</file>

<file path="libraries/ui/src/shadcn/utils.js">
import { clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'
export function cn(...inputs) {
	return twMerge(clsx(inputs))
}
</file>

<file path="libraries/ui/tsconfig.json">
{
	"_comments": [
		"exclude와 include는 extends 되지 않아서 따로 써줘야 함",
		"compilerOptions.paths 쓸 거면 packajs.json의 import 부분에도 작성하기"
	],
	"compilerOptions": {
		"paths": {
			"$shadcn": ["./src/shadcn"],
			"$shadcn/*": ["./src/shadcn/*"]
		}
	},
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"node_modules/**",
		"src/service-worker/**",
		"static/**"
	],
	"extends": ["@library/base/tsconfig.json"],
	"include": [
		"src/**/*",
		"*.js",
		"*.ts",

		"*.svelte",

		"*.cjs",

		"*.mjs",
		"**/*.js",
		"**/*.ts",

		"**/*.svelte",
		"**/*.cjs",
		"**/*.mjs"
	]
}
</file>

<file path="package.json">
{
  "private": true,
  "name": "@repo/root",
  "type": "module",
  "scripts": {
    "all-packages-update": "pnpm up --recursive",
    "build": " turbo run build --affected",
    "clean": "rm -rf .turbo && find . -name 'node_modules' -type d -prune -exec rm -rf '{}' + && rm -f package-lock.json + && pnpm store prune && pnpm install",
    "dev": "turbo run dev --affected",
    "dev:boiler_plates": "turbo run dev --filter=boiler_plates --filter=storybook --affected",
    "fix-mismatches": "pnpm dlx syncpack fix-mismatches",
    "format": "turbo run format --affected",
    "format-all": "pnpm run format-all-path .",
    "format-all-path": "prettier --write --ignore-unknown --ignore-path .prettierignore",
    "generate:app": "sh -c 'turbo gen workspace --type app --copy @app/boiler_plates --name @app/$1 --destination ./apps/$1' dummy",
    "lint": "turbo run check eslint stylelint --affected",
    "lint-fix": "turbo run eslint-fix  --affected && turbo run stylelint-fix --affected && turbo run format --affected",
    "paraglide-compile": "turbo run paraglide-compile --affected",
    "prepare": "husky",
    "playwright-install-env": "pnpm exec playwright install --with-deps",
    "playwright-report": "turbo run playwright-report --affected",
    "test": "turbo run test:unit test:e2e --affected",
    "test:e2e": "turbo run test:e2e --affected",
    "test:unit": "turbo run test:unit --affected",
    "update-and-fix": "pnpm run all-packages-update && pnpm run fix-mismatches"
  },
  "dependencies": {
    "@sentry/sveltekit": "^9.10.1",
    "gremlins.js": "^2.2.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@babel/core": "^7.26.10",
    "@double-great/stylelint-a11y": "^3.0.4",
    "@eslint/compat": "^1.2.7",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.23.0",
    "@eslint/json": "^0.11.0",
    "@eslint/markdown": "^6.3.0",
    "@fast-check/poisoning": "^0.2.3",
    "@fast-check/vitest": "^0.2.0",
    "@fast-check/worker": "^0.5.0",
    "@inlang/cli": "^3.0.10",
    "@inlang/paraglide-js": "2.0.10",
    "@intlify/eslint-plugin-svelte": "^1.0.0",
    "@microsoft/eslint-plugin-sdl": "github:microsoft/eslint-plugin-sdl",
    "@playwright/test": "^1.51.1",
    "@storybook/addon-svelte-csf": "5.0.0-next.28",
    "@sveltejs/adapter-cloudflare": "^6.0.1",
    "@sveltejs/kit": "^2.20.2",
    "@sveltejs/vite-plugin-svelte": "^5.0.3",
    "@types/eslint": "^9.6.1",
    "@typescript-eslint/parser": "^8.29.0",
    "dotenv": "^16.4.7",
    "eslint": "^9.23.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-config-problems": "^9.0.0",
    "eslint-config-turbo": "^2.5.0",
    "eslint-define-config": "^2.1.0",
    "eslint-import-resolver-typescript": "^4.2.7",
    "eslint-plugin-array-func": "^5.0.2",
    "eslint-plugin-compat": "^6.0.2",
    "eslint-plugin-depend": "^0.12.0",
    "eslint-plugin-exception-handling": "^1.5.4",
    "eslint-plugin-functional": "^9.0.1",
    "eslint-plugin-github": "^6.0.0",
    "eslint-plugin-import-x": "^4.10.0",
    "eslint-plugin-json-schema-validator": "^5.3.1",
    "eslint-plugin-jsonc": "^2.20.0",
    "eslint-plugin-lodash": "^8.0.0",
    "eslint-plugin-mdx": "^3.3.1",
    "eslint-plugin-no-secrets": "^2.2.1",
    "eslint-plugin-no-unsanitized": "^4.1.2",
    "eslint-plugin-no-use-extend-native": "^0.7.2",
    "eslint-plugin-optimize-regex": "^1.2.1",
    "eslint-plugin-perfectionist": "^4.10.1",
    "eslint-plugin-playwright": "^2.2.0",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-ramda": "^2.5.1",
    "eslint-plugin-redos": "^4.5.0",
    "eslint-plugin-regexp": "^2.7.0",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-simple-import-sort": "^12.1.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "eslint-plugin-sql": "^3.2.1",
    "eslint-plugin-storybook": "^0.12.0",
    "eslint-plugin-svelte": "^3.5.0",
    "eslint-plugin-toml": "^0.12.0",
    "eslint-plugin-turbo": "^2.4.4",
    "eslint-plugin-unicorn": "^58.0.0",
    "eslint-plugin-xstate": "^3.2.1",
    "eslint-plugin-yml": "^1.17.0",
    "fast-check": "^4.0.1",
    "globals": "^16.0.0",
    "husky": "^9.1.7",
    "i": "^0.3.7",
    "jest-junit": "^16.0.0",
    "jsdom": "^26.0.0",
    "jsonc-eslint-parser": "^2.4.0",
    "pnpm": "10.4.1",
    "postcss": "^8.5.3",
    "postcss-html": "^1.8.0",
    "postcss-syntax": "^0.36.2",
    "prettier": "^3.5.3",
    "prettier-plugin-classnames": "^0.7.7",
    "prettier-plugin-jsdoc": "^1.3.2",
    "prettier-plugin-merge": "^0.7.3",
    "prettier-plugin-package-perfection": "^1.1.0",
    "prettier-plugin-sh": "^0.16.0",
    "prettier-plugin-sort-json": "^4.1.1",
    "prettier-plugin-sql": "^0.18.1",
    "prettier-plugin-svelte": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "simple-git-hooks": "^2.12.1",
    "stylelint": "^16.17.0",
    "stylelint-color-format": "^1.1.0",
    "stylelint-config-clean-order": "^7.0.0",
    "stylelint-config-html": "^1.1.0",
    "stylelint-config-prettier": "^9.0.5",
    "stylelint-config-standard": "^37.0.0",
    "stylelint-declaration-block-no-ignored-properties": "^2.8.0",
    "stylelint-gamut": "^1.3.4",
    "stylelint-high-performance-animation": "^1.11.0",
    "stylelint-no-browser-hacks": "^1.3.0",
    "stylelint-no-indistinguishable-colors": "^2.3.1",
    "stylelint-no-unresolved-module": "^2.3.0",
    "stylelint-no-unsupported-browser-features": "^8.0.4",
    "stylelint-plugin-defensive-css": "^1.0.4",
    "stylelint-plugin-logical-css": "^1.2.2",
    "stylelint-use-nesting": "^6.0.0",
    "stylelint-value-no-exposed-custom-properties": "^2.3.1",
    "stylelint-value-no-unknown-custom-properties": "^6.0.1",
    "svelte": "^5.25.3",
    "svelte-check": "^4.1.5",
    "svelte-eslint-parser": "^1.1.2",
    "svelte-language-server": "^0.17.11",
    "syncpack": "^13.0.3",
    "toml-eslint-parser": "^0.10.0",
    "ts-node": "^10.9.2",
    "turbo": "^2.4.4",
    "typescript": "^5.8.2",
    "vite": "^6.2.5",
    "vite-node": "^3.0.9",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.1.1",
    "wrangler": "^4.6.0",
    "yaml-eslint-parser": "^1.3.0",
    "zod-fast-check": "^0.10.1",
    "cursor-tools": "latest"
  },
  "engines": {
    "node": "23.5.0"
  },
  "packageManager": "pnpm@10.4.1",
  "pnpm": {
    "onlyBuiltDependencies": [
      "esbuild"
    ]
  }
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - 'apps/*'
  - 'libraries/*'
  - 'playground/*'
  - 'scripts/*'
  - 'prompts/*'
  - storybook
</file>

<file path="scripts/common/package.json">
{
	"name": "@script/common",
	"version": "0.0.1",
	"type": "module"
}
</file>

<file path="storybook/e2e/basic.test.js">
import '@library/base/basic.test.js'
</file>

<file path="storybook/e2e/cache.js">
import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const CACHE_DIR = path.join(__dirname, '..', '.cache') // 프로젝트 루트의 .cache 디렉토리
/**
 * 지정된 경로에서 캐시 파일을 읽어 내용을 반환합니다. 파일이 없거나 오류 발생 시 null을 반환합니다.
 *
 * @param {string} cacheFilePath - 읽어올 캐시 파일의 전체 경로
 * @returns {string | undefined} 캐시 파일 내용 또는 undefined
 */
function readCache(cacheFilePath) {
	try {
		if (!fs.existsSync(cacheFilePath)) {
			return undefined
		}
		return fs.readFileSync(cacheFilePath, 'utf8')
	} catch (error) {
		console.error(`캐시 읽기 오류 (${cacheFilePath}):`, error)
		return undefined
	}
}
/**
 * 주어진 상태(state)를 지정된 경로의 캐시 파일에 씁니다.
 *
 * @param {string} state - 저장할 페이지 상태 (직렬화된 문자열)
 * @param {string} cacheFilePath - 저장할 캐시 파일의 전체 경로
 */
function writeCache(state, cacheFilePath) {
	try {
		// 캐시 디렉토리가 없으면 생성
		const dir = path.dirname(cacheFilePath)
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir, { recursive: true })
		}
		fs.writeFileSync(cacheFilePath, state, 'utf8')
		console.log(`페이지 상태 캐시 저장 완료: ${cacheFilePath}`)
	} catch (error) {
		console.error(`캐시 쓰기 오류 (${cacheFilePath}):`, error)
	}
}
/**
 * Playwright Page 객체를 받아 직렬화된 문자열로 반환합니다. (현재는 전체 HTML 사용)
 *
 * @param {import('@playwright/test').Page} page - 직렬화할 Playwright 페이지 객체
 * @returns {Promise<string>} 직렬화된 페이지 내용 (HTML 문자열)
 */
async function serializePage(page) {
	return await page.content()
}
/**
 * 두 상태 문자열을 비교하여 동일한지 여부를 반환합니다.
 *
 * @param {string | null} cachedState - 캐시에서 읽어온 상태 문자열 (없으면 null)
 * @param {string} currentState - 현재 페이지에서 직렬화된 상태 문자열
 * @returns {boolean} 두 상태가 동일하면 true, 아니면 false
 */
function isSameState(cachedState, currentState) {
	// 간단한 문자열 비교
	return cachedState === currentState
}
export { CACHE_DIR, isSameState, readCache, serializePage, writeCache }
</file>

<file path="storybook/e2e/fast-check.test.js">
import path from 'node:path'
import { expect, test } from '@playwright/test'
import manifest from '../storybook-static/index.json' with { type: 'json' }
import { CACHE_DIR, isSameState, readCache, serializePage, writeCache } from './cache.js'
import { testUIComponent } from './universal-testers.js'
for (const entry of Object.values(manifest.entries)) {
	if (!entry?.id) {
		continue
	}
	const { id } = entry
	if (id.endsWith('docs')) {
		continue
	}
	const title = id.replaceAll('--', ' @ ').replaceAll('-', ' > ')
	const cacheFileName = `${id}.html`
	const cacheFilePath = path.join(CACHE_DIR, `storybook-${cacheFileName}`)
	test(`${title}`, async ({ page }) => {
		// 캐시 비활성화를 위한 라우트 설정
		// await page.route('**', (route) => route.continue())
		// 콘솔 오류 감지 설정 (페이지 이동 전에 설정)
		const consoleErrors = []
		page.on('console', (msg) => {
			if (msg.type() === 'error') {
				consoleErrors.push(msg.text())
			}
		})
		// 네트워크 오류 감지 (페이지 이동 전에 설정)
		const failedRequests = []
		page.on('response', (response) => {
			if (response.status() >= 400) {
				failedRequests.push(`${response.url()} (${response.status()})`)
			}
		})
		await page.goto(`./iframe.html?id=${id}&viewMode=story`)
		await expect(page.locator('#storybook-root')).toBeVisible({ timeout: 5000 })
		const cachedState = readCache(cacheFilePath)
		const currentState = await serializePage(page)
		if (isSameState(cachedState, currentState)) {
			console.log(`[캐시 히트] ${title} - 페이지 상태 변경 없음. UI 컴포넌트 테스트를 건너뛰니다.`)
			test.info().annotations.push({ type: 'cache-status', description: 'hit' })
			expect(consoleErrors, '콘솔 에러 체크 (캐시 히트)').toHaveLength(0)
			expect(failedRequests, '네트워크 에러 체크 (캐시 히트)').toHaveLength(0)
			return
		}
		console.log(`[캐시 미스] ${title} - 캐시 없거나 상태 변경됨. UI 컴포넌트 테스트를 실행합니다.`)
		test.info().annotations.push({ type: 'cache-status', description: 'miss' })
		await page.emulateMedia({ reducedMotion: 'reduce' })
		const results = await testUIComponent(page, {
			numRuns: 5,
			sequenceLength: 3,
			waitAfterInteraction: 50,
			verbose: false,
		})
		// 테스트 정보 기록
		test.info().attach(`Debug Info`, {
			body: JSON.stringify(results, undefined, 2),
		})
		const dateNow = new Date()
		test.info().attach(`Date`, {
			body: dateNow.toLocaleString('ko-KR'),
		})
		// UI 컴포넌트 에러 정보 첨부
		const errorMessages = (results.errors ?? []).map((error) => `- ${error.message}`).join('\n')
		test.info().attach(`UI Component Errors (${results.errors?.length ?? 0})`, {
			body: errorMessages,
			contentType: 'text/plain',
		})
		expect(results.errors.length).toBe(0)
		expect(results.success).toBe(true)
		if (results.success && results.errors.length === 0) {
			console.log(`[캐시 쓰기] ${title} - 테스트 성공. 새로운 상태를 캐시합니다.`)
			writeCache(currentState, cacheFilePath)
		}
	})
}
</file>

<file path="storybook/e2e/gremlins.test.js">
import path from 'node:path'
import { R } from '@library/helpers/R'
import { expect, test } from '@playwright/test'
import manifest from '../storybook-static/index.json' with { type: 'json' }
import { CACHE_DIR, isSameState, readCache, serializePage, writeCache } from './cache.js'
/**
 * 페이지 컨텍스트에서 Gremlins를 실행합니다. Playwright와 함께 사용하기 위한 함수입니다.
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @returns {Promise<void>} - Promise 객체
 */
async function unleashGremlins(page) {
	// gremlins.js 스크립트를 페이지에 추가 (테스트 파일에서 호출하므로 여기서 제거 가능)
	// await page.addScriptTag({
	// 	path: '../node_modules/gremlins.js/dist/gremlins.min.js', // 경로 수정 금지
	// })
	// 에러 핸들링 (테스트 파일에서 처리하므로 제거)
	// page.on('pageerror', (err) => {
	// 	throw err
	// })
	// Horde 생성 및 실행
	await page.evaluate(async () => {
		// @ts-ignore - window.gremlins는 addScriptTag/addInitScript에 의해 로드됨
		const horde = globalThis.gremlins.createHorde({
			species: [
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.species.clicker({
					clickTypes: ['click'],
					canClick: () => true,
				}),
				globalThis.gremlins.species.clicker(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.species.toucher(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.species.formFiller(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.species.scroller(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.species.typer(),
			],
			mogwais: [
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.mogwais.gizmo(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.mogwais.fps(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.mogwais.alert(),
			],
			strategies: [
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.strategies.distribution(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.strategies.allTogether(),
				// @ts-ignore - 타입 오류 무시
				globalThis.gremlins.strategies.bySpecies(),
			],
		})
		// unleash()가 반환하는 Promise를 직접 await
		// 에러 발생 시 page.evaluate가 reject되어 Playwright 테스트 실패 유발
		await horde.unleash({ nb: 1000 })
		console.log('Gremlins 공격 완료')
	})
}
for (const entry of Object.values(manifest.entries)) {
	if (!process.env.CI) {
		break
	}
	if (!entry?.id) {
		continue
	}
	const { id } = entry
	if (id.endsWith('docs')) {
		continue
	}
	const title = id.replaceAll('--', ' @ ').replaceAll('-', ' > ')
	const cacheFileName = `${id}.html`
	const cacheFilePath = path.join(CACHE_DIR, `gremlins-${cacheFileName}`)
	test(`${title}`, async ({ page }) => {
		// --- 추가: gremlins.js 스크립트 주입 ---
		// addInitScript는 페이지 로드 전에 실행되어 안정적
		await page.addInitScript({
			path: '../node_modules/gremlins.js/dist/gremlins.min.js', // 경로 확인 필요
		})
		// --- ---
		const pageErrors = []
		// 에러 핸들링 - 페이지에서 발생하는 오류를 테스트 오류로 전파
		page.on('pageerror', (err) => {
			pageErrors.push(err.message)
			// Annotation 대신 명확한 에러 메시지 전달 시도
			console.error(`페이지 오류 발생 감지: ${err.message}`)
		})
		// 콘솔 오류 감지 설정
		const consoleErrors = []
		page.on('console', (msg) => {
			if (msg.type() === 'error') {
				consoleErrors.push(msg.text())
				console.log(`콘솔 에러 감지: ${msg.text()}`)
			}
		})
		// 네트워크 오류 감지
		const failedRequests = []
		page.on('response', (response) => {
			if (response.status() >= 400) {
				failedRequests.push(`${response.url()} (${response.status()})`)
			}
		})
		try {
			// 페이지 이동
			await page.goto(`./iframe.html?id=${id}&viewMode=story`)
			await expect(page.locator('#storybook-root')).toBeVisible({ timeout: 5000 })
			const cachedState = readCache(cacheFilePath)
			const currentState = await serializePage(page)
			if (isSameState(cachedState, currentState)) {
				console.log(
					`[캐시 히트] ${title} - 페이지 상태 변경 없음. UI 컴포넌트 테스트를 건너뛰니다.`,
				)
				test.info().annotations.push({ type: 'cache-status', description: 'hit' })
				expect(consoleErrors, '콘솔 에러 체크 (캐시 히트)').toHaveLength(0)
				expect(failedRequests, '네트워크 에러 체크 (캐시 히트)').toHaveLength(0)
				return
			}
			console.log(
				`[캐시 미스] ${title} - 캐시 없거나 상태 변경됨. UI 컴포넌트 테스트를 실행합니다.`,
			)
			test.info().annotations.push({ type: 'cache-status', description: 'miss' })
			await page.emulateMedia({ reducedMotion: 'reduce' })
			// Gremlins 실행
			await unleashGremlins(page)
			// 테스트 정보 기록
			const dateNow = new Date()
			test.info().attach(`Date`, {
				body: dateNow.toLocaleString('ko-KR'),
			})
			const errors = R.concat(pageErrors, failedRequests)
			// consoleErrors 내용 출력 (디버깅용)
			if (errors.length > 0) {
				test.info().attach('발견된 에러', {
					body: errors.join('\n'),
					contentType: 'text/plain',
				})
			}
			if (consoleErrors.length > 0) {
				test.info().attach('로그', {
					body: consoleErrors.join('\n'),
					contentType: 'text/plain',
				})
			}
			expect(pageErrors, '페이지 에러 체크').toHaveLength(0)
			expect(failedRequests, '네트워크 에러 체크').toHaveLength(0)
			if (pageErrors.length === 0) {
				console.log(`[캐시 쓰기] ${title} - 테스트 성공. 새로운 상태를 캐시합니다.`)
				writeCache(currentState, cacheFilePath)
			}
		} catch (error) {
			console.error('Gremlins 테스트 중 오류 발생:', error)
			// 에러를 다시 throw하여 테스트 실패 상태 유지
			test.fail(true, `Gremlins 테스트 중 오류 발생: ${error.message}`)
		}
	})
}
</file>

<file path="storybook/e2e/universal-testers-doc-1.md">
# Storybook 범용 E2E 테스터 문서

## 1. 개요

이 코드는 Storybook에 있는 UI 컴포넌트들을 위한 범용 End-to-End (E2E) 테스트 유틸리티 모음이야. Playwright를 사용해서 실제 브라우저 환경에서 컴포넌트와 상호작용하고, 특히 **fast-check 라이브러리**를 이용한 **속성 기반 테스트(Property-Based Testing, PBT)**를 수행하는 데 중점을 둬.

**핵심 목표:**

- 다양하고 예측 불가능한 사용자 인터랙션 시퀀스를 자동으로 생성하고 실행해서, 일반적인 시나리오 테스트로는 잡기 힘든 **엣지 케이스 버그**나 **예상치 못한 상태 문제**를 발견하는 거야.
- 테스트 실패 시, **어떤 인터랙션 조합**이 문제를 일으켰는지 **최소한의 재현 가능한 시퀀스(shrinking)**를 찾아내고, 상세한 디버깅 정보를 제공해서 원인 분석을 돕는 거지.

**주요 기술:**

- **Playwright**: 브라우저 자동화 및 E2E 테스트 프레임워크
- **fast-check**: JavaScript용 속성 기반 테스트 라이브러리
- **JavaScript (Node.js)**: 테스트 스크립트 실행 환경

---

## 2. 주요 기능 및 흐름

테스트는 크게 다음과 같은 흐름으로 진행돼.

```mermaid
graph TD
    A[testUIComponent 시작] --> B{테스트 반복 (iterationCount 만큼)};
    B -- 반복 --> C[runSingleIteration 실행];
    C --> D(컴포넌트 상태 초기화 - resetComponentState);
    D --> E(상호작용 요소 탐색 - discoverInteractions);
    E --> F{인터랙션 존재?};
    F -- Yes --> G(인터랙션 시퀀스 Arbitrary 생성 - createInteractionSequenceArbitrary);
    F -- No --> H(기본 렌더링 상태 확인 - verifyComponentState);
    H --> I[반복 종료];
    G --> J(fast-check 실행 - fc.check);
    J -- asyncProperty --> K{인터랙션 시퀀스 생성};
    K -- 각 인터랙션 --> L(인터랙션 실행 - executeInteraction);
    L -- 성공 --> M{모든 인터랙션 성공?};
    M -- Yes --> N(최종 상태 검증 - verifyComponentState);
    N --> O{Property 만족?};
    O -- Yes --> P(테스트 성공);
    P --> K;  // 다음 시퀀스 또는 종료
    M -- No --> Q(실패: 인터랙션 오류);
    L -- 실패 --> Q;
    O -- No --> R(실패: 최종 상태 검증 실패);
    Q --> S{Shrinking 시도};
    R --> S;
    S -- 축소된 반례 발견 --> T(디버깅 실행 - debugWithShrunkExample);
    T --> U(실패 정보 기록);
    U --> I;
    J -- fast-check 종료 --> V{테스트 실패?};
    V -- Yes --> W(디버그 정보 저장 - saveDebugInfo);
    W --> I;
    V -- No --> I;
    B -- 모든 반복 완료 --> X(최종 결과 반환 및 Playwright 단언);
    X --> Y[testUIComponent 종료];

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style Y fill:#f9f,stroke:#333,stroke-width:2px
    style C fill:#ccf,stroke:#333,stroke-width:2px
    style J fill:#ccf,stroke:#333,stroke-width:2px
    style L fill:#ccf,stroke:#333,stroke-width:2px
    style T fill:#ccf,stroke:#333,stroke-width:2px
    style W fill:#fcc,stroke:#333,stroke-width:1px
```

1. **`testUIComponent`**: 전체 테스트 프로세스를 시작하고 설정값을 관리해.
2. **`runSingleIteration`**: 설정된 횟수만큼 테스트 반복을 실행해. 각 반복은 독립적인 PBT 세션이야.
3. **`resetComponentState`**: 각 반복 시작 전에 컴포넌트 상태를 초기화해. 페이지를 새로고침하거나, Storybook에 정의된 리셋 함수를 호출할 수 있어.
4. **`discoverInteractions`**: 현재 화면에 보이는 컴포넌트 내에서 상호작용 가능한 모든 DOM 요소를 찾아내. 버튼, 입력 필드, 셀렉트 박스, 스크롤 가능한 영역 등을 식별하고, 각 요소에 대해 가능한 인터랙션 타입(클릭, 입력, 선택, 스크롤, 드래그 앤 드롭 등) 목록을 만들어.
5. **`createInteractionSequenceArbitrary`**: `discoverInteractions`에서 찾은 인터랙션 목록을 기반으로, `fast-check`가 사용할 Arbitrary(무작위 데이터 생성기)를 만들어. 이 Arbitrary는 다양한 길이와 조합의 인터랙션 시퀀스를 생성할 수 있어.
6. **`fc.check` / `fc.asyncProperty`**: `fast-check`의 핵심 실행 부분이야. `createInteractionSequenceArbitrary`가 만든 Arbitrary를 사용해서 무작위 인터랙션 시퀀스를 생성하고, 각 시퀀스를 비동기적으로 실행해.
7. **`executeInteraction`**: 생성된 시퀀스 내의 각 인터랙션을 Playwright API를 사용해서 실제로 브라우저에서 수행해. (`click`, `fill`, `dragTo` 등)
8. **상태 검증**: 각 인터랙션 시퀀스가 완료된 후, `verifyComponentState`를 사용해서 컴포넌트가 여전히 유효한 상태인지 (예: 화면에 보이는지) 확인해.
9. **Shrinking 및 디버깅**: 만약 `fast-check`가 속성(property)을 위반하는 인터랙션 시퀀스를 발견하면 (즉, 테스트 실패), 해당 시퀀스를 **최소한의 실패 재현 시퀀스**로 줄이려고 시도해 (Shrinking).
10. **`debugWithShrunkExample`**: Shrinking을 통해 찾아낸 최소 실패 시퀀스를 단계별로 다시 실행하면서, 각 단계의 상태와 발생한 에러를 상세히 로깅하여 디버깅을 도와.
11. **결과 보고 및 저장**: `testUIComponent`는 모든 반복 결과를 종합하고, 테스트가 실패했을 경우 상세한 디버그 정보를 담은 JSON 파일을 `debugLogDir`에 저장해. 최종적으로 Playwright의 `expect`를 사용해서 테스트 통과/실패를 단언해.

---

## 3. 아키텍처 및 주요 함수 관계

주요 함수들이 어떻게 서로 호출하고 데이터를 주고받는지 보여주는 다이어그램이야.

```mermaid
sequenceDiagram
    participant TestRunner as 테스트 실행기 (e.g., Playwright Test)
    participant TUC as testUIComponent
    participant RSI as runSingleIteration
    participant RCS as resetComponentState
    participant DI as discoverInteractions
    participant CISA as createInteractionSequenceArbitrary
    participant FC as fast-check (fc.check/asyncProperty)
    participant EI as executeInteraction
    participant EIBT as executeInteractionByType
    participant Playwright as Playwright API (page, locator)
    participant VCS as verifyComponentState
    participant DSWE as debugWithShrunkExample
    participant SDI as saveDebugInfo

    TestRunner ->> TUC: 테스트 시작 (config 전달)
    TUC ->> RSI: 반복 실행 (iteration, config 전달)
    RSI ->> RCS: 컴포넌트 상태 초기화
    RCS ->> Playwright: page.reload() 또는 page.evaluate('resetFunc()')
    RSI ->> DI: 인터랙션 탐색 (page, selector)
    DI ->> Playwright: page.evaluate(탐색 로직)
    DI ->> Playwright: locator.isVisible() 등
    DI -->> RSI: 가능한 인터랙션 목록 반환
    RSI ->> CISA: Arbitrary 생성 (인터랙션 목록, 길이)
    CISA -->> RSI: fast-check Arbitrary 반환
    RSI ->> FC: fc.check(property(Arbitrary)) 실행
    FC ->> RSI: (asyncProperty) 인터랙션 시퀀스 생성 및 전달
    loop 각 인터랙션 실행
        RSI ->> EI: 인터랙션 실행 (page, interaction, waitTime)
        EI ->> Playwright: locator 찾기, isVisible, isDisabled 등
        EI ->> EIBT: 타입별 실행 로직 호출
        EIBT ->> Playwright: page.click(), fill(), dragTo() 등
        EIBT -->> EI: 실행 결과 (성공/실패, 메시지)
        EI -->> RSI: 인터랙션 결과 반환
        alt 인터랙션 실패 또는 페이지 에러 발생 시
            RSI ->> FC: Error Throw (Property 실패 알림)
        end
    end
    RSI ->> VCS: 최종 상태 검증 (page, selector)
    VCS ->> Playwright: locator.waitFor(), count(), getAttribute() 등
    VCS -->> RSI: 검증 결과 (isVisible, summary)
    alt 상태 검증 실패 시
        RSI ->> FC: Error Throw (Property 실패 알림)
    end
    FC -->> RSI: fc.check 결과 반환 (checkResult: failed, counterexample 등)
    alt fast-check 실패 (checkResult.failed)
        RSI ->> DSWE: 축소된 반례 디버깅 (page, shrunkSequence)
        DSWE ->> RCS: 상태 초기화 (디버깅용)
        loop 축소된 시퀀스 단계별 실행
            DSWE ->> EI: 인터랙션 실행 (단계별)
            EI -->> DSWE: 실행 결과
            DSWE ->> VCS: 상태 확인 (단계별)
            VCS -->> DSWE: 상태 결과
        end
        DSWE -->> RSI: 디버깅 로그 반환 (Playwright Report에 첨부)
    end
    RSI -->> TUC: 반복 결과 반환 (iterationInfo: success, errors, failureInfo 등)
    TUC -->> RSI: (다음 반복)
    alt 테스트 최종 실패 시
        TUC ->> SDI: 디버그 정보 저장 (debugInfo)
        SDI ->> Node FS: 파일 쓰기
        SDI -->> TUC: 저장 결과 (경로)
        TUC ->> TestRunner: Playwright expect(false).toBeTruthy() 호출
    end
    TUC -->> TestRunner: 최종 테스트 결과 반환 (debugInfo)

```

---

## 4. 핵심 함수 상세 설명

### 4.1. `discoverInteractions(page, componentSelector, verbose)`

- **역할**: 주어진 `componentSelector` 내부를 탐색해서 사용자가 상호작용할 수 있는 모든 요소를 찾아내고, 각 요소에 대해 가능한 인터랙션 정보를 생성해.
- **동작 과정**:

  1. `verifyComponentState`로 컴포넌트가 보이는지 먼저 확인. 안 보이면 빈 배열 반환.
  2. `page.evaluate()`를 사용해서 브라우저 컨텍스트 내에서 `componentSelector` 하위의 모든 요소(`*`)를 순회해.
  3. 각 요소에 대해 `getUniqueSelector` (브라우저 내 정의) 함수로 고유한 CSS 선택자를 생성해 (`data-testid` 우선 사용).
  4. 요소의 태그 이름, 타입, 역할(role), 비활성화(disabled, aria-disabled) 여부, 읽기 전용(readonly) 여부, 옵션 목록(select 태그), 범위(range input), 드래그 가능 여부(`draggable`, `data-draggable`), 드롭 가능 여부(`data-droppable`) 등을 수집해.
  5. `getComputedStyle`과 스크롤/클라이언트 크기 비교를 통해 스크롤 가능 여부(`isScrollableX`, `isScrollableY`)를 판단해.
  6. 이렇게 수집된 요소 정보(`elementInfos`)를 Playwright 스크립트로 가져와.
  7. 각 요소 정보에 대해 Playwright의 `locator.isVisible()`을 사용해서 **실제로 화면에 보이는지** 다시 한번 확인해. (DOM에는 있지만 시각적으로 가려진 경우 제외)
  8. 보이는 요소 중 드래그 가능한 요소(`draggableElements`)와 드롭 가능한 요소(`droppableElements`)를 따로 모아둬.
  9. **보이는 요소** 각각에 대해 `getInteractionsFromElementInfo`를 호출해서 클릭, 입력, 선택 등의 기본 인터랙션을 생성해.
  10. **드래그 가능한 요소**와 **드롭 가능한 요소**들의 모든 조합에 대해 `dragDrop` 타입 인터랙션을 생성해.
  11. 최종적으로 생성된 모든 인터랙션 객체 배열을 반환해.

- **`page.evaluate` 사용 이유**: 브라우저의 DOM API(`querySelectorAll`, `getComputedStyle`, `parentElement`, `scrollHeight` 등)를 직접 사용해야 효율적이고 정확하게 요소 정보와 스크롤 가능 여부 등을 판단할 수 있기 때문이야. Playwright Locator API만으로는 이런 복잡한 DOM 탐색과 계산을 하기 어려워.

### 4.2. `createInteractionSequenceArbitrary(interactions, length)`

- **역할**: `discoverInteractions`가 반환한 인터랙션 목록을 기반으로, `fast-check`가 무작위 인터랙션 시퀀스를 생성할 수 있도록 `fc.Arbitrary` 객체를 만들어.
- **핵심 아이디어**: 다양한 종류의 인터랙션(클릭, 입력, 선택 등)과 각 인터랙션에 필요한 값(입력할 텍스트, 선택할 옵션 값, 설정할 범위 값, 스크롤 방향/양 등)을 무작위로 조합해야 해.
- **동작 과정 (복잡성 주의!)**:

  1. 입력받은 `interactions` 배열을 타입별(click, fill, select, dragDrop 등)로 분류해.
  2. 각 타입별 인터랙션 목록을 기반으로 `fast-check` Arbitrary를 생성해.
     - **단순 행위 인터랙션 (Click, Hover, DoubleClick, Drag)**: `fc.constantFrom(...행위_인터랙션_목록)`을 사용해서 목록 중 하나를 무작위로 선택하는 Arbitrary를 만들어.
     - **DragDrop 인터랙션**: `fc.constantFrom(...dragDrop_인터랙션_목록)`을 사용. (Source/Target Selector 포함)
     - **값 기반 인터랙션 (Fill, Select, Range, Scroll)**: 이게 좀 복잡해.
       - 해당 타입의 각 **원본 인터랙션 객체**(`originalInteraction`)에 대해 루프를 돌아.
       - 원본 인터랙션의 정보(valueType, options, min/max, isScrollable 등)를 바탕으로, 필요한 **값**을 생성하는 `fc.Arbitrary`를 `_getValueArbitraryForType`을 호출해서 만들어 (예: `fc.string()`, `fc.emailAddress()`, `fc.integer()`, `fc.constantFrom(...options)` 등).
       - `fc.tuple(fc.constant(index), 값_Arbitrary)`를 사용해서, 원본 인터랙션의 **인덱스**와 **생성된 값**을 튜플로 묶는 Arbitrary를 만들어. 이 인덱스는 나중에 어떤 원본 인터랙션에 해당하는 값인지 알아내기 위해 필요해.
  3. **Mapper & Unmapper (중요!)**: `fast-check`가 shrinking을 제대로 수행하려면, 생성된 복잡한 객체(여기서는 인터랙션 객체)를 다시 원래의 단순한 형태(여기서는 선택된 인터랙션 또는 [인덱스, 값] 튜플)로 되돌릴 수 있어야 해. 이를 위해 `map`과 `unmap` 함수를 사용해.

     - `.map(mapper, unmapper)`:

       - `mapper`: `fast-check`가 생성한 기본 값(e.g., 인터랙션 객체 또는 [인덱스, 값] 튜플)을 최종적으로 사용할 인터랙션 객체 형태로 변환해. 이 때 `type` 속성을 명시적으로 추가하고, 값 기반 인터랙션의 경우 `value`와 `originalIndex`를 포함시켜.
       - `unmapper`: `mapper`가 만든 최종 인터랙션 객체를 받아서, `fast-check`가 원래 생성했던 형태(단순 인터랙션 객체 또는 [인덱스, 값] 튜플)로 복원해줘. (`unmapActionInteraction`, `unmapValueInteraction`, `unmapDragDrop` 헬퍼 함수 사용)

     - **예시 (Fill)**:

       ```javascript
       // 1. 값 Arbitrary 생성
       const valueArb = _getValueArbitraryForType('text') // fc.string() 등
       
       // 2. 인덱스와 값 Arbitrary를 튜플로 묶음
       const tupleArb = fc.tuple(fc.constant(i), valueArb) // i는 fillInteractions 배열 내 현재 인덱스
       
       // 3. map/unmap 적용
       const fillInteractionArb = tupleArb.map(
       	// Mapper: [index, value] 튜플 -> 최종 인터랙션 객체
       	([index, value]) => ({
       		...fillInteractions[index], // 원본 인터랙션 정보 복사
       		type: 'fill', // 타입 명시
       		value, // 생성된 값 추가
       		originalIndex: index, // 원본 인덱스 저장 (unmap용)
       	}),
       	// Unmapper: 최종 인터랙션 객체 -> [index, value] 튜플
       	unmapValueInteraction('fill'), // (내부 로직: obj => [obj.originalIndex, obj.value])
       )
       ```

  4. 이렇게 각 타입별로 생성된 모든 Arbitrary들을 `fc.oneof(...arbitraries)`를 사용해서 하나로 합쳐. 그러면 이 중 하나가 무작위로 선택돼.
  5. 마지막으로 `fc.array(통합_Arbitrary, { minLength: 1, maxLength: ... })`를 사용해서, 위에서 만든 단일 인터랙션 Arbitrary를 여러 개 포함하는 **인터랙션 시퀀스** (배열)를 생성하는 최종 Arbitrary를 만들어 반환해. `minLength: 1`은 shrinking 시 단일 인터랙션까지 축소될 수 있게 해줘.

### 4.3. `executeInteraction(page, interaction, waitTime, verbose)`

- **역할**: `fast-check`가 생성한 단일 `interaction` 객체를 받아서, Playwright를 이용해 실제 브라우저에서 해당 동작을 수행하고 결과를 반환해.
- **동작 과정**:

  1. 결과 객체(`result`) 초기화.
  2. 현재 실행 중인 인터랙션 정보를 전역 변수(`currentInteraction`)에 기록 (에러 로깅 시 사용).
  3. 페이지 에러(`pageerror`) 리스너를 **임시로** 등록해. (실행 중 발생하는 에러 감지)
  4. `page.locator(interaction.selector)`로 대상 요소를 찾아.
  5. `locator.isVisible()`과 `locator.isDisabled()`로 요소가 상호작용 가능한 상태인지 확인해. 불가능하면 에러 처리 후 반환.
  6. **`executeInteractionByType(page, interaction, result)`** 함수를 호출해서 실제 인터랙션 타입에 맞는 Playwright 액션을 수행해.
  7. `page.waitForTimeout(waitTime)`으로 설정된 시간만큼 잠시 대기해. (주의: 명시적 대기가 더 권장되지만, 범용성을 위해 timeout 사용)
  8. 실행 중 페이지 에러가 발생했었는지 확인하고 결과 객체에 기록해. (에러 발생 자체로 실패 처리하진 않음)
  9. Try-catch 블록으로 Playwright 액션 자체에서 발생한 에러(요소를 못 찾거나, 액션 실패 등)를 잡아서 결과 객체에 기록하고 `success: false`로 설정해.
  10. **중요**: 에러가 발생해도 여기서 throw하지 않고, `result` 객체에 성공 여부와 에러 정보를 담아 반환해. 최종 판단은 호출자인 `runSingleIteration`의 `fc.asyncProperty` 내에서 이루어져.
  11. `finally` 블록에서 임시로 등록했던 페이지 에러 리스너를 **반드시 제거**해.

- **`executeInteractionByType`**: `executeInteraction`의 복잡도를 줄이기 위해 분리된 함수야. `interaction.type`에 따라 `page.click()`, `locator.dblclick()`, `locator.dragTo()`, `page.fill()`, `page.hover()`, `page.selectOption()`, `locator.evaluate()` (range, scroll 설정용) 등 적절한 Playwright 액션을 호출하고, 성공 메시지나 값을 `result` 객체에 채워 넣어.

### 4.4. `runSingleIteration(page, iteration, errors, config)`

- **역할**: 단일 PBT 반복 세션을 실행하고 그 결과를 반환해. `fast-check` 실행, 실패 시 shrinking 결과 로깅 및 디버깅 트리거 역할을 담당해.
- **동작 과정**:
  1. 반복 정보 객체(`iterationInfo`) 초기화.
  2. `resetComponentState` 호출.
  3. `discoverInteractions` 호출해서 가능한 인터랙션 목록 가져오기. 인터랙션 없으면 기본 상태만 확인하고 종료.
  4. `createInteractionSequenceArbitrary` 호출해서 `fast-check`용 Arbitrary 생성.
  5. **페이지 에러 핸들러 등록**: 이 반복 세션 전체에서 발생하는 페이지 에러를 수집하기 위해 `page.on('pageerror', ...)` 등록.
  6. **`fc.check(fc.asyncProperty(sequenceArb, async (sequence) => { ... }))` 실행**:
     - `sequenceArb`로부터 인터랙션 `sequence` (배열) 생성됨.
     - **시퀀스별 페이지 에러 핸들러 등록**: 현재 실행 중인 `sequence` 내에서만 발생하는 페이지 에러를 감지하기 위해 별도의 핸들러(`sequenceErrorHandler`)를 등록. (Shrinking 시 어떤 인터랙션에서 에러가 났는지 더 정확히 파악하기 위함)
     - `sequence` 내의 각 `interaction`에 대해 `executeInteraction` 호출하여 실행.
     - `executeInteraction`이 실패(`result.success === false`)하거나, **`sequenceErrorHandler`가 페이지 에러를 감지하면**, 즉시 에러를 `throw` 해서 `fast-check`에게 해당 시퀀스가 실패했음을 알려. (이 throw가 shrinking을 트리거해!)
     - 모든 인터랙션 성공 후, `verifyComponentState`로 최종 상태 검증. 실패하면 에러 `throw`.
     - `finally` 블록에서 **시퀀스별 에러 핸들러 제거**.
  7. `fc.check` 완료 후 결과(`checkResult`) 확인:
     - **성공**: `iterationInfo.success = true`.
     - **실패 (`checkResult.failed === true`)**:
       - `iterationInfo.success = false`.
       - `checkResult.counterexample[0]` (축소된 실패 시퀀스) 확인.
       - `logShrunkSequence`로 축소된 시퀀스 정보 로깅.
       - `iterationInfo.failureInfo`에 반례 정보 기록.
       - `isPageClosed`로 페이지 상태 확인 후, **`debugWithShrunkExample`** 호출하여 단계별 디버깅 실행 및 로그 첨부.
  8. `finally` 블록에서 **반복 세션 전체의 페이지 에러 핸들러 제거** 및 수집된 에러를 `errors` 배열에 추가.
  9. `iterationInfo` 반환.

### 4.5. `testUIComponent(page, config)`

- **역할**: 전체 테스트 프로세스를 조율하는 **최상위 진입점 함수**. 여러 번의 테스트 반복을 실행하고, 전역 에러를 처리하며, 최종 결과를 집계하고 보고해.
- **동작 과정**:
  1. 설정값 병합 및 디버그 정보 객체(`debugInfo`) 초기화.
  2. 컴포넌트 이름 추출 (`extractComponentName`).
  3. **전역 에러 핸들러 등록**: `page.on('pageerror', ...)`와 `page.on('console', ...)` 등록. 여기서 잡히는 에러는 특정 인터랙션과 직접 연결하기 어려울 수 있지만, 전체 테스트 중 발생하는 예외 상황을 감지해. 에러 발생 시 `currentInteraction` 정보를 함께 로깅하려고 시도해.
  4. `iterationCount`만큼 루프를 돌면서 `runSingleIteration` 호출.
  5. 각 `runSingleIteration`의 결과를 `debugInfo.iterations`에 추가하고, 에러 발생 여부(`errors.length > 0` 또는 `iterationInfo.success === false`)를 확인하여 전체 테스트 성공 여부(`isSuccessful`) 업데이트. 에러 발생 시 즉시 루프 중단 (`break`).
  6. Try-catch 블록으로 `runSingleIteration` 외부에서 발생할 수 있는 예기치 않은 오류 처리.
  7. `finally` 블록에서 **전역 에러 핸들러 제거**.
  8. 최종 테스트 결과(`isSuccessful`) 판정.
  9. **실패 시**:
     - `saveDebugInfo` 호출하여 `debugInfo` 객체를 JSON 파일로 저장.
     - Playwright 테스트 리포트에 실패를 명시적으로 알리기 위해 `test.step` 내에서 `expect(false, errorMessage).toBeTruthy()` 호출.
  10. 최종 `debugInfo` 객체 반환.

### 4.6. `debugWithShrunkExample(page, shrunkSequence, componentSelector, waitTime)`

- **역할**: `fast-check`가 찾아낸 **최소 실패 재현 인터랙션 시퀀스 (`shrunkSequence`)**를 받아서, 실제로 단계별로 실행해보면서 어떤 단계에서 문제가 발생하는지 상세 로그를 남겨 디버깅을 돕는 함수야.
- **동작 과정**:
  1. 디버깅 로그를 담을 배열(`logArray`) 초기화.
  2. 페이지가 열려있는지 확인 (`isPageClosed`). 닫혔으면 즉시 종료.
  3. `resetComponentState`로 컴포넌트 상태 초기화.
  4. **디버깅용 에러 핸들러 등록**: 이 함수 실행 중에만 발생하는 페이지/콘솔 에러를 감지하고, 현재 실행 중인 단계(`stepTracker`) 정보와 함께 로깅하기 위해 `page.on('pageerror', ...)`와 `page.on('console', ...)` 등록.
  5. `shrunkSequence` 배열을 순회하면서 각 인터랙션을 하나씩 실행:
     - 매 단계 시작 전에 페이지가 닫혔는지 확인.
     - 현재 단계 번호와 인터랙션 정보를 `stepTracker`에 기록.
     - `executeInteraction` 호출하여 인터랙션 실행 (verbose=true로 상세 로그 출력).
     - **페이지/콘솔 에러 발생 확인**: 이번 단계 실행 직후 에러가 감지되었으면, 해당 단계에서 문제가 발생했을 가능성이 높으므로 로그 남기고 루프 중단 (`break`). (이것이 shrinking과 연계되는 핵심!)
     - `verifyComponentState`로 현재 상태 확인 및 로깅.
     - `executeInteraction` 자체에서 에러가 발생하면 로그 남기고 루프 중단.
  6. `finally` 블록에서 **디버깅용 에러 핸들러 제거**.
  7. 수집된 `logArray` 반환 (이 로그는 Playwright 테스트 리포트에 첨부됨).

---

## 5. 데이터 타입 정의 (JSDoc @typedef)

코드 상단에 JSDoc 주석으로 주요 데이터 구조들이 정의되어 있어.

- **`Interaction`**: 단일 사용자 인터랙션을 나타내는 객체. `type`, `selector`, `value`, `valueType`, `min`, `max`, `options`, `isScrollableX/Y`, `sourceSelector`, `targetSelector` 등의 속성을 가져.
- **`StepTracker`**: `debugWithShrunkExample`에서 현재 디버깅 중인 단계를 추적하는 객체.
- **`TestConfig`**: `testUIComponent`에 전달하는 설정 객체. `iterationCount`, `sequenceLength`, `numRuns`, `componentSelector`, `waitAfterInteraction`, `resetComponent`, `debugLogDir`, `verbose` 등.
- **`IterationInfo`**: `runSingleIteration`의 결과 객체. 반복 번호, 실행된 시퀀스 정보(`SequenceInfo[]`), 에러 목록, 시작/종료 시간, 성공 여부, 실패 정보(`failureInfo`) 등을 포함.
- **`DebugInfo`**: `testUIComponent`가 최종적으로 반환하고 파일로 저장하는 디버그 정보 객체. 테스트 설정, 반복 결과(`IterationInfo[]`), 전체 에러 목록, 컴포넌트 정보, 성공 여부 등을 포함.
- **`SequenceInfo`**: 단일 인터랙션 시퀀스의 실행 결과. 인터랙션 결과(`InteractionResult[]`), 에러 목록, 시작/종료 시간 등을 포함.
- **`InteractionResult`**: `executeInteraction`의 결과 객체. 성공 여부, 에러 메시지/스택, 결과 값, 추가 메시지 등을 포함.

---

## 6. 혼동하기 쉬운 부분 및 주의사항

- **`fast-check`의 `map`/`unmap`**:
  - **왜 필요해?**: `fast-check`가 복잡한 객체(여기서는 인터랙션 객체)를 생성하고 shrinking할 때, 내부적으로는 더 단순한 값(문자열, 숫자, 튜플 등)을 기반으로 작동해. `map`은 이 단순한 값을 우리가 원하는 복잡한 객체로 변환하고, `unmap`은 그 반대로 복잡한 객체를 원래의 단순한 값으로 되돌려서 `fast-check`가 shrinking을 효율적으로 수행할 수 있게 도와줘. 특히 값 기반 인터랙션(`fill`, `select`, `range`, `scroll`)에서 생성된 값(`value`)과 해당 값이 적용될 원본 인터랙션 객체(`interactions[index]`)를 연결하기 위해 [인덱스, 값] 튜플을 중간 단계로 사용하는 부분이 핵심이야.
  - **주의**: `unmap` 함수가 `map` 함수와 정확히 역관계를 이루지 않으면 shrinking이 제대로 동작하지 않거나 오류가 발생할 수 있어. `originalIndex` 같은 추가 정보가 필요한 이유야.
- **Shrinking과 디버깅 연계**:
  - `fast-check`는 테스트 실패 시, 실패를 유발하는 **가장 짧은** 인터랙션 시퀀스를 찾으려고 시도해 (Shrinking).
  - `runSingleIteration` 내의 `asyncProperty` 콜백에서 인터랙션 실행 중 에러가 발생(`throw`)하면, `fast-check`는 해당 시퀀스가 실패했다고 판단하고 shrinking을 시작해.
  - Shrinking이 완료되면 `checkResult.counterexample`에 최소 실패 시퀀스가 담겨 나와.
  - `debugWithShrunkExample`는 이 최소 시퀀스를 받아서, **어느 단계에서** 처음으로 에러(페이지 에러, 콘솔 에러, 실행 자체 실패 등)가 발생하는지 확인하며 로그를 남겨. 이를 통해 실패 원인을 좁혀갈 수 있어.
- **비동기 에러 핸들링 및 `isPageClosed`**:
  - Playwright는 페이지 자체에서 발생하는 에러(`pageerror`)나 콘솔 에러(`console`)를 이벤트로 알려줘.
  - 이 코드는 테스트의 다른 단계(전체, 반복, 시퀀스, 디버깅)에서 이 이벤트 리스너를 적절히 등록하고 제거하면서 에러를 감지하고 로깅해. 특히 현재 실행 중인 인터랙션(`currentInteraction`)이나 단계(`stepTracker`) 정보와 연결하려고 시도하는 것이 중요해.
  - `isPageClosed` 함수는 Playwright 작업 수행 중 페이지가 예기치 않게 닫히는 경우(예: 충돌)를 감지해서 불필요한 에러 발생을 막고 테스트 흐름을 안전하게 중단시키는 역할을 해. 페이지가 닫힌 상태에서 Playwright API를 호출하면 에러가 나거든. `page.evaluate('1+1')` 같은 간단한 코드를 실행시켜서 페이지와의 통신 가능 여부로 판단해.
- **`page.evaluate` 사용**:
  - `discoverInteractions`에서 DOM 요소 정보(특히 `computedStyle`, 스크롤 크기)를 효율적으로 얻거나, `getUniqueSelector` 같은 브라우저 내 로직을 실행하기 위해 필요해.
  - `executeInteractionByType`에서 `range` input 값을 설정하거나 `scroll`을 수행할 때, Playwright의 기본 `fill`이나 `scroll` 액션만으로는 부족하거나 이벤트 발생이 원하는 대로 안 될 수 있어서, `evaluate` 내에서 직접 JavaScript로 값을 설정하고 이벤트를 발생시키는 방식을 사용해.
- **성능 고려사항**:
  - `discoverInteractions`는 페이지 내 모든 요소를 검사하므로, 컴포넌트가 매우 복잡하면 시간이 걸릴 수 있어.
  - `fast-check`의 `numRuns`와 `sequenceLength`가 크면 테스트 실행 시간이 길어져. 적절한 값 설정이 중요해.
  - `waitAfterInteraction` 값도 실행 시간에 영향을 줘. 너무 짧으면 비동기 업데이트가 반영되기 전에 다음 인터랙션이 실행될 수 있고, 너무 길면 불필요하게 테스트가 느려져.
- **테스트 안정성**:
  - 네트워크 상태나 테스트 환경에 따라 Playwright 액션이 실패하거나 타임아웃될 수 있어. `executeInteractionByType` 내부에 적절한 타임아웃(`timeout: 5000`)이 설정되어 있지만, 더 안정적인 대기(예: `locator.waitFor`)를 고려할 수도 있어. (하지만 범용성을 위해 현재 구조 유지)
  - `resetComponentState`가 실패해도 테스트는 계속 진행되지만, 이전 상태의 영향으로 예상치 못한 결과가 나올 수 있어.

---

## 7. 사용 예시

이 유틸리티들은 보통 Playwright 테스트 파일(`.spec.js`) 안에서 이렇게 사용될 거야.

```javascript
// 예시: src/components/MyComponent.spec.js

import { test, expect } from '@playwright/test'
import { testUIComponent } from './path/to/universal-testers' // 경로 수정 필요

test.describe('MyComponent E2E Tests', () => {
	test('should handle various user interactions without errors', async ({ page }) => {
		// 테스트하려는 컴포넌트의 Storybook 페이지로 이동
		await page.goto('/iframe.html?id=components-mycomponent--default&viewMode=story')

		// 테스트 설정 정의 (필요에 따라 조절)
		const config = {
			iterationCount: 5, // 테스트 반복 횟수
			sequenceLength: 8, // 각 시퀀스의 최대 인터랙션 수
			numRuns: 20, // fast-check 실행 횟수
			componentSelector: '#storybook-root', // 컴포넌트를 감싸는 최상위 요소 선택자
			waitAfterInteraction: 150, // 각 인터랙션 후 대기 시간 (ms)
			verbose: true, // 상세 로그 출력 여부
			debugLogDir: './test-results/mycomponent-debug-logs', // 디버그 로그 저장 위치
		}

		// 범용 테스터 실행
		const result = await testUIComponent(page, config)

		// 최종 결과 확인 (성공 여부 단언)
		// testUIComponent 내부에서 실패 시 expect(false).toBeTruthy()를 호출하므로,
		// 여기서 별도의 expect가 필수는 아닐 수 있지만, 명시적으로 추가 가능
		expect(
			result.success,
			`UI Component test failed. Check logs: ${result.debugFilePath || 'No log file'}`,
		).toBe(true)

		// 필요하다면 result 객체의 다른 정보들을 추가로 검증할 수도 있어.
		// 예: expect(result.errors.length).toBe(0);
	})
})
```

**실행**: Playwright CLI를 사용해서 이 테스트 파일을 실행하면 돼 (`npx playwright test src/components/MyComponent.spec.js`).

---

## 8. "왜 이렇게 구현했는가?"

- **왜 PBT인가?**: 사용자의 모든 가능한 인터랙션 경로를 미리 예측하고 테스트 케이스를 작성하는 것은 거의 불가능해. PBT는 무작위 시퀀스를 통해 우리가 생각하지 못한 엣지 케이스나 상태 조합을 발견할 가능성을 높여줘.
- **왜 `discoverInteractions`인가?**: 컴포넌트의 내부 구현이 바뀌더라도, 테스트 코드를 크게 수정하지 않고 상호작용 가능한 요소를 동적으로 찾아내 테스트를 수행하기 위해서야. 범용성을 높이는 핵심 요소지.
- **왜 `map`/`unmap`이 복잡한가?**: `fast-check`의 shrinking 기능을 최대한 활용하면서도, 다양한 타입의 인터랙션과 그에 필요한 값들을 유연하게 생성하고 조합하기 위한 절충점이야. 특히 값 기반 인터랙션 처리가 까다로워서 이런 구조가 되었어.
- **왜 `debugWithShrunkExample`인가?**: PBT의 단점 중 하나는 실패 시 재현이 어렵다는 건데, `fast-check`의 shrinking 기능과 이 디버깅 함수를 결합해서 실패 원인을 찾는 과정을 크게 개선하기 위해서야.
</file>

<file path="storybook/e2e/universal-testers-doc-2.md">
# 범용 Storybook E2E 테스터 (`universal-testers.js`) 문서

## 개요 (Overview)

이 스크립트는 Storybook으로 개발된 UI 컴포넌트들을 위한 **범용 엔드-투-엔드(E2E) 테스트 유틸리티**야. Playwright와 fast-check 라이브러리를 결합해서, 컴포넌트 내의 상호작용 가능한 요소들을 자동으로 찾아내고, 무작위적인 사용자 상호작용 시퀀스를 생성해서 실행해. 이걸 통해 예기치 않은 상태나 버그를 효과적으로 찾아낼 수 있어. 특히 fast-check의 속성 기반 테스트(Property-Based Testing, PBT) 접근법을 사용해서, 단순히 미리 정의된 시나리오를 넘어서 훨씬 광범위한 케이스를 자동으로 테스트할 수 있다는 장점이 있어. 테스트 실패 시에는 어떤 상호작용 순서에서 문제가 발생했는지 쉽게 파악할 수 있도록 상세한 디버깅 정보와 로그를 제공해줘.

## 아키텍처/구조 (Architecture/Structure)

테스트는 `testUIComponent` 함수를 중심으로 진행돼. 이 함수는 전체 테스트 흐름을 관리하고, 설정에 따라 여러 번의 반복(`runSingleIteration`)을 실행해. 각 반복에서는 현재 컴포넌트 상태에서 가능한 모든 상호작용(`Interaction`)을 탐색하고(`discoverInteractions`), 이를 바탕으로 fast-check가 무작위 상호작용 시퀀스를 생성해(`createInteractionSequenceArbitrary`). 생성된 시퀀스는 Playwright를 통해 하나씩 실행되고(`executeInteraction`), 각 단계 후 또는 시퀀스 종료 후 컴포넌트 상태를 검증해(`verifyComponentState`). 만약 fast-check가 실패하는 시퀀스(반례, counterexample)를 찾으면, 자동으로 시퀀스를 최소화(shrinking)하고, 해당 반례를 재현하며 상세 디버깅 정보(`debugWithShrunkExample`)를 기록해.

```mermaid
flowchart TD
    subgraph Test Execution Flow
        Start["testUIComponent(page, config) 호출"] --> Init["DebugInfo 객체 초기화"]
        Init --> LoopIter["iterationCount 만큼 반복 시작"]
        LoopIter --> RunIter["runSingleIteration(page, iteration, errors, config) 호출"]

        subgraph "runSingleIteration 내부"
            direction LR
            RunIter_Start["시작 및 상태 초기화 (resetComponentState)"] --> Discover["discoverInteractions(page, selector)"]
            Discover -- "상호작용 목록 반환" --> CheckEmpty{"상호작용 요소 존재?"}
            CheckEmpty -- "없음" --> VerifyEmpty["verifyComponentState()"]
            VerifyEmpty --> RunIter_End["반복 종료 (성공/실패 기록)"]
            CheckEmpty -- "있음" --> CreateArb["createInteractionSequenceArbitrary(interactions, length)"]
            CreateArb -- "Arbitrary 생성" --> FcCheck["fc.check(asyncProperty(sequenceArb, ...))"]

            subgraph "Fast-check Property"
                direction TB
                FcCheck_Start["무작위 시퀀스 생성"] --> SeqLoop["시퀀스 내 상호작용 반복"]
                SeqLoop --> ExecInteraction["executeInteraction(page, interaction, waitTime)"]
                ExecInteraction -- "성공" --> CheckPageClosed{"페이지 닫힘?"}
                CheckPageClosed -- "아니오" --> SeqLoop
                CheckPageClosed -- "예" --> ThrowPageClosedError["오류 발생 (페이지 닫힘)"]
                ExecInteraction -- "실패" --> ThrowInteractionError["오류 발생 (상호작용 실패)"]
                SeqLoop -- "시퀀스 완료" --> VerifyState["verifyComponentState(page, selector)"]
                VerifyState --> FcCheck_End["Property 성공/실패 반환"]
            end

            FcCheck -- "Property 결과" --> CheckFailure{"Fast-check 실패?"}
            CheckFailure -- "아니오 (성공)" --> RunIter_End
            CheckFailure -- "예 (실패)" --> LogShrunk["logShrunkSequence(checkResult)"]
            LogShrunk --> DebugShrunk["debugWithShrunkExample(page, shrunkSequence, ...)"]
            DebugShrunk -- "디버그 로그 생성" --> AttachLog["테스트 리포트에 로그 첨부"]
            AttachLog --> RecordFailure["실패 정보 기록 (failureInfo)"]
            RecordFailure --> RunIter_End
        end

        RunIter -- "IterationInfo 반환" --> UpdateDebug["DebugInfo 업데이트 (iterations 추가)"]
        UpdateDebug --> CheckIterError{"반복 중 오류 발생?"}
        CheckIterError -- "예" --> BreakLoop["반복 중단"]
        CheckIterError -- "아니오" --> LoopDecision{"모든 반복 완료?"}
        LoopDecision -- "아니오" --> LoopIter
        LoopDecision -- "예" --> EndLoop["반복 종료"]
        BreakLoop --> EndLoop
        EndLoop --> CheckSuccess{"전체 테스트 성공?"}
        CheckSuccess -- "예" --> ReturnSuccess["성공 결과 반환"]
        CheckSuccess -- "아니오" --> SaveDebug["saveDebugInfo() 호출"]
        SaveDebug --> AttachDebugPath["debugFilePath 기록"]
        AttachDebugPath --> AssertFail["Playwright expect(false).toBeTruthy() 호출 (테스트 강제 실패)"]
        AssertFail --> ReturnFail["실패 결과 반환"]
    end

```

## 핵심 기능 설명 (Core Functionality Explanation)

- **`discoverInteractions(page, componentSelector, verbose)`**:

  - 주어진 `componentSelector` 내부의 모든 요소(`*`)를 탐색해.
  - 각 요소에 대해 `getUniqueSelector` (브라우저 컨텍스트 내 실행)를 사용해서 고유한 CSS 선택자를 생성해. (data-testid, id, nth-child 순으로 우선순위)
  - 요소의 태그 이름, 타입, 역할(role), 활성화/비활성화 상태, 읽기 전용 여부, 스크롤 가능 여부 (`getComputedStyle` 확인), 드래그/드롭 가능 여부 등을 파악해.
  - Playwright의 `locator.isVisible()`을 사용해 화면에 보이는 요소만 필터링해.
  - 필터링된 요소 정보를 바탕으로 실행 가능한 `Interaction` 객체 목록을 생성해 (`getInteractionsFromElementInfo` 호출). 예를 들어, `<button>` 요소는 'click', 'hover', 'doubleClick' 인터랙션 객체를 생성. 드래그 가능한 요소와 드롭 가능한 요소 조합으로 'dragDrop' 인터랙션도 생성해.
  - 반환값: `Promise<Interaction[]>`

- **`createInteractionSequenceArbitrary(interactions, length)`**:

  - `discoverInteractions`에서 얻은 `Interaction` 목록을 입력받아.
  - fast-check의 `fc.Arbitrary<Interaction[]>`를 생성하는 함수야. 이게 무작위 상호작용 시퀀스를 만들어내는 핵심이지.
  - 내부적으로 상호작용 타입(click, fill, select, scroll 등)별로 Arbitrary를 구성해.
    - 'click', 'hover', 'doubleClick', 'drag' 같은 단순 행위는 `fc.constantFrom`으로 해당 타입의 상호작용 중 하나를 선택하도록 해.
    - 'fill', 'select', 'setRange', 'scroll' 같이 값이 필요한 상호작용은 `_getValueArbitraryForType`을 사용해 해당 타입에 맞는 무작위 값을 생성하는 Arbitrary(`valueArb`)와, 원래 상호작용 목록에서의 인덱스(`fc.constant(i)`)를 튜플(`fc.tuple`)로 묶어.
    - 생성된 값과 인덱스를 최종 `Interaction` 객체에 포함시켜. (`value`, `originalIndex` 속성)
  - **Mapper/Unmapper**: fast-check가 효과적으로 값을 축소(shrink)할 수 있도록 `map`과 unmapper 함수를 사용해.
    - `map`: 원래 상호작용 정보에 `type`과 생성된 `value`, `originalIndex`(값 기반 상호작용의 경우)를 추가해서 최종 상호작용 객체를 만들어.
    - `unmapper`: fast-check가 내부적으로 사용하는 함수로, `map`에서 추가된 정보를 제거하고 원래 형태(단순 행위는 정보 객체, 값 기반은 `[index, value]` 튜플)로 되돌려줘서 축소를 돕는다. (`unmapActionInteraction`, `unmapValueInteraction`, `unmapDragDrop`)
  - 모든 타입별 Arbitrary들을 `fc.oneof`로 묶어서 어떤 종류의 상호작용이든 선택될 수 있게 하고, `fc.array`를 사용해 이 Arbitrary들로 구성된 배열(즉, 상호작용 시퀀스)을 생성하는 최종 Arbitrary를 반환해. 배열 길이는 `minLength: 1`에서 `maxLength` 사이에서 무작위로 결정돼.
  - 반환값: `fc.Arbitrary<Interaction[]>`

- **`executeInteraction(page, interaction, waitTime, verbose)`**:

  - 단일 `Interaction` 객체를 받아 Playwright를 사용해 실제 웹 페이지에서 실행하는 함수야.
  - 먼저 `page.locator(interaction.selector)`로 대상 요소를 찾아.
  - `locator.isVisible()`과 `locator.isDisabled()`로 상호작용이 가능한지 확인해.
  - `executeInteractionByType` 함수를 호출해서 실제 상호작용 타입에 맞는 Playwright 액션(click, fill, selectOption, dragTo 등)을 수행해.
  - 각 상호작용 후 `page.waitForTimeout(waitTime)` 만큼 잠시 대기해 (주의사항 참고).
  - 페이지 에러(`pageerror` 이벤트)를 감지하는 핸들러를 일시적으로 등록/해제해서, 상호작용 실행 중 발생하는 예외를 잡아내.
  - 성공 여부, 발생한 에러 메시지/스택, 타임스탬프 등을 포함하는 `InteractionResult` 객체를 반환해.
  - 반환값: `Promise<InteractionResult>`

  ```mermaid
  stateDiagram-v2
      [*] --> Pending: 상호작용 대기
      Pending --> Executing: executeInteraction 호출
      Executing --> Success: Playwright 액션 성공 & pageerror 없음
      Executing --> Failure: Playwright 액션 실패 or pageerror 발생
      Success --> [*]: "결과 반환 (success: true)"
      Failure --> [*]: "결과 반환 (success: false, error 정보 포함)"
  ```

- **`testUIComponent(page, config)`**:

  - 테스트 실행의 메인 진입점이야. Playwright 페이지 객체와 설정 객체(`TestConfig`)를 받아.
  - 전체 테스트 시간, 컴포넌트 이름, URL 등 기본 정보를 포함하는 `DebugInfo` 객체를 생성해.
  - 설정된 `iterationCount`만큼 `runSingleIteration`을 반복 호출해.
  - 각 반복의 결과(`IterationInfo`)를 `DebugInfo.iterations`에 누적해.
  - 중간에 에러가 발생하거나 fast-check가 실패하면 반복을 중단하고 실패 처리해.
  - 테스트 실패 시(`debugInfo.success === false`), 상세 정보를 JSON 파일로 저장(`saveDebugInfo`)하고, Playwright 테스트 자체를 실패시키기 위해 `expect(false).toBeTruthy()`를 호출해.
  - 최종적으로 `DebugInfo` 객체를 반환해.
  - 반환값: `Promise<DebugInfo>`

- **`runSingleIteration(page, iteration, errors, config)`**:

  - 단일 테스트 반복(iteration)을 수행하는 핵심 로직이야.
  - `resetComponentState`로 컴포넌트 상태를 초기화 시도해.
  - `discoverInteractions`로 현재 상태에서 가능한 상호작용을 찾아.
  - `createInteractionSequenceArbitrary`로 시퀀스 생성 Arbitrary를 만들어.
  - `fc.check(fc.asyncProperty(...))`를 호출해서 속성 기반 테스트를 실행해.
    - `asyncProperty` 내에서는 생성된 무작위 시퀀스를 받아와서 `executeInteraction`을 사용해 하나씩 실행해.
    - 시퀀스 실행 중 상호작용 실패나 페이지 에러(`pageerror`)가 발생하면 즉시 해당 시퀀스는 실패로 간주하고 fast-check에 에러를 throw 해. (fast-check는 이걸 받아서 shrinking을 시도할 수 있어)
    - 시퀀스 실행이 성공적으로 끝나면 `verifyComponentState`로 최종 상태를 검증해.
  - `fc.check`가 실패하면(`checkResult.failed === true`), fast-check가 찾아낸 축소된 반례(`checkResult.counterexample`)를 사용해 `logShrunkSequence`와 `debugWithShrunkExample`을 호출해서 상세 분석 및 로깅을 수행해.
  - 반복 결과를 요약한 `IterationInfo` 객체를 반환해.
  - 반환값: `Promise<IterationInfo>`

- **`debugWithShrunkExample(page, shrunkSequence, componentSelector, waitTime)`**:

  - fast-check가 찾아낸 최소 실패 시퀀스(`shrunkSequence`)를 입력받아.
  - 컴포넌트 상태를 초기화하고, 해당 시퀀스를 **단계별로** 다시 실행해.
  - 각 단계(`executeInteraction`) 실행 전후로 페이지/콘솔 에러를 감지하고, `verifyComponentState`로 상태를 확인하며 로그를 상세히 기록해. 어느 단계에서 문제가 발생하는지 정확히 파악하는 데 도움을 줘.
  - 페이지가 닫혔는지(`isPageClosed`) 계속 확인하며 안전하게 실행해.
  - 실행 로그는 Playwright 테스트 리포트에 첨부돼.

  ```mermaid
  flowchart TD
      Start["debugWithShrunkExample 호출 (shrunkSequence)"] --> Reset["resetComponentState()"]
      Reset --> InitLog["로그 배열 및 에러 핸들러 초기화"]
      InitLog --> LoopStart["실패 시퀀스 반복 시작 (단계별)"]
      LoopStart --> CheckPageClosed1{"페이지 닫힘?"}
      CheckPageClosed1 -- "예" --> LogPageClosed1["로그 기록 & 종료"]
      CheckPageClosed1 -- "아니오" --> LogStep["현재 단계 로그 기록"]
      LogStep --> ExecInteraction["executeInteraction(page, interaction, waitTime, true)"]
      ExecInteraction --> LogResult["실행 결과 로그 기록"]
      LogResult --> CheckPageClosed2{"페이지 닫힘?"}
      CheckPageClosed2 -- "예" --> LogPageClosed2["로그 기록 & 종료"]
      CheckPageClosed2 -- "아니오" --> CheckErrors{"페이지/콘솔 에러 발생?"}
      CheckErrors -- "예" --> LogErrorDetected["에러 감지 로그 & 종료"]
      CheckErrors -- "아니오" --> VerifyState["verifyComponentState()"]
      VerifyState --> LogState["상태 확인 로그"]
      LogState --> LoopEnd{"모든 단계 완료?"}
      LoopEnd -- "아니오" --> LoopStart
      LoopEnd -- "예" --> Cleanup["이벤트 리스너 제거"]
      Cleanup --> ReturnLog["디버그 로그 배열 반환"]

      ExecInteraction -- "실행 중 에러" --> LogExecError["실행 에러 로그"]
      LogExecError --> CheckPageClosed3{"페이지 닫힘?"}
      CheckPageClosed3 -- "예" --> LogPageClosed3["로그 기록 & 종료"]
      CheckPageClosed3 -- "아니오" --> BreakLoop["반복 중단 & Cleanup"]
  ```

## API 문서 (API Documentation)

### 주요 Export 함수

| 함수명                 | 설명                                                                                        | 매개변수                                                                          | 반환값                                             |
| :--------------------- | :------------------------------------------------------------------------------------------ | :-------------------------------------------------------------------------------- | :------------------------------------------------- |
| `testUIComponent`      | 전체 UI 컴포넌트 테스트 프로세스를 실행하는 메인 함수.                                      | `page: Page`, `config?: TestConfig`                                               | `Promise<DebugInfo>`                               |
| `discoverInteractions` | 컴포넌트 내 상호작용 가능한 요소와 인터랙션 목록을 탐색.                                    | `page: Page`, `componentSelector: string`, `verbose?: boolean`                    | `Promise<Interaction[]>`                           |
| `executeInteraction`   | 단일 인터랙션을 페이지에서 실행.                                                            | `page: Page`, `interaction: Interaction`, `waitTime: number`, `verbose?: boolean` | `Promise<InteractionResult>`                       |
| `resetComponentState`  | 컴포넌트 상태를 초기화 (페이지 내 `resetComponentState` 함수 호출 시도 또는 페이지 리로드). | `page: Page`                                                                      | `Promise<void>`                                    |
| `verifyComponentState` | 컴포넌트의 가시성 및 기본 상태를 검증.                                                      | `page: Page`, `componentSelector: string`, `timeout?: number`                     | `Promise<{ isVisible: boolean; summary: string }>` |

### 주요 JSDoc 타입

| 타입명              | 설명                                                                | 주요 속성                                                                                                                                                                                                                                                  |
| :------------------ | :------------------------------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `Interaction`       | 단일 사용자 상호작용을 나타내는 객체.                               | `type: string` (click, fill 등), `selector: string`, `value?: any`, `valueType?: string`, `min?: number`, `max?: number`, `options?: string[]`, `isScrollableX?: boolean`, `isScrollableY?: boolean`, `sourceSelector?: string`, `targetSelector?: string` |
| `TestConfig`        | `testUIComponent` 함수의 설정을 위한 객체.                          | `iterationCount?: number`, `sequenceLength?: number`, `numRuns?: number`, `componentSelector?: string`, `waitAfterInteraction?: number`, `resetComponent?: boolean`, `debugLogDir?: string`, `verbose?: boolean`                                           |
| `IterationInfo`     | 단일 테스트 반복(`runSingleIteration`)의 결과를 담는 객체.          | `iterationNumber: number`, `sequences: SequenceInfo[]`, `errors: Error[]`, `startTime: string`, `endTime?: string`, `success: boolean`, `failureInfo?: { counterExample: Interaction[], error: Error, property: string }`                                  |
| `SequenceInfo`      | 단일 상호작용 시퀀스 실행 결과를 담는 객체.                         | `results: InteractionResult[]`, `errors: Error[]`, `startTime: string`, `endTime?: string`, `finalState?: string`                                                                                                                                          |
| `InteractionResult` | `executeInteraction`의 결과를 담는 객체.                            | `success: boolean`, `errorMessage?: string`, `errorStack?: string`, `error?: Error`, `value?: any`, `message?: string`, `timestamp: string`, `details: object`                                                                                             |
| `DebugInfo`         | `testUIComponent`의 전체 실행 결과 및 디버깅 정보를 담는 객체.      | `componentName: string`, `url: string`, `testConfig: TestConfig`, `iterations: IterationInfo[]`, `errors: Error[]`, `success: boolean`, `timestamp: string`, `debugFilePath?: string`                                                                      |
| `StepTracker`       | `debugWithShrunkExample`에서 현재 디버깅 단계를 추적하기 위한 객체. | `currentStep?: number`, `currentInteraction?: Interaction`                                                                                                                                                                                                 |

## 사용 예시 (Usage Examples)

```javascript
// example.spec.js
import { test, expect } from '@playwright/test'
import { testUIComponent } from './path/to/universal-testers.js'

test.describe('MyComponent Tests', () => {
	test('should withstand random interactions', async ({ page }) => {
		// Storybook의 MyComponent 페이지로 이동
		await page.goto(
			'http://localhost:6006/iframe.html?id=components-mycomponent--default&viewMode=story',
		)

		// 테스트 설정 정의 (선택 사항)
		const config = {
			iterationCount: 5, // 테스트 반복 횟수
			sequenceLength: 10, // 각 시퀀스의 최대 인터랙션 수
			numRuns: 50, // fast-check 실행 횟수
			waitAfterInteraction: 50, // 인터랙션 후 대기 시간 (ms)
			componentSelector: '#storybook-root', // 컴포넌트 루트 요소 선택자 (기본값 사용 가능)
			verbose: true, // 상세 로그 출력 활성화
		}

		// 범용 테스터 실행
		const result = await testUIComponent(page, config)

		// 테스트 결과 확인 (testUIComponent 내부에서 실패 시 expect(false)가 호출되므로,
		// 여기까지 오면 성공한 것으로 간주하거나 추가 검증 가능)
		console.log(`Test completed. Success: ${result.success}`)
		if (!result.success) {
			console.error(`Errors occurred: ${result.errors.length}`)
			// result.debugFilePath 경로에 상세 로그 파일이 저장됨
		}

		// 필요 시 추가적인 최종 상태 검증 로직 추가 가능
		// 예: expect(await page.locator('.final-state-indicator')).toBeVisible();
	})
})
```

## 혼동하기 쉬운 부분 및 주의사항 (Confusing Parts / Precautions - VERY IMPORTANT)

- **`page.evaluate()` 사용**: `discoverInteractions` 내부의 `getUniqueSelector`나 `resetComponentState` 등에서 `page.evaluate()`를 사용하는 부분이 있어. Playwright는 Locator API를 권장하지만, 복잡한 DOM 순회 로직(e.g., `parentElement`, `children`, `getComputedStyle`)이나 브라우저 전역 스코프의 함수(`globalThis.resetComponentState`)를 호출해야 하는 경우에는 `evaluate` 사용이 불가피하거나 더 효율적일 수 있어. 이 코드에서는 선택자 생성 로직과 전역 리셋 함수 호출 때문에 사용되었어.
- **`page.waitForTimeout(waitTime)`**: `executeInteraction`에서 각 상호작용 후에 고정된 시간(`waitTime`)만큼 기다리는데, 이건 **신중하게 사용해야 해**. 특정 상태 변화(e.g., 요소 나타남, 애니메이션 완료)를 기다리는 것이 아니라 무조건 시간을 지연시키는 거라, 네트워크 상태나 실행 환경에 따라 테스트가 불안정해질 수 있어(flaky test). 이상적으로는 `locator.waitFor()`, `expect(locator).toBeVisible()` 같은 명시적인 상태 기다림을 사용하는 것이 좋지만, 모든 상호작용 후 예측 가능한 상태 변화를 정의하기 어려워서 범용성을 위해 타임아웃을 사용한 것으로 보여. `waitTime` 값을 조절하거나, 특정 컴포넌트 테스트 시에는 이 부분을 커스텀하는 걸 고려해볼 수 있어.
- **Fast-check 와 Mapper/Unmapper**: `createInteractionSequenceArbitrary`에서 사용되는 `map`과 unmapper 함수들은 fast-check의 **shrinking(축소)** 메커니즘을 제대로 활용하기 위해 필수적이야.
  - `map`: fast-check가 생성한 기본값(e.g., 숫자 인덱스, 랜덤 문자열)을 실제 테스트에 필요한 `Interaction` 객체 형태로 변환해줘.
  - `unmapper`: fast-check가 실패 케이스를 찾았을 때, `map`으로 변환된 복잡한 객체에서 다시 원래의 단순한 형태(e.g., 인덱스와 값 튜플)로 되돌리는 방법을 알려줘. 이게 있어야 fast-check가 "어떤 입력값이 문제의 최소 원인이었나?"를 효율적으로 찾아낼 수 있어. 특히 `fill`, `select`, `setRange`, `scroll` 처럼 값이 있는 인터랙션의 unmapper(`unmapValueInteraction`)는 `[originalIndex, value]` 튜플을 반환하는데, `originalIndex`는 `fillInteractions` 배열 등 원본 목록에서의 인덱스를 가리켜. 이 구조가 복잡해 보일 수 있지만, 정확한 shrinking을 위해 필요해.
- **오류 처리**:
  - **페이지 오류 (`pageerror`)**: 테스트 실행 중 발생하는 자바스크립트 오류는 `page.on('pageerror', ...)` 핸들러로 감지돼. `executeInteraction`과 `runSingleIteration`, `testUIComponent` 레벨에서 모두 에러를 로깅하지만, 기본적으로 페이지 에러 자체가 즉시 테스트를 중단시키지는 않을 수 있어(핸들러 로직에 따라 다름). 하지만 `runSingleIteration`의 `asyncProperty` 내부에서는 페이지 에러가 발생하면 해당 시퀀스를 실패로 간주하고 에러를 throw해서 fast-check가 인지하도록 만들어.
  - **상호작용 실패**: `executeInteraction` 내에서 Playwright 액션(클릭, 입력 등)이 실패하면 `result.success`가 `false`가 되고, 이 결과는 `runSingleIteration`의 `asyncProperty`로 전달돼. 여기서도 에러를 throw해서 fast-check가 실패를 인지하고 shrinking을 시작하게 돼.
  - **주의**: 페이지 에러가 발생해도 상호작용 자체는 성공할 수 있고, 그 반대도 가능해. 디버깅 시에는 두 종류의 오류 로그를 모두 확인해야 해.
- **상태 초기화 (`resetComponentState`)**: 이 함수는 먼저 페이지 전역 스코프에 `resetComponentState`라는 함수가 있는지 확인하고 있으면 호출해. 만약 없다면 페이지를 그냥 `reload()` 해버려. 즉, 테스트 대상 컴포넌트가 자체적인 상태 초기화 메커니즘을 `globalThis.resetComponentState`로 노출하지 않으면, 매 반복마다 페이지 전체가 새로고침될 수 있다는 점을 알아야 해. 이는 테스트 속도에 영향을 줄 수 있어.
- **디버깅 (`debugWithShrunkExample`)**: fast-check가 실패 케이스를 찾았을 때 이 함수가 실행되는데, 축소된 시퀀스를 **한 단계씩** 재현하면서 로그를 남겨. Playwright 테스트 리포트에 첨부된 로그(`시퀀스 디버깅 로그`)를 보면, 어떤 상호작용 직후에 문제가 발생했는지(에러 발생, 상태 변화 등)를 따라가 볼 수 있어. 로그 메시지에 `[ 1 단계 인터랙션 실행: <클릭> ]`, `상태: visible - ...`, `< 2 단계 실행 중 에러 발생: ... >` 같은 형식으로 정보가 표시될 거야.
- **페이지 닫힘 확인 (`isPageClosed`)**: 긴 시퀀스 실행이나 디버깅 과정 중에 예기치 않게 페이지가 닫힐 수 있어 (예: 브라우저 충돌). `isPageClosed` 함수는 `page.evaluate('1 + 1')` 같은 간단한 연산을 시도하고, 실패하면 페이지가 닫힌 것으로 간주해. 이 검사를 통해 이미 닫힌 페이지에 Playwright 명령을 보내 발생하는 추가 오류를 방지하고 있어.
- **선택자 우선순위 (`getUniqueSelector`)**: 요소 선택자를 생성할 때 `data-testid` 속성이 있으면 최우선으로 사용하고, 없으면 `id`를, 그것도 없으면 `tagName:nth-child()` 형태의 구조적 선택자를 사용해. 안정적인 테스트를 위해서는 가급적 `data-testid`를 컴포넌트에 부여하는 것이 좋아.

## 시각적 코드 설명 (Visual Code Explanations)

### 주요 타입 요약 (Markdown Table)

| 타입명              | 설명                                 |
| :------------------ | :----------------------------------- |
| `Interaction`       | 단일 사용자 상호작용 정의            |
| `TestConfig`        | 테스트 실행 설정                     |
| `IterationInfo`     | 단일 테스트 반복 결과                |
| `SequenceInfo`      | 단일 상호작용 시퀀스 실행 결과       |
| `InteractionResult` | 단일 상호작용 실행 결과              |
| `DebugInfo`         | 전체 테스트 실행 결과 및 디버깅 정보 |
| `StepTracker`       | 축소된 반례 디버깅 시 현재 단계 추적 |

(각 타입의 상세 속성은 위 API 문서 섹션 참고)
</file>

<file path="storybook/e2e/universal-testers.js">
/**
 * @file Storybook UI 컴포넌트에 대한 범용 테스트 유틸리티 - 고급 디버깅 개선 버전 모든 Presentational 컴포넌트에 적용 가능한 범용성을 목표로
 *   작성됨.
 */
import { promises as fs } from 'node:fs'
import path from 'node:path'
import { R } from '@library/helpers/R'
import { expect, test } from '@playwright/test'
import fc from 'fast-check'
/**
 * 인터랙션 타입 정의
 *
 * @typedef {Object} Interaction
 * @property {string} type - 인터랙션 타입 (click, fill, select 등)
 * @property {string} selector - 대상 요소의 셀렉터
 * @property {any} [value] - 인터랙션에 필요한 값 (fill, select 등에 사용)
 * @property {string} [valueType] - 입력 시 값 타입 (text, email, number, textarea 등)
 * @property {number} [min] - Range 최소값 (setRange에 사용)
 * @property {number} [max] - Range 최대값 (setRange에 사용)
 * @property {string[]} [options] - Select 옵션 (select에 사용)
 * @property {boolean} [isScrollableX] - 가로 스크롤 가능 여부 (scroll에 사용)
 * @property {boolean} [isScrollableY] - 세로 스크롤 가능 여부 (scroll에 사용)
 * @property {string} [sourceSelector] - 드래그 시작 요소 셀렉터 (dragDrop 타입용)
 * @property {string} [targetSelector] - 드롭 대상 요소 셀렉터 (dragDrop 타입용)
 */
/**
 * 단계 추적 객체 타입 정의
 *
 * @typedef {Object} StepTracker
 * @property {number | undefined} currentStep - 현재 실행 중인 단계 번호
 * @property {Interaction | undefined} currentInteraction - 현재 실행 중인 인터랙션
 */
/**
 * 테스트 설정 정의
 *
 * @typedef {Object} TestConfig
 * @property {number} [iterationCount=3] - 인터랙션 시퀀스 반복 횟수. Default is `3`
 * @property {number} [sequenceLength=5] - 각 테스트 시퀀스의 인터랙션 수. Default is `5`
 * @property {number} [numRuns=10] - Fast-check 실행 횟수. Default is `10`
 * @property {string} [componentSelector='#storybook-root'] - 컴포넌트의 기본 셀렉터. Default is
 *   `'#storybook-root'`
 * @property {number} [waitAfterInteraction=100] - 각 인터랙션 후 대기 시간(ms). Default is `100`
 * @property {boolean} [resetComponent=false] - 반복마다 컴포넌트 상태 초기화를 할 것인지 여부. Default is `false`
 * @property {string} [debugLogDir='./test-results/debug-logs'] - 디버그 로그 저장 디렉토리. Default is
 *   `'./test-results/debug-logs'`
 * @property {boolean} [verbose=false] - 상세 로그 출력 여부. Default is `false`
 */
/**
 * 테스트 반복 정보
 *
 * @typedef {Object} IterationInfo
 * @property {number} iterationNumber - 반복 횟수
 * @property {{
 * 	results: InteractionResult[]
 * 	errors: { message: string; stack: string }[]
 * 	startTime: string
 * }[]} sequences
 *   - 시퀀스 정보
 *
 * @property {{ message: string; stack: string }[]} errors - 발생한 에러 목록
 * @property {string} [stateSummary] - 상태 요약
 * @property {boolean} [noInteractions] - 인터랙션 없음 여부
 * @property {string} startTime - 시작 시간
 * @property {string} [endTime] - 종료 시간
 * @property {{ isVisible: boolean; summary: string }} [finalState] - 최종 상태
 * @property {{
 * 	counterExample: Interaction[]
 * 	error: { message: string; stack: string }
 * 	property: string
 * }} [failureInfo]
 *   - 실패 정보
 *
 * @property {boolean} success - 성공 여부
 */
/**
 * 디버깅 정보 객체
 *
 * @typedef {Object} DebugInfo
 * @property {string} componentName - 컴포넌트 이름
 * @property {{ message: string; stack: string }[]} errors - 발생한 에러 목록
 * @property {object} [counterExample] - Fast-check의 반례 데이터
 * @property {string} [state] - DOM 상태 요약
 * @property {string} [timestamp] - 발생 시간
 * @property {string} url - 테스트 페이지 URL
 * @property {TestConfig} testConfig - 테스트 설정
 * @property {IterationInfo[]} iterations - 테스트 반복 정보
 * @property {boolean} success - 테스트 성공 여부
 * @property {string} [debugFilePath] - 디버그 정보 파일 경로
 */
/**
 * 시퀀스 정보 타입 정의
 *
 * @typedef {Object} SequenceInfo
 * @property {any[]} results - 인터랙션 실행 결과
 * @property {any[]} errors - 발생한 에러 목록
 * @property {string} startTime - 시작 시간
 * @property {string} [endTime] - 종료 시간
 * @property {string} [finalState] - 최종 상태
 */
/**
 * 브라우저 컨텍스트 내에서 직접 요소 정보와 선택자를 추출 (CSS 기반 가시성 체크 포함)
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {string} componentSelector - 컴포넌트의 최상위 셀렉터
 * @param {boolean} [verbose=false] - 상세 로그 출력 여부. Default is `false`
 * @returns {Promise<any[]>} 보이는 요소 정보 배열
 */
async function discoverInteractions(page, componentSelector, verbose = false) {
	// verifyComponentState를 사용하여 컴포넌트가 보이는지 확인
	const { isVisible: isComponentVisible, summary } = await verifyComponentState(
		page,
		componentSelector,
		10_000,
	)
	// 컴포넌트 자체가 보이지 않으면 빈 배열 반환
	if (!isComponentVisible) {
		console.warn(
			`discoverInteractions: 컴포넌트(${componentSelector})가 표시되지 않음 - ${summary}`,
		)
		return []
	}
	// 측정을 시작하기 전에 브라우저가 다음 프레임을 그릴 때까지 기다립니다.
	try {
		await page.evaluate(() => new Promise(requestAnimationFrame))
	} catch (error) {
		console.error('Error during requestAnimationFrame wait:', error)
	}
	// 브라우저 컨텍스트 내에서 요소 정보 추출 및 CSS 기반 가시성 필터링
	const visibleElementInfos = await page.evaluate((selector) => {
		/**
		 * 요소의 고유 CSS 선택자를 생성합니다. data-testid, id, nth-child 순서로 우선순위를 가집니다.
		 *
		 * @param {Element} el - 대상 요소
		 * @param {string} base - 기본 선택자 (루트 컴포넌트 선택자)
		 * @returns {string} 고유 CSS 선택자
		 */
		function getUniqueSelector(el, base) {
			let testId = el.getAttribute('data-testid')
			if (testId) {
				// data-testid 값에 특수문자가 있을 수 있으므로 CSS.escape 사용 고려 (간단하게 처리)
				// 중첩 템플릿 리터럴 제거
				const escapedTestId = testId.replaceAll('"', String.raw`\"`)
				return `${base} [data-testid="${escapedTestId}"]`
			}
			if (el.id) {
				// id 값에 특수문자가 있을 수 있으므로 CSS.escape 사용
				return `#${CSS.escape(el.id)}` // id는 전역적으로 고유해야 하므로 base 불필요
			}
			if (el.parentElement) {
				let children = Array.from(el.parentElement.children)
				let index = children.indexOf(el) + 1
				// 부모의 고유 선택자를 재귀적으로 찾고, 현재 요소의 태그와 인덱스를 추가
				// 주의: 매우 복잡해질 수 있으므로 여기서는 단순화된 접근 방식 사용
				// 부모가 루트가 아니면 부모 선택자 재귀 호출 필요 -> 여기서는 바로 부모 태그 사용
				const parentSelector =
					el.parentElement === document.querySelector(base) ?
						base
					:	getUniqueSelector(el.parentElement, base) // 재귀 호출 시 base 전달 방식 수정 필요할 수 있음
				return `${parentSelector} > ${el.tagName.toLowerCase()}:nth-child(${index})`
			}
			// 부모가 없는 경우 (거의 없음) 또는 루트 바로 아래 요소
			return `${base} > ${el.tagName.toLowerCase()}`
		}
		/**
		 * 요소가 시각적으로 보이는지 CSS 속성 및 크기를 기준으로 확인합니다.
		 *
		 * @param {Element} element - 확인할 요소
		 * @returns {boolean} 요소가 보이면 true, 아니면 false
		 */
		function isElementVisible(element) {
			if (!element) return false
			// 1. getComputedStyle 확인
			const style = globalThis.getComputedStyle(element)
			if (
				style.display === 'none' ||
				style.visibility === 'hidden' ||
				Number.parseFloat(style.opacity) === 0
			) {
				return false
			}
			// 2. 크기 확인 (너비 또는 높이가 0이면 보이지 않음)
			// HTMLElement 인스턴스인지 확인 후 offsetWidth/offsetHeight 접근
			if (element instanceof HTMLElement) {
				if (element.offsetWidth <= 0 && element.offsetHeight <= 0) {
					// 크기가 0이라도 자식 요소가 보이는 경우도 있으므로 완벽하진 않음 (예: SVG)
					// 여기서는 너비와 높이 모두 0일 때만 숨김 처리
					return false
				}
			} else if (element instanceof SVGElement) {
				// SVG 요소의 경우 getBBox() 등으로 크기 확인 가능하나, 여기서는 일단 통과시킴
				// 필요시 SVG 크기 확인 로직 추가
			} else {
				// HTMLElement나 SVGElement가 아닌 다른 타입의 Element는 크기 확인 생략
			}
			// 3. 부모 요소 가시성 확인 (재귀적)
			// document.body까지 올라가면서 숨겨진 부모가 있는지 확인
			let parent = element.parentElement
			while (parent && parent !== document.body) {
				const parentStyle = globalThis.getComputedStyle(parent)
				if (parentStyle.display === 'none' || parentStyle.visibility === 'hidden') {
					return false
				}
				parent = parent.parentElement
			}
			return true
		}
		const root = document.querySelector(selector)
		if (!root) return []
		const allElements = Array.from(root.querySelectorAll('*'))
		const visibleInfos = []
		for (const el of allElements) {
			// 요소가 실제로 보이는지 확인
			if (isElementVisible(el)) {
				const uniqueSelector = getUniqueSelector(el, selector)
				const computedStyle = globalThis.getComputedStyle(el) // isElementVisible에서 이미 계산했으므로 재사용 가능하면 좋음
				const { overflowY, overflowX } = computedStyle
				const toleranceY = 1
				const toleranceX = 1
				const isScrollableY =
					(overflowY === 'scroll' || overflowY === 'auto') &&
					el.scrollHeight - el.clientHeight > toleranceY
				const isScrollableX =
					(overflowX === 'scroll' || overflowX === 'auto') &&
					el.scrollWidth - el.clientWidth > toleranceX
				visibleInfos.push({
					tagName: el.tagName.toLowerCase(),
					selector: uniqueSelector,
					type: el.getAttribute('type'),
					role: el.getAttribute('role'),
					// disabled와 readonly는 가시성과 별개이므로 계속 포함
					disabled: el.hasAttribute('disabled') || el.getAttribute('aria-disabled') === 'true',
					readonly: el.hasAttribute('readonly'),
					options:
						el.tagName.toLowerCase() === 'select' ?
							Array.from(el.querySelectorAll('option'), (option) => option.value)
						:	[],
					min: el.hasAttribute('min') ? Number.parseInt(el.getAttribute('min') || '0', 10) : 0,
					max: el.hasAttribute('max') ? Number.parseInt(el.getAttribute('max') || '100', 10) : 100,
					draggable:
						el.getAttribute('draggable') === 'true' || el.getAttribute('data-draggable') === 'true',
					isDroppable: el.getAttribute('data-droppable') === 'true',
					isScrollableX,
					isScrollableY,
					scrollHeight: el.scrollHeight,
					scrollWidth: el.scrollWidth,
					clientHeight: el.clientHeight,
					clientWidth: el.clientWidth,
				})
			}
		}
		return visibleInfos
	}, componentSelector)
	// 이제 visibleElementInfos에는 CSS 기반으로 필터링된 요소 정보만 들어 있음
	const interactions = []
	const draggableElements = []
	const droppableElements = []
	// 보이는 요소들에 대해서만 인터랙션 생성 및 드래그/드롭 요소 식별
	for (const elementInfo of visibleElementInfos) {
		// 이미 보이는 요소만 있으므로 추가 가시성 체크 불필요
		interactions.push(...getInteractionsFromElementInfo(elementInfo))
		if (elementInfo.draggable && !elementInfo.disabled) {
			draggableElements.push(elementInfo)
		}
		if (elementInfo.isDroppable && !elementInfo.disabled) {
			droppableElements.push(elementInfo)
		}
	}
	// 드래그 가능한 요소와 드롭 가능한 요소 간의 dragDrop 인터랙션 생성
	if (draggableElements.length > 0 && droppableElements.length > 0) {
		// 모든 (드래그 가능 요소, 드롭 가능 요소) 조합 생성
		for (const sourceElement of draggableElements) {
			for (const targetElement of droppableElements) {
				// 자기 자신에게 드롭하는 경우도 포함
				interactions.push({
					type: 'dragDrop',
					sourceSelector: sourceElement.selector,
					targetSelector: targetElement.selector,
				})
			}
		}
		if (verbose) {
			console.log(
				`💬 dragDrop 인터랙션 ${draggableElements.length * droppableElements.length}개 생성됨 (CSS 기반 보이는 요소)`,
			)
		}
	}
	if (verbose) {
		console.log(
			`💬 discoverInteractions: 최종 인터랙션 ${interactions.length}개 생성됨 (CSS 기반 보이는 요소)`,
		)
	}
	return interactions
}
/**
 * 요소 정보에서 가능한 인터랙션을 생성합니다.
 *
 * @param {object} elementInfo - 요소 정보 객체
 * @returns {Interaction[]} 가능한 인터랙션 목록
 */
function getInteractionsFromElementInfo(elementInfo) {
	const interactions = []
	const {
		tagName,
		selector,
		type,
		role,
		disabled,
		readonly,
		options,
		min,
		max,
		draggable,
		isScrollableX,
		isScrollableY,
	} = elementInfo
	if (disabled) return []
	switch (tagName) {
		case 'a':
		case 'button': {
			interactions.push(
				{ type: 'click', selector },
				{ type: 'hover', selector },
				{ type: 'doubleClick', selector },
			)
			break
		}
		case 'input': {
			switch (type) {
				case '':
				case 'email':
				case 'number':
				case 'password':
				case 'search':
				case 'text':
				case undefined: {
					if (!readonly) {
						interactions.push({
							type: 'fill',
							selector,
							valueType: type || 'text',
						})
					}
					break
				}
				case 'checkbox':
				case 'radio': {
					interactions.push({ type: 'click', selector })
					break
				}
				case 'range': {
					interactions.push({
						type: 'setRange',
						selector,
						min,
						max,
					})
					break
				}
			}
			break
		}
		case 'select': {
			if (options.length > 0) {
				interactions.push({ type: 'select', selector, options })
			}
			break
		}
		case 'textarea': {
			if (!readonly) {
				interactions.push({ type: 'fill', selector, valueType: 'textarea' })
			}
			break
		}
	}
	if (role === 'button') {
		interactions.push(
			{ type: 'click', selector },
			{ type: 'hover', selector },
			{ type: 'doubleClick', selector },
		)
	}
	if (['listbox', 'menu', 'tablist'].includes(role)) {
		interactions.push(
			{ type: 'click', selector },
			{ type: 'hover', selector },
			{ type: 'doubleClick', selector },
		)
	}
	if (draggable) {
		interactions.push({ type: 'drag', selector })
	}
	// 스크롤 가능한 요소에 대한 인터랙션 추가
	if (isScrollableY || isScrollableX) {
		interactions.push({
			type: 'scroll',
			selector,
			isScrollableX,
			isScrollableY,
		})
	}
	return interactions
}
/**
 * 컴포넌트 상태를 초기화할 수 있는 함수 (페이지 내 global reset 함수가 존재하는 경우) 존재하지 않으면 아무 작업도 하지 않음.
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 */
async function resetComponentState(page) {
	// 페이지에 정의된 resetComponentState 함수가 있으면 호출
	// 스토리북에서 특별히 리셋 함수를 제공하는 경우 사용
	try {
		// 전역 범위 함수 호출 필요하므로 page.evaluate 유지
		const hasResetFunction = await page.evaluate(
			() => {
				if (typeof globalThis.resetComponentState === 'function') {
					globalThis.resetComponentState()
					return true // 함수가 존재하고 실행됨
				}
				return false // 함수가 존재하지 않음
			},
			{ timeout: 1000 },
		)
		// 함수가 없으면 페이지 리로드
		if (!hasResetFunction) {
			await page.reload()
			// 페이지가 완전히 로드될 때까지 대기
			await page.waitForLoadState('domcontentloaded')
		}
	} catch (error) {
		console.warn('컴포넌트 상태 초기화 중 오류 발생:', error.message)
		// 오류가 발생한 경우에도 페이지 리로드 시도
		try {
			console.log('오류 발생으로 페이지를 리로드합니다.')
			await page.reload()
			await page.waitForLoadState('domcontentloaded')
		} catch (reloadError) {
			console.warn('페이지 리로드 중 오류 발생:', reloadError.message)
		}
	}
}
/**
 * 인터랙션 실행 결과 객체
 *
 * @typedef {Object} InteractionResult
 * @property {boolean} success - 인터랙션 성공 여부
 * @property {string} [errorMessage] - 에러 메시지
 * @property {any} [value] - 인터랙션 결과 값 (필요한 경우)
 * @property {string} [message] - 추가 정보
 * @property {string} [errorStack] - 에러 스택 추적
 * @property {Error} [error] - 원본 에러 객체
 */
let currentInteraction // 현재 실행 중인 인터랙션을 추적하기 위한 변수
/**
 * 주어진 타입과 옵션에 맞는 fast-check 값 Arbitrary를 생성합니다. 숫자 타입은 문자열로 변환됩니다.
 *
 * @param {string} valueType - 값 유형 (text, email, number, textarea, select, range 등)
 * @param {object} [options={}] - 추가 옵션 (min, max, select 옵션 목록 등). Default is `{}`
 * @param {number} [options.min] - Range 최소값
 * @param {number} [options.max] - Range 최대값
 * @param {string[]} [options.options] - Select 옵션 목록
 * @param {boolean} [options.isScrollableX] - 가로 스크롤 가능 여부
 * @param {boolean} [options.isScrollableY] - 세로 스크롤 가능 여부
 * @returns {fc.Arbitrary<any>} 생성된 값 Arbitrary
 */
function _getValueArbitraryForType(valueType, options = {}) {
	switch (valueType) {
		case 'email': {
			return fc.emailAddress()
		}
		case 'number': {
			// page.fill은 문자열을 기대하므로 숫자를 문자열로 변환
			return fc.integer(options).map(String)
		}
		case 'range': {
			// range input은 보통 숫자를 직접 다루므로 변환 불필요 (evaluate에서 처리)
			// 단, locator.fill을 사용한다면 문자열 변환 필요할 수 있음
			return fc.integer({ min: options.min ?? 0, max: options.max ?? 100 })
		}
		case 'scroll': {
			// 스크롤 방향과 양을 생성하는 Arbitrary
			let directionArb
			if (options.isScrollableX && options.isScrollableY) {
				directionArb = fc.constantFrom('vertical', 'horizontal')
			} else if (options.isScrollableX) {
				directionArb = fc.constant('horizontal')
			} else {
				directionArb = fc.constant('vertical')
			}
			const amountArb = fc.integer({ min: -100, max: 100 }).filter((n) => n !== 0)
			return fc.record({
				direction: directionArb,
				amount: amountArb,
			})
		}
		case 'select': {
			if (options.options && options.options.length > 0) {
				return fc.constantFrom(...options.options)
			}
			// 선택할 옵션이 없으면 기본값 또는 에러 처리 필요 -> 여기서는 빈 문자열 반환 (혹은 fc.constant('') 등)
			// Arbitrary 생성 단계에서는 에러보다 기본값 반환이 나을 수 있음
			return fc.constant('')
		}
		case 'textarea': {
			// 여러 줄 텍스트 가능성 고려
			return fc.lorem().map((str) => `테스트 텍스트 ${str}`) // 이해하기 쉽게 접두사 추가
		}
		// 'text', 'password', 'search' 등 기본 문자열 타입
		default: {
			// 빈 문자열 포함 가능하도록 fc.string 사용
			return fc.string().map((str) => {
				// 너무 짧은 문자열은 접두사 추가
				return str.length < 3 ? `테스트 입력 ${str}` : str
			})
		}
	}
}
/**
 * 안전한 난수 생성을 위한 유틸리티 함수
 *
 * @param {number} min - 최소값 (포함)
 * @param {number} max - 최대값 (포함)
 * @returns {number} Min과 max 사이의 난수
 */
function getRandom(min, max) {
	return Math.floor(Math.random() * (max - min + 1)) + min
}
/**
 * 테스트용 랜덤 문자열을 생성합니다.
 *
 * @returns {string} 랜덤 문자열
 */
function getRandomString() {
	return Math.random().toString(36).slice(2, 8)
}
/**
 * 각 valueType에 맞는 랜덤 값을 생성합니다. 참고: 이 함수는 이제 주로 legacy 코드에서 사용됩니다. 새로운 값 생성은
 * _getValueArbitraryForType 함수를 사용하세요.
 *
 * @param {string} valueType - 값 유형 (email, number, textarea 등)
 * @returns {string} 생성된 값
 */
function getRandomValueForType(valueType) {
	switch (valueType) {
		case 'email': {
			return `test${getRandomString()}@example.com`
		}
		case 'number': {
			return getRandom(0, 100).toString()
		}
		case 'textarea': {
			return `테스트 텍스트 ${getRandomString()}`
		}
		default: {
			return `테스트 입력 ${getRandomString()}`
		}
	}
}
/**
 * 인터랙션 실행 - 주어진 상호작용을 페이지에서 실제로 수행합니다. 각 인터랙션 타입(클릭, 입력, 드래그 등)에 맞는 Playwright 액션을 실행합니다.
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {Interaction} interaction - 실행할 인터랙션
 * @param {number} waitTime - 인터랙션 후 대기 시간(ms)
 * @param {boolean} verbose - 상세 로그 출력 여부
 * @returns {Promise<InteractionResult>} 인터랙션 실행 결과
 */
async function executeInteraction(page, interaction, waitTime, verbose = false) {
	// 결과 객체 초기화
	const result = {
		success: false,
		type: interaction.type,
		selector: interaction.selector,
		timestamp: new Date().toISOString(),
		// 상세 정보를 위한 필드 추가
		details: {},
	}
	// 현재 실행 중인 인터랙션 정보 설정
	currentInteraction = {
		...interaction,
		timestamp: result.timestamp,
		id: `${interaction.type}-(${interaction.selector})-${result.timestamp}`,
	}
	// 상세 로그 출력
	if (verbose) {
		console.log(`실행 인터랙션: ${interaction.type} on (${interaction.selector})`)
	}
	// 페이지 에러 핸들러 설정 - 에러가 발생해도 인터랙션 계속 진행
	let pageErrorOccurred = false
	let pageErrorMessage = ''
	const pageErrorHandler = (error) => {
		pageErrorOccurred = true
		pageErrorMessage = error.message
		console.error(`페이지 에러 발생 (계속 진행): ${error.message}`)
	}
	// 페이지 에러 이벤트 리스너 추가
	page.on('pageerror', pageErrorHandler)
	try {
		// 대상 요소를 locator로 가져옴
		const locator = page.locator(interaction.selector)
		// 요소가 표시될 때까지 대기 (최대 5초)
		try {
			if (verbose) console.log(`요소 표시 대기 중: ${interaction.selector}`)
			await locator.waitFor({ state: 'visible', timeout: 5000 })
		} catch {
			// 타임아웃 내에 요소가 표시되지 않음
			if (verbose) console.log(`요소 대기 타임아웃: ${interaction.selector}`)
		}
		// 요소 존재 및 가시성 확인 (locator 사용)
		const isVisible = await locator.isVisible()
		if (!isVisible) {
			// isVisible()이 false를 반환하면 요소가 없거나 보이지 않음
			result.message = `요소가 화면에 표시되지 않거나 존재하지 않음: (${interaction.selector})`
			result.success = true
			return result
		}
		// 요소가 disabled 상태인지 확인 (locator 사용)
		const isDisabled = await locator.isDisabled() // isDisabled()는 disabled 속성과 aria-disabled="true" 모두 확인
		if (isDisabled) {
			result.message = `요소가 비활성화됨: (${interaction.selector})`
			result.success = true
			return result
		}
		// 인터랙션 타입에 따른 처리
		// executeInteractionByType 내에서 locator를 사용할 수 있도록 locator 전달 또는 selector만 사용
		await executeInteractionByType(page, interaction, result) // locator 대신 selector 기반으로 동작하도록 유지
		// 인터랙션 후 지정된 시간만큼 대기
		// eslint-disable-next-line playwright/no-wait-for-timeout
		await page.waitForTimeout(waitTime) // 의도된 동작일 수 있으므로 유지 (린트 규칙 비활성화)
		// 참고: 일반적으로는 locator.waitFor와 같은 명시적 대기를 권장합니다.
		// 예: await locator.waitFor({ state: 'visible', timeout: waitTime });
		// 하지만 모든 인터랙션 후 기다려야 할 특정 상태를 정의하기 어려움.
		// 페이지 에러가 발생했는지 확인
		if (pageErrorOccurred) {
			// 페이지 에러가 발생했지만 계속 진행하기 위해 에러 정보만 기록
			result.errorMessage = `페이지 에러 발생 (계속 진행): ${pageErrorMessage}`
			result.success = false // 페이지 에러 시 실패로 간주 (기존 로직 유지 시 주석 처리)
		}
		// else { // 페이지 에러가 없을 때만 성공 처리하던 기존 로직 -> 페이지 에러 있어도 성공으로 간주하던 로직 수정
		//  result.success = true;
		//}
	} catch (error) {
		// 에러 정보 기록 (expect(...).toBeVisible() 실패 포함)
		result.errorMessage = error.message
		result.errorStack = error.stack
		result.error = error // 원본 에러 객체도 보존
		result.success = false // 에러 발생 시 명시적으로 실패 처리
		if (verbose) {
			console.error(
				`인터랙션 실행 중 오류 발생 (${interaction.type} on (${interaction.selector})): ${error.message}`,
			)
		}
	} finally {
		// 항상 이벤트 리스너 제거
		page.removeListener('pageerror', pageErrorHandler)
	}
	return result // 항상 결과 객체 반환, 호출자가 성공/실패 처리
}
/**
 * 인터랙션 타입에 따라 적절한 실행 함수 호출 executeInteraction의 복잡도를 줄이기 위해 분리
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {Interaction} interaction - 실행할 인터랙션
 * @param {InteractionResult} result - 결과를 저장할 객체
 */
async function executeInteractionByType(page, interaction, result) {
	try {
		switch (interaction.type) {
			case 'click': {
				await page.click(interaction.selector, { timeout: 5000 }) // 타임아웃 추가
				result.message = '클릭'
				break
			}
			case 'doubleClick': {
				const locator = page.locator(interaction.selector)
				await locator.dblclick({ timeout: 5000 })
				result.message = '더블 클릭'
				break
			}
			case 'drag': {
				await page.hover(interaction.selector)
				await page.dragAndDrop(interaction.selector, interaction.selector, {
					targetPosition: { x: 10, y: 10 },
					timeout: 5000, // 타임아웃 추가
				})
				result.message = '드래그'
				break
			}
			case 'dragDrop': {
				// sourceSelector와 targetSelector가 있는지 확인
				if (!interaction.sourceSelector || !interaction.targetSelector) {
					result.errorMessage =
						'dragDrop 인터랙션에는 sourceSelector와 targetSelector가 모두 필요합니다.'
					result.success = false
					return
				}
				try {
					// 소스 요소와 타겟 요소의 locator 생성
					const sourceLocator = page.locator(interaction.sourceSelector)
					const targetLocator = page.locator(interaction.targetSelector)
					// 두 요소가 모두 보이는지 확인
					const isSourceVisible = await sourceLocator.isVisible()
					const isTargetVisible = await targetLocator.isVisible()
					if (!isSourceVisible) {
						result.errorMessage = `드래그 소스 요소가 보이지 않음: ${interaction.sourceSelector}`
						result.success = false
						return
					}
					if (!isTargetVisible) {
						result.errorMessage = `드롭 타겟 요소가 보이지 않음: ${interaction.targetSelector}`
						result.success = false
						return
					}
					// 두 요소가 모두 활성화 되어 있는지 확인
					const isSourceDisabled = await sourceLocator.isDisabled()
					const isTargetDisabled = await targetLocator.isDisabled()
					if (isSourceDisabled) {
						result.errorMessage = `드래그 소스 요소가 비활성화됨: ${interaction.sourceSelector}`
						result.success = false
						return
					}
					if (isTargetDisabled) {
						result.errorMessage = `드롭 타겟 요소가 비활성화됨: ${interaction.targetSelector}`
						result.success = false
						return
					}
					// 드래그 앤 드롭 수행
					await sourceLocator.dragTo(targetLocator, { timeout: 7000 })
					result.message = `드래그 앤 드롭: ${interaction.sourceSelector} → ${interaction.targetSelector}`
				} catch (actionError) {
					// 드래그 앤 드롭 액션 실패 시 처리
					console.error(
						`드래그 앤 드롭 액션 실패 (${interaction.sourceSelector} → ${interaction.targetSelector}): ${actionError.message}`,
					)
					result.errorMessage = `드래그 앤 드롭 실패: ${actionError.message}`
					result.errorStack = actionError.stack
					result.error = actionError
					result.success = false
					return
				}
				break
			}
			case 'fill': {
				await executeFillInteraction(page, interaction, result)
				break
			}
			case 'hover': {
				await page.hover(interaction.selector, { timeout: 5000 }) // 타임아웃 추가
				result.message = '호버'
				break
			}
			case 'scroll': {
				await executeScrollInteraction(page, interaction, result)
				break
			}
			case 'select': {
				await executeSelectInteraction(page, interaction, result)
				break
			}
			case 'setRange': {
				await executeRangeInteraction(page, interaction, result)
				break
			}
			default: {
				result.errorMessage = `지원하지 않는 인터랙션 타입: ${interaction.type}`
				result.success = false
				return // 지원하지 않는 타입이면 에러 정보 기록 후 리턴
			}
		}
	} catch (error) {
		// 에러 정보 기록만 하고 throw 하지 않음
		// eslint-disable-next-line require-atomic-updates
		result.errorMessage = error.message
		// eslint-disable-next-line require-atomic-updates
		result.errorStack = error.stack
		// eslint-disable-next-line require-atomic-updates
		result.error = error
		// eslint-disable-next-line require-atomic-updates
		result.success = false
		console.error(
			`인터랙션 실행 중 에러 발생 <${interaction.type}> on (${interaction.selector})): ${error.message}`,
		)
		// 에러를 throw하지 않고 처리 완료
	}
	// eslint-disable-next-line require-atomic-updates
	result.success = true
}
/** Fill 인터랙션 실행 */
async function executeFillInteraction(page, interaction, result) {
	// interaction 객체에 이미 value가 포함되어 있는지 확인
	if (interaction.value === undefined) {
		// 필드 타입에 따라 적절한 테스트 값 생성 - legacy 지원 (이전 버전 호환성)
		const valueType = interaction.valueType || 'text'
		const value = getRandomValueForType(valueType)
		await page.fill(interaction.selector, value)
		result.value = value
		result.message = `값 입력: ${value}`
	} else {
		// fc에서 생성된 값(문자열) 사용
		await page.fill(interaction.selector, interaction.value)
		result.value = interaction.value
		result.message = `값 입력: ${interaction.value}`
	}
	result.success = true
}
/** Select 인터랙션 실행 */
async function executeSelectInteraction(page, interaction, result) {
	if (interaction.value !== undefined) {
		// fc에서 생성된 값 사용
		await page.selectOption(interaction.selector, interaction.value)
		result.value = interaction.value
		result.message = `옵션 선택: ${interaction.value}`
		result.success = true
	} else if (interaction.options && interaction.options.length > 0) {
		// legacy 지원 - 랜덤하게 옵션 선택 (이전 버전 호환성)
		const randomIndex = getRandom(0, interaction.options.length - 1)
		const selectedValue = interaction.options[randomIndex]
		await page.selectOption(interaction.selector, selectedValue)
		result.value = selectedValue
		result.message = `옵션 선택: ${selectedValue}`
		result.success = true
	} else {
		result.errorMessage = '선택 가능한 옵션이 없음'
		result.success = false
	}
}
/** Range 인터랙션 실행 */
async function executeRangeInteraction(page, interaction, result) {
	const min = interaction.min || 0
	const max = interaction.max || 100
	// interaction.value가 있으면 사용, 없으면 legacy 지원으로 값 생성
	const newValue = interaction.value === undefined ? getRandom(min, max) : interaction.value
	// locator.evaluate를 사용하여 범위 값 설정 및 이벤트 발생
	const locator = page.locator(interaction.selector)
	await locator.evaluate(
		(el, val) => {
			// el은 이미 선택된 요소이므로 타입 체크만 수행
			if (el instanceof HTMLInputElement && (el.type === 'range' || el.type === 'number')) {
				// Input 요소의 value 속성을 직접 설정하는 것이 더 안정적일 수 있음
				el.value = String(val)
				// setAttribute를 사용해야 하는 경우
				// el.setAttribute('value', String(val));
			}
			// 값 변경 후 이벤트 발생시켜 변경을 감지하도록 함
			el.dispatchEvent(new Event('input', { bubbles: true }))
			el.dispatchEvent(new Event('change', { bubbles: true }))
		},
		newValue, // evaluate 함수의 두 번째 인자로 전달
	)
	result.value = newValue
	result.message = `범위 값 설정: ${newValue}`
	result.success = true
}
/** Scroll 인터랙션 실행 */
async function executeScrollInteraction(page, interaction, result) {
	// interaction 객체에 이미 value가 포함되어 있는지 확인
	if (interaction.value) {
		// fast-check에서 생성된 값 사용
		const { direction, amount } = interaction.value
		// locator.evaluate를 사용하여 스크롤 실행
		const locator = page.locator(interaction.selector)
		await locator.evaluate(
			(el, { direction, amount }) => {
				if (direction === 'vertical') {
					el.scrollTop += amount
				} else {
					el.scrollLeft += amount
				}
			},
			{ direction, amount },
		)
		result.value = interaction.value
		result.message = `스크롤: ${direction === 'vertical' ? 'Y' : 'X'} ${amount}px`
	} else {
		// 기본값 설정 (방향은 Y, 크기는 50px)
		const direction = interaction.isScrollableY ? 'vertical' : 'horizontal'
		const amount = 50
		// locator.evaluate를 사용하여 스크롤 실행
		const locator = page.locator(interaction.selector)
		await locator.evaluate(
			(el, { direction, amount }) => {
				if (direction === 'vertical') {
					el.scrollTop += amount
				} else {
					el.scrollLeft += amount
				}
			},
			{ direction, amount },
		)
		result.value = { direction, amount }
		result.message = `스크롤: ${direction === 'vertical' ? 'Y' : 'X'} ${amount}px`
	}
	result.success = true
}
// 공통 unmapper 헬퍼 (행위 기반 인터랙션용)
const unmapActionInteraction = (expectedType) => (mappedInteraction) => {
	if (
		typeof mappedInteraction !== 'object' ||
		mappedInteraction === null ||
		mappedInteraction.type !== expectedType || // 타입 일치 확인
		!mappedInteraction.selector // selector 존재 확인 (dragDrop 제외)
	) {
		// dragDrop은 별도 unmapper 사용하므로 여기서 selector 체크는 유효
		throw new Error(`Invalid mapped interaction for unmapping (expected type: ${expectedType})`)
	}
	// type 속성을 제외한 나머지 속성으로 원본 객체 복원
	// eslint-disable-next-line no-unused-vars -- type은 의도적으로 제외
	const { type, ...originalInteraction } = mappedInteraction
	return originalInteraction
}
// 공통 unmapper 헬퍼 (값 기반 인터랙션용) - JSDoc으로 반환 타입 명시
/**
 * 값 기반 인터랙션 객체를 원래의 [index, value] 튜플로 변환합니다.
 *
 * @param {string} expectedType - 예상되는 인터랙션 타입
 * @returns {(mappedInteraction: any) => [number, any]} Unmapper 함수
 */
const unmapValueInteraction = (expectedType) => (mappedInteraction) => {
	if (
		typeof mappedInteraction !== 'object' ||
		mappedInteraction === null ||
		mappedInteraction.type !== expectedType || // 타입 일치 확인
		!('value' in mappedInteraction) || // value 존재 확인
		!('originalIndex' in mappedInteraction) || // originalIndex 존재 확인
		typeof mappedInteraction.originalIndex !== 'number'
	) {
		throw new Error(`Invalid mapped interaction for unmapping (expected type: ${expectedType})`)
	}
	// index와 value를 추출하여 원본 튜플 복원
	/** @type {[number, any]} */
	const resultTuple = [mappedInteraction.originalIndex, mappedInteraction.value]
	return resultTuple
}
// dragDrop 전용 unmapper
const unmapDragDrop = (mappedInteraction) => {
	if (
		typeof mappedInteraction !== 'object' ||
		mappedInteraction === null ||
		mappedInteraction.type !== 'dragDrop' ||
		!mappedInteraction.sourceSelector || // sourceSelector 확인
		!mappedInteraction.targetSelector // targetSelector 확인
	) {
		throw new Error('Invalid mapped interaction for unmapping (expected type: dragDrop)')
	}
	// eslint-disable-next-line no-unused-vars -- type은 의도적으로 제외
	const { type, ...originalInteraction } = mappedInteraction
	return originalInteraction
}
/**
 * 인터랙션 시퀀스 생성을 위한 fast-check arbitrary 생성 fast-check 라이브러리를 사용해 무작위 인터랙션 시퀀스를 생성합니다.
 *
 * @param {Interaction[]} interactions - 가능한 인터랙션 목록
 * @param {number} length - 시퀀스 길이
 * @returns {fc.Arbitrary<Interaction[]>} 인터랙션 시퀀스 arbitrary
 */
function createInteractionSequenceArbitrary(interactions, length) {
	if (interactions.length === 0) {
		return fc.constant([])
	}
	// 1단계: 인터랙션 타입별 분류
	const fillInteractions = interactions.filter((i) => i.type === 'fill')
	const clickInteractions = interactions.filter((i) => i.type === 'click')
	const hoverInteractions = interactions.filter((i) => i.type === 'hover')
	const selectInteractions = interactions.filter((i) => i.type === 'select')
	const rangeInteractions = interactions.filter((i) => i.type === 'setRange')
	const dragInteractions = interactions.filter((i) => i.type === 'drag')
	const doubleClickInteractions = interactions.filter((i) => i.type === 'doubleClick')
	const scrollInteractions = interactions.filter((i) => i.type === 'scroll')
	const dragDropInteractions = interactions.filter((i) => i.type === 'dragDrop')
	// 2단계: 구조화된 Arbitrary 생성
	const arbitraries = []
	// 클릭 인터랙션 처리 - unmapper 추가
	if (clickInteractions.length > 0) {
		const clickInteractionArb = fc.constantFrom(...clickInteractions).map(
			// mapper: type 추가
			(interaction) => ({
				...interaction,
				type: 'click',
			}),
			// unmapper: type 제거
			unmapActionInteraction('click'),
		)
		arbitraries.push(clickInteractionArb)
	}
	// 호버 인터랙션 처리 - unmapper 추가
	if (hoverInteractions.length > 0) {
		const hoverInteractionArb = fc.constantFrom(...hoverInteractions).map(
			// mapper: type 추가
			(interaction) => ({
				...interaction,
				type: 'hover',
			}),
			// unmapper: type 제거
			unmapActionInteraction('hover'),
		)
		arbitraries.push(hoverInteractionArb)
	}
	// 드래그 인터랙션 처리 - unmapper 추가
	if (dragInteractions.length > 0) {
		const dragInteractionArb = fc.constantFrom(...dragInteractions).map(
			// mapper: type 추가
			(interaction) => ({
				...interaction,
				type: 'drag',
			}),
			// unmapper: type 제거
			unmapActionInteraction('drag'),
		)
		arbitraries.push(dragInteractionArb)
	}
	// 드래그 앤 드롭 인터랙션 처리 - unmapDragDrop 적용
	if (dragDropInteractions.length > 0) {
		const dragDropInteractionArb = fc.constantFrom(...dragDropInteractions).map(
			// mapper: type 추가
			(interaction) => ({
				...interaction,
				type: 'dragDrop', // type을 'dragDrop'으로 명시
			}),
			// unmapper: type 제거
			unmapDragDrop,
		)
		arbitraries.push(dragDropInteractionArb)
	}
	// 더블클릭 인터랙션 처리 - unmapper 추가
	if (doubleClickInteractions.length > 0) {
		const doubleClickInteractionArb = fc.constantFrom(...doubleClickInteractions).map(
			// mapper: type 추가
			(interaction) => ({
				...interaction,
				type: 'doubleClick',
			}),
			// unmapper: type 제거
			unmapActionInteraction('doubleClick'),
		)
		arbitraries.push(doubleClickInteractionArb)
	}
	// 필 인터랙션 처리 - mapper 수정 (index 포함) 및 unmapper 추가
	if (fillInteractions.length > 0) {
		for (let i = 0; i < fillInteractions.length; i++) {
			const originalInteraction = fillInteractions[i]
			const valueType = originalInteraction.valueType || 'text'
			const valueArb = _getValueArbitraryForType(valueType)
			const fillInteractionArb = fc.tuple(fc.constant(i), valueArb).map(
				// mapper: 최종 객체에 originalIndex 포함
				([index, value]) => ({
					...fillInteractions[index],
					type: 'fill',
					value,
					originalIndex: index, // 원본 index 저장
				}),
				// unmapper: 튜플 [index, value] 복원
				unmapValueInteraction('fill'),
			)
			arbitraries.push(fillInteractionArb)
		}
	}
	// 셀렉트 인터랙션 처리 - mapper 수정 (index 포함) 및 unmapper 추가
	if (selectInteractions.length > 0) {
		for (let i = 0; i < selectInteractions.length; i++) {
			const originalInteraction = selectInteractions[i]
			const options = originalInteraction.options || []
			if (options.length === 0) continue
			const valueArb = _getValueArbitraryForType('select', { options })
			const selectInteractionArb = fc.tuple(fc.constant(i), valueArb).map(
				// mapper: 최종 객체에 originalIndex 포함
				([index, value]) => ({
					...selectInteractions[index],
					type: 'select',
					value,
					originalIndex: index, // 원본 index 저장
				}),
				// unmapper: 튜플 [index, value] 복원
				unmapValueInteraction('select'),
			)
			arbitraries.push(selectInteractionArb)
		}
	}
	// 범위 인터랙션 처리 - mapper 수정 (index 포함) 및 unmapper 추가
	if (rangeInteractions.length > 0) {
		for (let i = 0; i < rangeInteractions.length; i++) {
			const originalInteraction = rangeInteractions[i]
			const min = originalInteraction.min ?? 0 // Use ?? for default value
			const max = originalInteraction.max ?? 100 // Use ?? for default value
			const valueArb = _getValueArbitraryForType('range', { min, max })
			const rangeInteractionArb = fc.tuple(fc.constant(i), valueArb).map(
				// mapper: 최종 객체에 originalIndex 포함
				([index, value]) => ({
					...rangeInteractions[index],
					type: 'setRange',
					value,
					originalIndex: index, // 원본 index 저장
				}),
				// unmapper: 튜플 [index, value] 복원
				unmapValueInteraction('setRange'),
			)
			arbitraries.push(rangeInteractionArb)
		}
	}
	// 스크롤 인터랙션 처리 - mapper 수정 (index 포함) 및 unmapper 추가
	if (scrollInteractions.length > 0) {
		for (let i = 0; i < scrollInteractions.length; i++) {
			const originalInteraction = scrollInteractions[i]
			const { isScrollableX, isScrollableY } = originalInteraction // Destructure directly
			const valueArb = _getValueArbitraryForType('scroll', {
				isScrollableX,
				isScrollableY,
			})
			const scrollInteractionArb = fc.tuple(fc.constant(i), valueArb).map(
				// mapper: 최종 객체에 originalIndex 포함
				([index, value]) => ({
					...scrollInteractions[index],
					type: 'scroll',
					value,
					originalIndex: index, // 원본 index 저장
				}),
				// unmapper: 튜플 [index, value] 복원
				unmapValueInteraction('scroll'),
			)
			arbitraries.push(scrollInteractionArb)
		}
	}
	// 3단계: 최종 시퀀스 Arbitrary 생성
	if (arbitraries.length === 0) {
		console.warn('No arbitraries generated for interactions. Returning empty sequence arbitrary.')
		return fc.constant([]) // arbitraries가 비어있으면 빈 시퀀스 반환
	}
	const interactionArb = fc.oneof(...arbitraries)
	// 배열 길이와 요소가 자동으로 축소되도록 함
	// 최소 길이를 1로 설정하여 개별 상호작용까지 축소 가능하도록 함
	return fc.array(interactionArb, {
		minLength: 1, // 여기를 0에서 1로 변경 - 최소 길이는 1이어야 함
		maxLength: interactions.length + length, // 이 값 수정하지마라
	})
}
/**
 * 컴포넌트 상태 검증 컴포넌트가 화면에 표시되는지 확인하고 기본 정보를 수집합니다.
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {string} componentSelector - 컴포넌트의 최상위 셀렉터
 * @returns {Promise<{ isVisible: boolean; summary: string }>} 컴포넌트 상태 검증 결과
 */
async function verifyComponentState(page, componentSelector, timeout = 5000) {
	const locator = page.locator(componentSelector)
	let isVisible = false
	let summary = `컴포넌트(${componentSelector})가 지정된 시간(${timeout}ms) 내에 표시되지 않음`
	try {
		// 지정된 시간 동안 컴포넌트가 화면에 나타날 때까지 기다립니다.
		await locator.waitFor({ state: 'visible', timeout })
		isVisible = true // waitFor가 성공하면 컴포넌트가 보이는 것입니다.
	} catch (error) {
		// waitFor가 타임아웃되면 에러가 발생합니다. isVisible은 false로 유지됩니다.
		console.warn(`waitFor 중 오류 발생 또는 타임아웃 (${componentSelector}): ${error.message}`)
		// 요약 메시지는 이미 초기값으로 설정되어 있습니다.
	}
	// 컴포넌트가 보이는 경우에만 추가 정보 수집 시도
	if (isVisible) {
		try {
			// 로케이터를 사용하여 정보 수집
			const childCount = await locator.locator('> *').count() // 직계 자식 요소 수
			const classes = (await locator.getAttribute('class')) || 'none'
			const id = (await locator.getAttribute('id')) || 'none'
			summary = `컴포넌트 정보 - 자식 요소: ${childCount}개, 클래스: ${classes}, ID: ${id}`
		} catch (error) {
			// 정보 수집 중 오류 발생 시 (예: 요소가 갑자기 사라짐)
			console.warn(`상태 확인 중 오류 (${componentSelector}): ${error.message}`)
			summary = '컴포넌트 정보 수집 중 오류 발생'
			// isVisible은 true였지만, 정보 수집 중 문제가 발생했으므로 상태를 다시 확인하거나 false로 설정할 수 있습니다.
			// 여기서는 일단 isVisible=true 로 유지하고 요약 메시지만 변경합니다.
		}
	}
	return { isVisible, summary }
}
/**
 * 디버그 정보를 파일로 저장 - 강화된 예외 처리
 *
 * @param {string} dir - 저장할 디렉토리
 * @param {string} filename - 파일 이름
 * @param {object} data - 저장할 데이터
 * @returns {Promise<{ success: boolean; path?: string; error?: Error }>} 저장 결과
 */
async function saveDebugInfo(dir, filename, data) {
	try {
		// 디렉토리가 없으면 생성
		await fs.mkdir(dir, { recursive: true })
		const filePath = path.join(dir, filename)
		// JSON 형식으로 데이터 저장
		await fs.writeFile(filePath, JSON.stringify(data, undefined, 2), 'utf8')
		return { success: true, path: filePath }
	} catch (error) {
		console.error(`디버그 정보 저장 실패: ${error.message}`)
		// 실패해도 테스트 진행에 영향을 주지 않도록 에러 객체와 함께 실패 정보만 반환
		return { success: false, error }
	}
}
/**
 * 현재 시간을 파일명으로 사용하기 좋은 형식으로 반환 파일 이름에 사용할 수 없는 문자를 제거한 타임스탬프를 생성합니다.
 *
 * @returns {string} 포맷된 시간 문자열 (예: '2023-04-25T14-30-22')
 */
function getTimestamp() {
	// ISO 형식의 시간에서 파일명에 사용할 수 없는 콜론(:)을 대시(-)로 변경
	return new Date().toISOString().replaceAll(':', '-').replace(/\..+/, '')
}
/**
 * 컴포넌트 이름 추출 (URL에서) Storybook URL에서 컴포넌트 이름을 추출합니다.
 *
 * @param {string} url - 페이지 URL
 * @returns {string} 컴포넌트 이름
 */
function extractComponentName(url) {
	try {
		// URL 파싱
		const urlObj = new URL(url, 'http://localhost')
		// id 쿼리 파라미터 추출 (새로운 URL 형식에서는 id 파라미터에 컴포넌트 이름이 있음)
		const id = urlObj.searchParams.get('id') || ''
		if (!id) return 'unknown-component'
		return id.replaceAll('--', '@')
	} catch {
		return 'unknown-component'
	}
}
function pushAndConsoleError(logArray, message) {
	logArray.push(message)
	console.error(message)
}
function logShrunkSequence(checkResult) {
	const logArray = []
	const logPush = R.curry(pushAndConsoleError)(logArray)
	const counterExample = checkResult.counterexample
	// 이제 직접 배열로 받아옴 (객체의 sequence 속성이 아님)
	const shrunkSequence = counterExample[0]
	console.log('checkResult:', checkResult)
	logPush('----------- 축소된 실패 케이스  -----------')
	// 핵심 인터랙션 식별
	if (shrunkSequence.length === 1) {
		const interactionValue = shrunkSequence[0].value ? `: ${shrunkSequence[0].value}` : ''
		const interactionString = `${shrunkSequence[0].type}${interactionValue}`
		logPush(`- <${interactionString}> on (${shrunkSequence[0].selector})`)
	} else {
		for (const [i, interaction] of shrunkSequence.entries()) {
			const interactionValue = interaction.value ? `: ${interaction.value}` : ''
			const interactionString = `${interaction.type}${interactionValue}`
			logPush(`${i + 1}. <${interactionString}> on (${interaction.selector})`)
		}
	}
	return logArray
}
/**
 * 축소된 반례를 사용하여 단계별 디버깅 수행
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {Interaction[]} shrunkSequence - 축소된 인터랙션 시퀀스
 * @param {string} componentSelector - 컴포넌트 셀렉터
 * @param {number} waitTime - 대기 시간
 */
async function debugWithShrunkExample(page, shrunkSequence, componentSelector, waitTime) {
	const logArray = []
	const logPush = R.curry(pushAndConsoleError)(logArray)
	logPush('----------- 축소된 실패 케이스 디버깅 시작 -----------')
	// 페이지가 닫혔는지 확인
	if (await isPageClosed(page)) {
		logPush('디버깅을 시작하려 했으나 페이지가 이미 닫혀 있습니다.')
		logPush('----------- 축소된 반례 디버깅 완료 (페이지 닫힘) -----------')
		return logArray
	}
	// 컴포넌트 상태 초기화
	try {
		await resetComponentState(page)
	} catch (error) {
		logPush(`컴포넌트 상태 초기화 중 오류 발생: ${error.message}`)
		// 초기화 실패해도 계속 진행
	}
	// 페이지 에러와 콘솔 에러를 감지하기 위한 변수들
	let pageErrors = []
	let consoleErrors = []
	// 단계 추적용 객체
	/** @type {StepTracker} */
	const stepTracker = {
		currentStep: undefined,
		currentInteraction: undefined,
	}
	// 페이지 에러 이벤트 리스너 등록 - 각 인터랙션과 에러 연결 강화
	const pageErrorHandler = (error) => {
		// @ts-ignore - 타입 호환성 오류 무시 (개선 필요)
		const errorInfo = {
			message: error.message,
			stack: error.stack,
			timestamp: new Date().toISOString(),
			currentStep: stepTracker.currentStep,
			currentInteraction: stepTracker.currentInteraction,
		}
		pageErrors.push(errorInfo)
		logPush(`페이지 에러 감지: ${error.message}`)
		if (stepTracker.currentStep !== undefined) {
			console.error(`관련 인터랙션 단계: ${stepTracker.currentStep}`)
		}
	}
	// 콘솔 에러 이벤트 리스너 등록
	const consoleErrorHandler = (msg) => {
		if (msg.type() === 'error') {
			// @ts-ignore - 타입 호환성 오류 무시 (개선 필요)
			const errorInfo = {
				message: msg.text(),
				timestamp: new Date().toISOString(),
				currentStep: stepTracker.currentStep,
				currentInteraction: stepTracker.currentInteraction,
			}
			consoleErrors.push(errorInfo)
			logPush(`콘솔 에러 감지: ${msg.text()}`)
			if (stepTracker.currentStep !== undefined) {
				console.error(`관련 인터랙션 단계: ${stepTracker.currentStep}`)
			}
		}
	}
	// 이벤트 리스너 등록
	try {
		page.on('pageerror', pageErrorHandler)
		page.on('console', consoleErrorHandler)
	} catch (error) {
		logPush(`이벤트 리스너 등록 중 오류 발생: ${error.message}`)
		// 등록 실패해도 계속 진행
	}
	try {
		// 각 인터랙션 단계별 실행 및 상태 확인
		for (let i = 0; i < shrunkSequence.length; i++) {
			// 페이지가 닫혔는지 매 반복마다 확인
			if (await isPageClosed(page)) {
				logPush(`${i + 1} 단계 실행 전 페이지가 닫혀 있습니다. 디버깅을 중단합니다.`)
				break
			}
			// 현재 단계 정보 설정
			stepTracker.currentStep = i + 1
			stepTracker.currentInteraction = shrunkSequence[i]
			const interactionValue = shrunkSequence[i].value ? `: ${shrunkSequence[i].value}` : ''
			const interactionString = `${shrunkSequence[i].type}${interactionValue}`
			logPush(
				`${i + 1}/${shrunkSequence.length}: <${interactionString}> on (${shrunkSequence[i].selector})`,
			)
			// 이전 에러들 초기화
			pageErrors = []
			consoleErrors = []
			try {
				// 인터랙션 실행
				const result = await executeInteraction(page, shrunkSequence[i], waitTime, true)
				logPush(`[ ${i + 1} 단계 인터랙션 실행: <${result.message}> ]`)
				// 페이지가 닫혔는지 다시 확인
				if (await isPageClosed(page)) {
					logPush(`${i + 1} 단계 실행 후 페이지가 닫혔습니다. 디버깅을 중단합니다.`)
					break
				}
				// 인터랙션 후 페이지 에러 확인 - shrinking을 위한 중요 지점
				if (consoleErrors.length > 0 || pageErrors.length > 0) {
					// 에러가 감지되었음을 보고
					logPush(`< ${i + 1} 단계 실행 후 에러 발생: <${result.message}> >`)
					break
				}
				// 컴포넌트 상태 확인
				try {
					const stateCheck = await verifyComponentState(page, componentSelector)
					logPush(`상태: ${stateCheck.isVisible ? 'visible' : 'invisible'} - ${stateCheck.summary}`)
				} catch (stateError) {
					logPush(`상태 확인 중 오류 발생: ${stateError.message}`)
					// 상태 확인 실패해도 계속 진행
				}
			} catch (error) {
				// 인터랙션 실행 중 발생한 에러를 로깅하고 계속 진행
				logPush(`< ${i + 1} 단계 실행 중 에러 발생: ${error.message} >`)
				logPush(`에러 스택: ${error.stack?.split('\n')[0] || 'N/A'}`)
				// 페이지가 닫혔는지 확인
				if (await isPageClosed(page)) {
					logPush(`에러 발생 후 페이지가 닫혔습니다. 디버깅을 중단합니다.`)
					break
				}
				break
			}
		}
	} catch (error) {
		// 예상치 못한 에러가 발생해도 로깅만 하고 정상 종료
		logPush(`디버깅 중 예상치 못한 에러 발생: ${error.message}`)
		logPush(`에러 스택: ${error.stack || 'N/A'}`)
	} finally {
		// 단계 추적 정보 초기화
		stepTracker.currentStep = undefined
		stepTracker.currentInteraction = undefined
		// 페이지가 열려있을 때만 이벤트 리스너 제거 시도
		if (await isPageClosed(page)) {
			console.error('페이지가 닫혀 있어 이벤트 리스너를 제거하지 않습니다.')
		} else {
			try {
				page.removeListener('pageerror', pageErrorHandler)
				page.removeListener('console', consoleErrorHandler)
				console.error('이벤트 리스너가 성공적으로 제거되었습니다.')
			} catch (error) {
				logPush(`이벤트 리스너 제거 중 오류 발생: ${error.message}`)
			}
		}
	}
	return logArray
}
/**
 * 페이지가 닫혔는지 확인하는 헬퍼 함수 추가
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @returns {Promise<boolean>} 페이지가 닫혔는지 여부
 */
async function isPageClosed(page) {
	try {
		// 페이지가 닫혔는지 간단한 연산으로 확인 (evaluate 사용 불가피)
		// 페이지가 닫혔다면 예외가 발생함
		await page.evaluate('1 + 1')
		return false // 예외가 발생하지 않으면 페이지가 열려 있음
	} catch (error) {
		// Playwright 최신 버전에서는 에러 메시지가 다를 수 있음
		return (
			error.message.includes('Target page, context or browser has been closed') ||
			error.message.includes('Target closed') || // 이전 버전 호환성
			error.message.includes('Protocol error') // 일반적인 연결 오류
		)
	}
}
/**
 * 단일 반복 테스트를 실행하는 헬퍼 함수
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {number} iteration - 현재 반복 횟수 인덱스
 * @param {object} config - 테스트 설정
 * @returns {Promise<iterationInfo>} 반복 실행 결과
 */
async function runSingleIteration(page, iteration, errors, config) {
	const {
		sequenceLength = 5,
		numRuns = 10,
		componentSelector = '#storybook-root',
		waitAfterInteraction = 100,
		verbose = false,
	} = config
	if (config.verbose) {
		console.log(`\n[${iteration + 1}/${config.iterationCount}] 인터랙션 시퀀스 반복 시작`)
	}
	/** @type {IterationInfo} */
	const iterationInfo = {
		iterationNumber: iteration + 1,
		sequences: [],
		errors,
		startTime: new Date().toISOString(),
		success: false, // 초기값은 false로 설정
		failureInfo: undefined,
	}
	// 페이지가 닫혔는지 확인
	if (await isPageClosed(page)) {
		console.error('페이지가 이미 닫혀 있습니다. 이번 반복은 중단합니다.')
		iterationInfo.success = false
		iterationInfo.errors = [
			...errors,
			{ message: '페이지가 이미 닫혀 있음', stack: new Error('페이지가 이미 닫혀 있음').stack },
		]
		return iterationInfo
	}
	// 인터랙티브 요소 탐색하여 가능한 인터랙션 목록 가져오기
	let interactions = []
	try {
		interactions = await discoverInteractions(page, componentSelector, verbose)
		if (config.verbose) {
			console.log(`발견된 인터랙션 수: ${interactions.length}`)
		}
	} catch (error) {
		console.error(`인터랙션 탐색 중 오류 발생: ${error.message}`)
		if (await isPageClosed(page)) {
			console.error('페이지가 닫혀 있습니다. 이번 반복은 중단합니다.')
			iterationInfo.success = false
			iterationInfo.errors = [
				...errors,
				{ message: `페이지가 닫힘: ${error.message}`, stack: error.stack },
			]
			return iterationInfo
		}
	}
	// 인터랙티브 요소가 없으면 기본 렌더링 상태만 확인하고 계속 진행
	if (interactions.length === 0) {
		if (config.verbose) {
			console.log('인터랙티브 요소 발견되지 않음. 기본 렌더링 상태 확인.')
		}
		try {
			const stateCheck = await verifyComponentState(page, componentSelector)
			iterationInfo.stateSummary = stateCheck.summary
			iterationInfo.noInteractions = true
			iterationInfo.success = stateCheck.isVisible // 컴포넌트가 보이면 성공으로 간주
		} catch (error) {
			console.error(`상태 확인 중 오류 발생: ${error.message}`)
			iterationInfo.success = false
			iterationInfo.errors = [...errors, { message: error.message, stack: error.stack }]
		}
		return iterationInfo
	}
	// 인터랙션 시퀀스 생성을 위한 arbitrary 생성
	const sequenceArb = createInteractionSequenceArbitrary(interactions, sequenceLength)
	let checkResult
	// 페이지 에러 발생 시에도 테스트를 계속 진행하기 위한 pageError 핸들러 설정
	const pageErrors = []
	const pageErrorHandler = (error) => {
		pageErrors.push({
			message: error.message,
			stack: error.stack,
			timestamp: new Date().toISOString(),
		})
		// 로그만 남기고 테스트는 계속 진행
		console.error(`페이지 에러 감지 (테스트 계속 진행): ${error.message}`)
	}
	// 페이지 에러 핸들러 등록
	page.on('pageerror', pageErrorHandler)
	try {
		// fast-check 실행
		checkResult = await fc.check(
			fc.asyncProperty(sequenceArb, async (sequence) => {
				// 페이지가 닫혔는지 확인
				if (await isPageClosed(page)) {
					console.error('페이지가 닫혀 있습니다. 시퀀스 실행을 중단합니다.')
					throw new Error('페이지가 닫혀 있어 시퀀스를 실행할 수 없습니다.')
				}
				// !!! 각 시퀀스 실행 전에 상태 초기화 !!!
				try {
					await resetComponentState(page) // <--- 이동된 위치
				} catch (error) {
					console.error(`[시퀀스 실행 전] 컴포넌트 상태 초기화 중 오류: ${error.message}`)
					// 초기화 실패 시 테스트를 중단하거나 계속 진행할지 결정 필요
					throw new Error(`컴포넌트 상태 초기화 실패: ${error.message}`)
				}
				// 시퀀스 정보 초기화 - 명시적 타입 지정
				/** @type {SequenceInfo} */
				const sequenceInfo = {
					results: [],
					errors: [],
					startTime: new Date().toISOString(),
				}
				// 현재 시퀀스 실행 중 발생한 페이지 에러를 추적하기 위한 변수
				let sequencePageErrors = []
				// 시퀀스 실행 중 페이지 에러를 감지하기 위한 이벤트 핸들러
				const sequenceErrorHandler = (error) => {
					sequencePageErrors.push({
						message: error.message,
						stack: error.stack,
						timestamp: new Date().toISOString(),
					})
					console.error(`시퀀스 실행 중 페이지 에러 감지: ${error.message}`)
				}
				// 시퀀스별 에러 핸들러 등록
				page.on('pageerror', sequenceErrorHandler)
				if (config.verbose) {
					console.log(`시퀀스 실행 (${sequence.length}개 인터랙션)`)
				}
				let returnValue = true
				try {
					// 시퀀스의 각 인터랙션 차례로 실행 (for-of 대신 인덱스 기반 루프 사용)
					for (const [i, interaction] of sequence.entries()) {
						// 각 인터랙션마다 페이지가 닫혔는지 확인
						if (await isPageClosed(page)) {
							console.error(`인터랙션 #${i} (${interaction.type}) 실행 전 페이지가 닫혀 있습니다.`)
							throw new Error(
								`인터랙션 #${i} (${interaction.type}) 실행 전 페이지가 닫혀 있습니다.`,
							)
						}
						const result = await executeInteraction(
							page,
							interaction,
							waitAfterInteraction,
							verbose,
						)
						// @ts-ignore - 타입 호환성 오류 무시
						sequenceInfo.results.push(result)
						// 인터랙션이 실패했을 경우 처리 - 인덱스 정보 추가
						if (!result.success) {
							if (result.errorMessage) {
								errors.push({
									message: result.errorMessage,
									stack: result.errorStack,
									interactionIndex: i, // 인덱스 정보 추가
								})
								// @ts-ignore - 타입 호환성 오류 무시
								sequenceInfo.errors.push({
									message: result.errorMessage,
									stack: result.errorStack,
									interactionIndex: i, // 인덱스 정보 추가
								})
							}
							// 인덱스가 포함된 에러 메시지로 변경
							throw new Error(
								`인터랙션 #${i} (${interaction.type} on (${interaction.selector})) 실행 실패: ${result.errorMessage || '알 수 없는 오류'}`,
							)
						}
						// 인터랙션 후 페이지 에러 확인 - shrinking을 위한 중요 지점
						if (sequencePageErrors.length > 0) {
							// 인터랙션 실행 중 페이지 에러가 발생한 경우 시퀀스를 실패로 표시
							// @ts-ignore - 타입 호환성 오류 무시
							sequenceInfo.errors.push(
								...sequencePageErrors.map((err) => ({
									message: `인터랙션 #${i} 실행 중 페이지 에러: ${err.message}`,
									stack: err.stack,
									interactionIndex: i, // 인덱스 정보 추가
								})),
							)
							// 인덱스가 포함된 에러 메시지로 변경
							throw new Error(
								`인터랙션 #${i} (${interaction.type} on (${interaction.selector})) 실행 중 페이지 에러 발생: ${sequencePageErrors[0].message}`,
							)
						}
					}
					// 페이지가 닫혔는지 확인 후 상태 검증
					if (await isPageClosed(page)) {
						console.error('상태 검증 전 페이지가 닫혀 있습니다.')
						throw new Error('상태 검증 전 페이지가 닫혀 있습니다.')
					}
					// 시퀀스 실행 후 컴포넌트 상태 검증
					const stateCheck = await verifyComponentState(page, componentSelector)
					sequenceInfo.finalState = stateCheck.summary
					sequenceInfo.endTime = new Date().toISOString()
					iterationInfo.sequences.push(sequenceInfo)
				} catch (error) {
					// 예상치 못한 에러 발생 시 처리
					errors.push({
						message: error.message,
						stack: error.stack,
					})
					sequenceInfo.endTime = new Date().toISOString()
					iterationInfo.sequences.push(sequenceInfo)
					// 에러 발생해도 fc.check는 계속 진행
					throw error
				} finally {
					// 시퀀스별 에러 핸들러 제거
					page.removeListener('pageerror', sequenceErrorHandler)
					// 시퀀스 정보에 발생한 에러 추가
					if (sequencePageErrors.length > 0) {
						// @ts-ignore - 타입 호환성 오류 무시
						sequenceInfo.errors.push(
							...sequencePageErrors.map((err) => ({
								message: `페이지 에러: ${err.message}`,
								stack: err.stack,
							})),
						)
					}
				}
				return returnValue
			}),
			{
				numRuns,
				verbose: 2,
				// 즉시 실패 시 shrinking을 시작하여 불필요한 인터랙션 제거 진행
				endOnFailure: false,
				// 더 적극적인 shrinking 수행을 위해 설정 조정
				maxSkipsPerRun: 1000,
			},
		)
		// 테스트 결과에 따라 success 설정
		iterationInfo.success = !checkResult?.failed
		if (checkResult?.failed) {
			// 테스트 실패 - 축소된 반례 활용
			// fast-check의 반례가 있는지 확인
			if (checkResult.counterexample && checkResult.counterexample.length > 0) {
				console.log('💬 runSingleIteration checkResult:', checkResult)
				console.log('💬 runSingleIteration counterexample:', checkResult.counterexample)
				// shrinking 후 발견된 최소 반례
				const shrunkValue = /** @type {Interaction[]} */ (checkResult?.counterexample[0])
				// 반례 분석 (타입 확인하여 호출)
				const logArray1 = logShrunkSequence(checkResult)
				// failureInfo 타입을 맞춰서 설정
				iterationInfo.failureInfo = {
					counterExample: shrunkValue,
					error: {
						message: 'Property failed',
						stack: checkResult.failed ? 'Fast-check 속성 검증 실패' : '',
					},
					property: 'Component interaction sequence',
				}
				// 페이지가 닫혔는지 확인 후 디버깅 수행
				const isPageAlreadyClosed = await isPageClosed(page)
				if (isPageAlreadyClosed) {
					console.error('축소된 반례 디버깅을 시작하려 했으나 페이지가 이미 닫혀 있습니다.')
				} else {
					// 페이지가 열려있을 때만 디버깅 수행
					let logArray2 = []
					try {
						logArray2 = await debugWithShrunkExample(
							page,
							shrunkValue,
							componentSelector,
							waitAfterInteraction,
						)
					} catch (debugError) {
						console.error(`축소된 반례 디버깅 중 오류 발생: ${debugError.message}`)
					}
					test.info().attach('시퀀스 디버깅 로그', {
						body: `${logArray1.join('\n')}\n${logArray2.join('\n')}`,
					})
				}
			} else {
				console.error('반례를 찾을 수 없습니다')
			}
		}
	} catch (fcError) {
		// fast-check 자체 에러 발생 시
		console.error('--------------------------------')
		console.error('Fast-check 테스트 실패:', fcError)
		if (fcError.counterexample) {
			const counterExample = fcError.counterexample
			console.error(`반례 발견: ${JSON.stringify(counterExample, undefined, 2)}`)
			// 반례가 있으면 분석해보기
			if (Array.isArray(counterExample) && counterExample.length > 0) {
				console.log('counterExample', counterExample)
				const shrunkValue = /** @type {Interaction[]} */ (counterExample[0])
				if (Array.isArray(shrunkValue)) {
					logShrunkSequence(counterExample)
					iterationInfo.failureInfo = {
						counterExample: shrunkValue,
						error: { message: fcError.message, stack: fcError.stack },
						property: fcError.property?.toString(),
					}
					// 페이지가 닫히지 않았을 때만 디버깅 시도
					const isPageAlreadyClosed = await isPageClosed(page)
					if (isPageAlreadyClosed) {
						console.error('축소된 반례 디버깅을 시작하려 했으나 페이지가 이미 닫혀 있습니다.')
					} else {
						try {
							await debugWithShrunkExample(
								page,
								shrunkValue,
								componentSelector,
								waitAfterInteraction,
							)
						} catch (debugError) {
							console.error(`축소된 반례 디버깅 중 오류 발생: ${debugError.message}`)
						}
					}
				}
			}
		}
		for (const error of errors) {
			console.error('- Error:', error)
		}
		console.error('--------------------------------')
		iterationInfo.success = false
	} finally {
		// 페이지 에러 핸들러 제거
		page.removeListener('pageerror', pageErrorHandler)
		// 수집된 페이지 에러를 errors 배열에 추가
		errors.push(
			...pageErrors.map((err) => ({
				message: `페이지 에러: ${err.message}`,
				stack: err.stack,
				timestamp: err.timestamp,
			})),
		)
	}
	return iterationInfo
}
/**
 * UI 컴포넌트에 대한 범용 property-based 테스트 실행 (고급 디버깅 개선 버전) 이 함수는 전체 테스트 프로세스를 실행하는 메인 함수입니다.
 *
 * @param {import('@playwright/test').Page} page - Playwright 페이지 객체
 * @param {TestConfig} config - 테스트 설정
 * @returns {Promise<Object>} 테스트 결과 객체
 */
async function testUIComponent(page, config = {}) {
	// 기본 설정값과 사용자 정의 설정 병합
	const {
		iterationCount = 3, // 테스트 반복 횟수
		debugLogDir = './test-results/debug-logs', // 디버그 로그 저장 경로
	} = config
	const componentName = extractComponentName(page.url())
	// 디버그 정보 초기화
	/** @type {DebugInfo} */
	const debugInfo = {
		timestamp: getTimestamp(),
		componentName,
		url: page.url(),
		testConfig: config,
		iterations: [],
		errors: [],
		success: true,
	}
	let errors = []
	let isSuccessful = false
	// 페이지 오류 및 콘솔 오류 핸들러 설정 - 인터랙션과 에러 연결
	const errorHandler = (exception) => {
		const associatedInteractionMessage = `관련 인터랙션: ${currentInteraction.type} on (${currentInteraction.selector})`
		const errorInfo = {
			message: `페이지 에러: ${exception.message}`,
			stack: exception.stack,
			associatedInteraction: currentInteraction ? { ...currentInteraction } : undefined,
			associatedInteractionMessage,
			timestamp: new Date().toISOString(),
		}
		errors.push(errorInfo)
		// 인터랙션 정보가 있을 경우 로그에 표시
		if (currentInteraction) {
			console.error(`페이지 에러 발생: ${exception.message}`)
			console.error(associatedInteractionMessage)
		}
	}
	const consoleErrorHandler = (msg) => {
		if (msg.type() === 'error') {
			const errorInfo = {
				message: `콘솔 에러: ${msg.text()}`,
				associatedInteraction: currentInteraction ? { ...currentInteraction } : undefined,
				timestamp: new Date().toISOString(),
			}
			errors.push(errorInfo)
			// 인터랙션 정보가 있을 경우 로그에 표시
			if (currentInteraction) {
				console.error(`콘솔 에러 발생: ${msg.text()}`)
				console.error(
					`관련 인터랙션: ${currentInteraction.type} on (${currentInteraction.selector})`,
				)
			}
		}
	}
	page.on('pageerror', errorHandler)
	page.on('console', consoleErrorHandler)
	try {
		// 설정된 반복 횟수만큼 테스트 실행
		for (let iteration = 0; iteration < iterationCount; iteration++) {
			const iterationInfo = await runSingleIteration(page, iteration, errors, config)
			debugInfo.iterations.push(iterationInfo)
			isSuccessful = debugInfo.success
			if (errors.length > 0) {
				console.warn(`${componentName} - 반복#${iteration + 1}: 에러 발생`)
				console.warn(`발생한 에러: ${errors.map((e) => e.message).join(' / ')}`)
				// 테스트 실패 상태 기록
				isSuccessful = false
				debugInfo.success = false
				break
			}
		}
	} catch (error) {
		// 예기치 않은 오류 처리
		console.error('테스트 진행 중 오류 발생:', error)
		isSuccessful = false
		debugInfo.success = isSuccessful
		debugInfo.errors.push({
			message: error.message,
			stack: error.stack,
		})
	} finally {
		// 이벤트 리스너 제거
		page.removeListener('pageerror', errorHandler)
		page.removeListener('console', consoleErrorHandler)
	}
	// 디버그 정보 최종 업데이트 및 저장
	debugInfo.success = isSuccessful
	debugInfo.errors = debugInfo.errors.concat(errors)
	if (!isSuccessful) {
		// 디버그 정보 파일 저장
		const debugFilename = `test-${debugInfo.componentName}-${debugInfo.timestamp}.json`
		const saveResult = await saveDebugInfo(debugLogDir, debugFilename, debugInfo)
		if (saveResult.success) {
			// eslint-disable-next-line require-atomic-updates
			debugInfo.debugFilePath = saveResult.path
			if (config.verbose) {
				console.log(`테스트 디버그 정보 저장: ${debugFilename}`)
			}
		}
		const latestTestFailureInfo = debugInfo.iterations.at(-1)?.failureInfo
		console.log('디버그용', {
			isSuccessful,
			latestTestFailureInfo,
			counterExample: latestTestFailureInfo?.counterExample,
			debugInfo,
		})
		// 이 시점에서 모든 디버깅 정보 수집과 로깅이 완료됨
		// 최종적으로 테스트 실패 처리
		// eslint-disable-next-line playwright/missing-playwright-await
		test.step(`${componentName}: 테스트 결과 확인`, async () => {
			expect(
				false,
				`테스트 실패: 에러 발생 - ${debugInfo.errors.map((e) => e.message).join(' / ')}`,
			).toBeTruthy()
		})
	}
	// 테스트 결과 반환
	return debugInfo
}
// 외부에서 사용할 함수들 내보내기
// 이 라이브러리의 핵심 기능들을 다른 모듈에서 가져다 쓸 수 있도록 내보냅니다.
export {
	discoverInteractions, // 인터랙티브 요소 탐색 및 인터랙션 수집
	executeInteraction, // 인터랙션 실행
	resetComponentState, // 컴포넌트 상태 초기화
	testUIComponent, // 메인 테스트 함수 (전체 테스트 프로세스 실행)
	verifyComponentState, // 컴포넌트 상태 검증
}
</file>

<file path="storybook/index.html">
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<link rel="icon" type="image/svg+xml" href="/vite.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Vite + Svelte</title>
	</head>
	<body>
		<div id="app"></div>
		<script type="module" src="/src/main.js"></script>
	</body>
</html>
</file>

<file path="storybook/package.json">
{
	"private": true,
	"name": "@tool/storybook",
	"version": "0.0.0",
	"type": "module",
	"scripts": {
		"build": "storybook build --output-dir storybook-static",
		"dev": "storybook dev -p 6006",
		"eslint-fix": "eslint --fix . || true",
		"format": "prettier . --write --ignore-unknown --ignore-path ../../.prettierignore",
		"playwright-install-env": "pnpm exec playwright install --with-deps",
		"playwright-report": "pnpm exec playwright show-report",
		"stylelint-fix": "stylelint --fix --allow-empty-input **/*.{css,svelte} --ignore-path ../../.stylelintignore || true",
		"test:e2e": "pnpm exec playwright test",
		"preview": "vite preview --outDir storybook-static"
	},
	"dependencies": {
		"nanoid": "^5.1.5"
	},
	"devDependencies": {
		"@chromatic-com/storybook": "^3.2.5",
		"@library/base": "workspace:*",
		"@library/helpers": "workspace:*",
		"@library/ui": "workspace:*",
		"@storybook/addon-essentials": "^8.6.11",
		"@storybook/addon-interactions": "^8.6.11",
		"@storybook/addon-links": "^8.6.11",
		"@storybook/addon-mdx-gfm": "^8.6.11",
		"@storybook/addon-svelte-csf": "5.0.0-next.28",
		"@storybook/blocks": "^8.6.11",
		"@storybook/core": "^8.6.11",
		"@storybook/svelte": "^8.6.11",
		"@storybook/svelte-vite": "^8.6.11",
		"@storybook/sveltekit": "^8.6.12",
		"@storybook/test": "^8.6.11",
		"@sveltejs/vite-plugin-svelte": "^5.0.3",
		"@tailwindcss/postcss": "4.0.15",
		"@tailwindcss/vite": "4.1.2",
		"autoprefixer": "^10.4.20",
		"daisyui": "5.0.9",
		"open-props": "^1.7.12",
		"postcss": "^8.5.3",
		"postcss-import": "^16.1.0",
		"storybook": "^8.6.4",
		"svelte": "^5.25.3",
		"svelte-preprocess": "^6.0.3",
		"tailwind-merge": "^3.1.0",
		"tailwind-variants": "^1.0.0",
		"tailwindcss": "4.0.17",
		"tailwindcss-animate": "^1.0.7",
		"vite": "^6.2.5",
		"vite-tsconfig-paths": "^5.1.4"
	}
}
</file>

<file path="storybook/playwright.config.js">
import defaultConfigObject from '@library/base/playwright.config.js'
import { defineConfig, devices } from '@playwright/test'
const portNumber = 6001
const config = {
	...defaultConfigObject,
	projects: [
		{
			name: 'chromium',
			use: { ...devices['Desktop Chrome'] },
		},
		/* against mobile viewports. */
		{
			name: 'Mobile Safari',
			use: { ...devices['iPhone 12'] },
		},
	],
	webServer: {
		command: `pnpm run preview --port ${portNumber}`,
		env: {
			NODE_ENV: 'production',
		},
		port: portNumber,
		timeout: 180_000,
	},
}
// @ts-ignore
export default defineConfig(config)
</file>

<file path="storybook/postcss.config.js">
export { default } from '@library/base/postcss.config.js'
</file>

<file path="storybook/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="storybook/src/app.css">
:root {
	font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
	font-weight: 400;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	line-height: 1.5;
	color: rgb(255 255 255 / 87%);
	text-rendering: optimizelegibility;
	color-scheme: light dark;
	background-color: rgb(36 36 36);
	font-synthesis: none;
}
a {
	font-weight: 500;
	color: rgb(100 108 255);
	text-decoration: inherit;
	&:hover {
		color: rgb(83 91 242);
	}
}
body {
	display: flex;
	place-items: center;
	min-inline-size: 320px;
	min-block-size: 100vb;
	margin: 0;
}
h1 {
	font-size: 3.2em;
	line-height: 1.1;
}
.card {
	padding: 2em;
}
#app {
	max-inline-size: 1280px;
	margin: 0 auto;
	padding: 2rem;
	text-align: center;
}
button {
	cursor: pointer;
	padding: 0.6em 1.2em;
	border: 1px solid transparent;
	border-radius: 8px;
	font-family: inherit;
	font-size: 1em;
	font-weight: 500;
	background-color: rgb(26 26 26);
	transition: border-color 0.25s;
	&:hover {
		border-color: rgb(100 108 255);
	}
	&:focus,
	&:focus-visible {
		outline: 4px auto -webkit-focus-ring-color;
	}
}
@media (prefers-color-scheme: light) {
	:root {
		color: rgb(33 53 71);
		background-color: rgb(255 255 255);
	}
	a:hover {
		color: rgb(116 123 255);
	}
	button {
		background-color: rgb(249 249 249);
	}
}
</file>

<file path="storybook/src/App.svelte">
<script>
import './app.css'
import viteLogo from '/vite.svg'
import svelteLogo from './assets/svelte.svg'
import Counter from './lib/Counter.svelte'
</script>
<main>
	<div>
		<a href="https://vitejs.dev" rel="noreferrer" target="_blank">
			<img class="logo" alt="Vite Logo" src={viteLogo} />
		</a>
		<a href="https://svelte.dev" rel="noreferrer" target="_blank">
			<img class="logo svelte" alt="Svelte Logo" src={svelteLogo} />
		</a>
	</div>
	<h1>Vite + Svelte</h1>
	<div class="card">
		<Counter />
	</div>
	<p>
		Check out <a href="https://github.com/sveltejs/kit#readme" rel="noreferrer" target="_blank"
			>SvelteKit</a
		>, the official Svelte app framework powered by Vite!
	</p>
	<p class="read-the-docs">Click on the Vite and Svelte logos to learn more</p>
</main>
<style>
.logo {
	will-change: filter;
	block-size: 6em;
	padding: 1.5em;
	transition: filter 300ms;
	&:hover {
		filter: drop-shadow(0 0 2em rgb(100 108 255 / 66.7%));
	}
	&.svelte:hover {
		filter: drop-shadow(0 0 2em rgb(255 62 0 / 66.7%));
	}
}
.read-the-docs {
	color: rgb(136 136 136);
}
</style>
</file>

<file path="storybook/src/assets/svelte.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="26.6" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 308"><path fill="#FF3E00" d="M239.682 40.707C211.113-.182 154.69-12.301 113.895 13.69L42.247 59.356a82.198 82.198 0 0 0-37.135 55.056a86.566 86.566 0 0 0 8.536 55.576a82.425 82.425 0 0 0-12.296 30.719a87.596 87.596 0 0 0 14.964 66.244c28.574 40.893 84.997 53.007 125.787 27.016l71.648-45.664a82.182 82.182 0 0 0 37.135-55.057a86.601 86.601 0 0 0-8.53-55.577a82.409 82.409 0 0 0 12.29-30.718a87.573 87.573 0 0 0-14.963-66.244"></path><path fill="#FFF" d="M106.889 270.841c-23.102 6.007-47.497-3.036-61.103-22.648a52.685 52.685 0 0 1-9.003-39.85a49.978 49.978 0 0 1 1.713-6.693l1.35-4.115l3.671 2.697a92.447 92.447 0 0 0 28.036 14.007l2.663.808l-.245 2.659a16.067 16.067 0 0 0 2.89 10.656a17.143 17.143 0 0 0 18.397 6.828a15.786 15.786 0 0 0 4.403-1.935l71.67-45.672a14.922 14.922 0 0 0 6.734-9.977a15.923 15.923 0 0 0-2.713-12.011a17.156 17.156 0 0 0-18.404-6.832a15.78 15.78 0 0 0-4.396 1.933l-27.35 17.434a52.298 52.298 0 0 1-14.553 6.391c-23.101 6.007-47.497-3.036-61.101-22.649a52.681 52.681 0 0 1-9.004-39.849a49.428 49.428 0 0 1 22.34-33.114l71.664-45.677a52.218 52.218 0 0 1 14.563-6.398c23.101-6.007 47.497 3.036 61.101 22.648a52.685 52.685 0 0 1 9.004 39.85a50.559 50.559 0 0 1-1.713 6.692l-1.35 4.116l-3.67-2.693a92.373 92.373 0 0 0-28.037-14.013l-2.664-.809l.246-2.658a16.099 16.099 0 0 0-2.89-10.656a17.143 17.143 0 0 0-18.398-6.828a15.786 15.786 0 0 0-4.402 1.935l-71.67 45.674a14.898 14.898 0 0 0-6.73 9.975a15.9 15.9 0 0 0 2.709 12.012a17.156 17.156 0 0 0 18.404 6.832a15.841 15.841 0 0 0 4.402-1.935l27.345-17.427a52.147 52.147 0 0 1 14.552-6.397c23.101-6.006 47.497 3.037 61.102 22.65a52.681 52.681 0 0 1 9.003 39.848a49.453 49.453 0 0 1-22.34 33.12l-71.664 45.673a52.218 52.218 0 0 1-14.563 6.398"></path></svg>
</file>

<file path="storybook/src/lib/Counter.svelte">
<script>
let count = $state(0)
const increment = () => {
	count += 1
}
</script>
<button onclick={increment}>
	count is {count}
</button>
</file>

<file path="storybook/src/main.js">
import './app.css'
import { mount } from 'svelte'
import App from './App.svelte'
const app = mount(App, {
	target: document.querySelector('#app'),
})
export default app
</file>

<file path="storybook/src/vite-env.d.ts">
/// <reference types="svelte" />
/// <reference types="vite/client" />
</file>

<file path="storybook/svelte.config.js">
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'
import { defineConfig } from 'vite'
import { sveltePreprocess } from 'svelte-preprocess'
export default defineConfig({
	// Consult https://svelte.dev/docs#compile-time-svelte-preprocess
	// for more information about preprocessors
	preprocess: vitePreprocess(),
})
</file>

<file path="storybook/tsconfig.json">
{
	"compilerOptions": {
		"checkJs": true,
		"esModuleInterop": true,
		"isolatedModules": true,
		"module": "ESNext",
		"moduleResolution": "bundler",
		"noImplicitAny": false,
		"paths": {
			"$shadcn/*": ["../libraries/ui/src/shadcn/*"],
			"$shadcn": ["../libraries/ui/src/shadcn"]
		},
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"target": "ESNext",
		"verbatimModuleSyntax": true
	},
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"node_modules/**",
		"src/service-worker/**",
		"svelte.config.js",
		"vite.config.js",
		"vite.config.ts",
		"static/**"
	],
	"extends": ["@library/base/tsconfig.json"],
	"include": [
		"**/*.d.ts",

		"tests/**/*",
		"src/**/*",
		".storybook/*.js",

		".storybook/*.ts",
		".svelte-kit/ambient.d.ts",

		".svelte-kit/types/**/$types.d.ts"
	]
}
</file>

<file path="storybook/vite.config.js">
import { svelte } from '@sveltejs/vite-plugin-svelte'
import tailwindcss from '@tailwindcss/vite'
import { defineConfig } from 'vite'
import tsconfigPaths from 'vite-tsconfig-paths'
// https://vitejs.dev/config/
export default defineConfig({
	css: {
		devSourcemap: true,
	},
	// Fix: storybook 업데이트 하면서 svelte() 이거 sveltekit으로 바꾸고, base/vite.config.js 에서 import 한 거 사용하게 만들기
	plugins: [svelte(), tsconfigPaths(), tailwindcss()],
})
</file>

<file path="tsconfig.json">
{
	"_comments": [
		"exclude와 include는 extends 되지 않아서 따로 써줘야 함",
		"compilerOptions.paths 쓸 거면 packajs.json의 import 부분에도 작성하기"
	],
	"exclude": [
		".turbo/**",
		"**/.svelte-kit/**",
		"**/node_modules/**",
		"**/dist/**",
		"**/build/**",
		"**/.svelte/**",
		"**/.vercel_build_output/**",
		"**/.vercel/**",
		"**/coverage/**",
		"**/.history/**",
		"**/service-worker/**",
		"node_modules/**",
		"src/service-worker/**",
		"svelte.config.js",
		"vite.config.js",
		"vite.config.ts",
		"static/**"
	],
	"extends": ["./libraries/base/tsconfig.json"],
	"include": [
		"*.js",
		"*.ts",

		"*.svelte",

		"*.cjs",

		"*.mjs",

		"**/*.js",

		"**/*.ts",

		"**/*.svelte",

		"**/*.cjs",
		"**/*.mjs"
	]
}
</file>

<file path="turbo.json">
{
	"$schema": "https://turbo.build/schema.json",
	"globalDependencies": [],
	"globalEnv": ["NODE_ENV", "CF_PAGES_BRANCH"],
	"globalPassThroughEnv": [
		"CI",
		"WATCH",
		"SENTRY_AUTH_TOKEN",
		"GITHUB_ACTIONS",
		".env",
		"**/.env",
		"**/.env.*"
	],
	"tasks": {
		"build": {
			"dependsOn": ["^build"],
			"env": [],
			"outputs": ["dist/**", ".svelte-kit/**", "storybook-static/**"]
		},
		"check": {
			"dependsOn": ["transit"]
		},
		"dev": {
			"cache": false,
			"env": [],
			"persistent": true
		},
		"eslint": {},
		"eslint-fix": {},
		"format": {},
		"paraglide-compile": {
			"outputs": ["paraglide-output/**"]
		},
		"playwright-report": {},
		"stylelint": {},
		"stylelint-fix": {},
		"test:e2e": {
			"dependsOn": ["transit", "build"],
			"env": ["PLAYWRIGHT_BROWSERS_PATH"],
			"outputs": ["playwright-report/**", "test-results/**"],
			"passThroughEnv": ["PLAYWRIGHT_*", "CI"]
		},
		"test:unit": {
			"dependsOn": ["transit"],
			"outputs": ["vitest-report/**"]
		},
		"transit": {
			"dependsOn": ["^transit"]
		}
	}
}
</file>

<file path="wallaby.js">
/* eslint-disable import/no-anonymous-default-export */
/* eslint-disable unicorn/no-anonymous-default-export */
// @ts-nocheck
export default function (wallaby) {
	return {
		// ... 기존 설정 ...
		autoDetect: true, // 이 줄을 제거하거나 수정하세요.
		// ... 기존 설정 ...
	}
}
</file>

</files>
