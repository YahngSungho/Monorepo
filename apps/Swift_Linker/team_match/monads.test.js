// Generated by CodiumAI

import { describe, expect, it } from 'vitest'
import {
	AllMembers, Member, Team, Teams,
} from './monads.js'

describe('AllMembers', () => {
	// creating an empty AllMembers instance using the empty method
	it('빈 AllMembers 인스턴스를 생성해야 합니다. empty 메서드를 사용할 때', () => {
		const allMembers = AllMembers.empty()
		expect(allMembers.members).toEqual([])
	})

	// creating an AllMembers instance with a list of members using the of method
	it('멤버 목록으로 AllMembers 인스턴스를 생성해야 합니다. of 메서드를 사용할 때', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		const allMembers = AllMembers.of([member1, member2])
		expect(allMembers.members).toEqual([member1, member2])
	})

	// adding a single member to an AllMembers instance using the add method
	it('단일 멤버를 AllMembers 인스턴스에 추가해야 합니다. add 메서드를 사용할 때', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const allMembers = AllMembers.empty().add(member1)
		expect(allMembers.members).toContain(member1)
	})

	// adding multiple members to an AllMembers instance using the addMembers method
	it('여러 멤버를 AllMembers 인스턴스에 추가해야 합니다. addMembers 메서드를 사용할 때', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		const allMembers = AllMembers.empty().addMembers([member1, member2])
		expect(allMembers.members).toEqual([member1, member2])
	})

	// adding a member with an existing ID to an AllMembers instance
	it('기존 ID를 가진 멤버를 AllMembers 인스턴스에 추가해야 합니다.', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('1', { name: 'Bob' })
		const allMembers = AllMembers.empty().add(member1).add(member2)
		expect(allMembers.members).toEqual([member1, member2])
	})

	// concatenating two AllMembers instances with overlapping members
	it('겹치는 멤버가 있는 두 개의 AllMembers 인스턴스를 연결해야 합니다.', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const member2 = new Member('2', { name: 'Bob' })
		const allMembers1 = AllMembers.of([member1])
		const allMembers2 = AllMembers.of([member2])
		const concatenated = allMembers1.concat(allMembers2)
		expect(concatenated.members).toEqual([member1, member2])
	})

	// filtering members with a filter function that matches no members
	it('일치하는 멤버가 없는 필터 함수로 멤버를 필터링해야 합니다.', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const allMembers = AllMembers.of([member1])
		const cohort = allMembers.getCohort(member => member.properties.name.startsWith('B'))
		expect(cohort.getValue()).toEqual([])
	})

	// retrieving remaining members when all members are already in teams
	it('모든 멤버가 이미 팀에 있을 때 남은 멤버를 검색해야 합니다.', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const team = Team.of(['1'], 1)
		const teams = Teams.of([team], [0])
		const allMembers = AllMembers.of([member1])
		const remaining = allMembers.getRemainingMembers(teams)
		expect(remaining.members).toEqual([])
	})

	// checking for a member ID that does not exist in the AllMembers instance
	it('AllMembers 인스턴스에 존재하지 않는 멤버 ID를 확인해야 합니다.', () => {
		const member1 = new Member('1', { name: 'Alice' })
		const allMembers = AllMembers.of([member1])
		expect(allMembers.hasMemberId('2')).toBe(false)
	})
})
