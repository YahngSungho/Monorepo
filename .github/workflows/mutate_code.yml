name: Mutate Code

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write # Necessary to comment on PRs
  issues: read # Necessary to read issue comments
  contents: write

jobs:
  # 공통 경로 필터링 job
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.images }}
    if: "!contains(github.event.pull_request.labels.*.name, 'mutation-completed')"
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            images:
              - '**.jpg'
              - '**.jpeg'
              - '**.png'
              - '**.webp'

  compress-images:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.images == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      - name: Compress Images
        uses: calibreapp/image-actions@main
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          compressOnly: true

      # 추가: 이미지 압축 후 수정사항을 patch 파일로 생성
      - name: Create patch file
        run: git diff > images-changes.patch

      # 추가: patch 파일을 artifact로 업로드
      - name: Upload patch artifact
        uses: actions/upload-artifact@v4
        with:
          name: images-changes-patch
          path: images-changes.patch

  lint-format:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    if: "!contains(github.event.pull_request.labels.*.name, 'mutation-completed')"
    outputs:
      is_automated: ${{ steps.check_commit.outputs.is_automated }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # pnpm 설치 (packageManager 버전과 일치)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.5.0
          cache: pnpm

      # 의존성 설치 최적화
      - name: Install dependencies
        run: pnpm install --prefer-offline

      # 이전 커밋 메시지 확인
      - name: Check Last Commit Message
        id: check_commit
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"[automated-mutation]"* ]]; then
            echo "is_automated=true" >> $GITHUB_OUTPUT
          else
            echo "is_automated=false" >> $GITHUB_OUTPUT
          fi

      # 린트 실행
      - name: Run Lint & Format
        if: steps.check_commit.outputs.is_automated != 'true'
        run: pnpm run lint-fix

      # 추가: lint-fix 후 수정사항을 patch 파일로 생성
      - name: Create patch file
        if: steps.check_commit.outputs.is_automated != 'true'
        run: git diff > changes.patch

      # 추가: patch 파일을 artifact로 업로드
      - name: Upload patch artifact
        if: steps.check_commit.outputs.is_automated != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: changes-patch
          path: changes.patch

  push-and-labeled:
    needs: [compress-images, lint-format]
    runs-on: ubuntu-latest
    if: "always() && !contains(github.event.pull_request.labels.*.name, 'mutation-completed')"

    steps:
      # 저장소 체크아웃 단계
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # 추가: 이전 job에서 생성한 patch artifact를 다운로드
      - name: Check if changes patch exists
        id: check_changes_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "changes-patch"
            );
            return !!matchArtifact;

      - name: Download patch artifact
        if: steps.check_changes_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: changes-patch
          path: .

      # 추가: 이미지 압축 결과 patch artifact를 다운로드
      - name: Check if images patch exists
        id: check_images_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "images-changes-patch"
            );
            return !!matchArtifact;

      - name: Download images patch artifact
        if: steps.check_images_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: images-changes-patch
          path: .

      # 추가: 다운로드한 patch 적용
      - name: Apply patches
        run: |
          if [ -f changes.patch ]; then
            echo "Applying code formatting changes patch..."
            if ! git apply changes.patch; then
              echo "::warning::Failed to apply code formatting patch. The patch may be empty or there might be conflicts."
            else
              echo "Code formatting patch applied successfully."
            fi
          else
            echo "No code formatting changes patch found."
          fi

          if [ -f images-changes.patch ]; then
            echo "Applying image compression changes patch..."
            if ! git apply images-changes.patch; then
              echo "::warning::Failed to apply image compression patch. The patch may be empty or there might be conflicts."
            else
              echo "Image compression patch applied successfully."
            fi
          else
            echo "No image compression changes patch found."
          fi

      # 커밋 시도
      - name: Commit Changes
        id: auto-commit
        if: ${{ needs.lint-format.outputs.is_automated != 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '[automated-mutation]'

      # 커밋 결과 출력
      - name: Print Commit Result
        if: ${{ needs.lint-format.outputs.is_automated != 'true' }}
        run: |
          if [ "${{ steps.auto-commit.outputs.changes_detected }}" == "true" ]; then
            echo "변경사항이 감지되어 자동으로 커밋되었습니다."
          else
            echo "커밋할 변경사항이 없습니다. 모든 코드가 이미 정상적으로 포맷팅되어 있거나 이미지가 이미 최적화되어 있습니다."
          fi

      # Add a Label to PR 1
      - name: Add a Label to PR 1
        if: steps.auto-commit.outputs.changes_detected == 'true' && needs.lint-format.outputs.is_automated != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mutated']
            })

      # 라벨 추가
      - name: Add a Label to PR 2
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mutation-completed']
            })
