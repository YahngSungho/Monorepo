name: Mutate Code

on:
  pull_request:
    types: [opened, synchronize, labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  HUSKY: 0

permissions:
  pull-requests: write # PR에 댓글을 작성하는 데 필요
  issues: read # 이슈 댓글을 읽는 데 필요
  contents: write

jobs:
  initiate:
    runs-on: ubuntu-latest
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'restart') ||
      (github.event.action != 'labeled' &&
        !contains(github.event.pull_request.labels.*.name, 'mutation-finished') &&
        !contains(github.event.head_commit.message, '[automated-mutation]'))
    steps:
      - name: 자동 병합 활성화 시 취소 시도
        uses: actions/github-script@v7
        with:
          script: |
            const prNodeId = context.payload.pull_request.node_id; // 이벤트 페이로드에서 PR의 node_id 가져오기
            const prNumber = context.issue.number;
            const owner = context.repo.owner; // 필요시 로그 출력용
            const repo = context.repo.repo; // 필요시 로그 출력용

            if (!prNodeId) {
              console.log(`PR #${prNumber}에 대한 컨텍스트에서 Pull Request Node ID를 가져올 수 없습니다.`);
              // 만약 context에 node_id가 없다면, API로 다시 조회해야 할 수 있지만,
              // pull_request 이벤트에서는 보통 포함되어 있습니다.
              core.setFailed("Pull Request Node ID를 결정할 수 없습니다.");
              return;
            }

            console.log(`GraphQL을 통해 PR #${prNumber} (Node ID: ${prNodeId})에 대한 자동 병합 비활성화를 시도합니다.`);

            try {
              // github.graphql을 사용하여 disablePullRequestAutoMerge 뮤테이션 실행
              await github.graphql(`
                mutation($prId: ID!) {
                  disablePullRequestAutoMerge(input: {pullRequestId: $prId}) {
                    clientMutationId
                  }
                }
              `, { prId: prNodeId });
              console.log(`✅ GraphQL을 통해 PR #${prNumber}에 대한 자동 병합이 성공적으로 비활성화되었습니다.`);
            } catch (error) {
              // GraphQL 오류 메시지를 확인하여 자동 병합이 활성화되지 않았는지 판단합니다.
              // 실제 오류 메시지에 따라 이 조건은 조정될 수 있습니다.
              if (error.message.includes("Pull request auto-merge cannot be disabled") || error.message.includes("Could not resolve to a PullRequest") || error.message.includes("already disabled")) {
                 console.log(`ℹ️ PR #${prNumber}에 대해 자동 병합이 활성화되지 않았거나 이미 비활성화되었습니다. (GraphQL 오류: ${error.message})`);
              } else {
                console.error(`❌ GraphQL을 통해 PR #${prNumber}에 대한 자동 병합 비활성화에 실패했습니다. 오류: ${error.message}`);
                // 필요시 오류를 다시 던져서 워크플로우 스텝을 실패시킬 수 있습니다.
                // core.setFailed(`GraphQL을 통한 자동 병합 비활성화 실패: ${error.message}`);
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 라벨 제거
        if: github.event.label.name == 'restart'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'restart'
              });
              console.log('restart 라벨이 30초 대기 후 성공적으로 제거되었습니다.');
            } catch (error) {
              console.log('라벨 제거 중 오류가 발생했거나 라벨을 찾을 수 없습니다:', error);
            }

  # 공통 경로 필터링 job
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.images }}
      markdown: ${{ steps.filter.outputs.markdown }}
      package-json: ${{ steps.filter.outputs.package-json }}
      projects: ${{ steps.filter.outputs.projects }}
      translation-targets: ${{ steps.filter.outputs.translation-targets }}
    needs: initiate
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            projects:
              - 'apps/**'
              - 'libraries/**'
              - 'storybook/**'
            images:
              - '**.jpg'
              - '**.jpeg'
              - '**.png'
              - '**.webp'
              - '**.gif'
              - '**.svg'
              - '**.pdf'
              - '**.tiff'
              - '**.magick'
              - '**.openslide'
              - '**.dz'
              - '**.ppm'
              - '**.fits'
              - '**.heif'
              - '**.vips'
              - '**.raw'
            markdown:
              - '**/*.md'
              - '**/*.mdx'
              - '**/*.mdc'
              - '**/*.json'
            translation-targets:
              - 'apps/**/*.md'
              - 'apps/**/*.mdx'
              - 'libraries/paraglide/messages/**/*.*'
              - 'libraries/paraglide/messages-helpers/**/*.*'
            package-json:
              - 'package.json'
              - '**/package.json'

  fix-package-json:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.package-json == 'true'
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # pnpm 설치 (packageManager 버전과 일치)
      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      # Node.js 환경 설정 (package.json의 engines.node 버전과 일치)
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      # 의존성 설치 최적화
      - name: 의존성 설치 1
        run: pnpm install --no-frozen-lockfile

      - name: 버전 불일치 수정
        run: pnpm run fix-mismatches

      - name: Package.json 변경사항 확인 1
        id: check_package_json_changes
        run: |
          if git diff --quiet; then
            echo "Package.json 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Package.json 변경사항이 있습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: 의존성 설치 2
        if: steps.check_package_json_changes.outputs.has_changes == 'true'
        run: pnpm install --no-frozen-lockfile

      - name: Package.json 변경사항 확인 2 & .patch 파일 저장
        run: git diff > package-json-changes.patch

      - name: 패치 아티팩트 업로드
        if: steps.check_package_json_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: package-json-changes-patch
          path: package-json-changes.patch

  update-translation:
    runs-on: ubuntu-latest
    needs: [path-filter, fix-package-json]
    if: |
      needs.path-filter.outputs.translation-targets == 'true' && !failure() && !cancelled()
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # 1. package-json 패치 다운로드
      - name: package-json 패치 존재 여부 확인
        id: check_package_json_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "package-json-changes-patch"
            );
            return !!matchArtifact;

      - name: package-json 패치 아티팩트 다운로드
        if: steps.check_package_json_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      # 2. package-json 패치 적용
      - name: package-json 패치 적용
        if: steps.check_package_json_patch.outputs.result == 'true'
        run: |
          if [ -f package-json-changes.patch ]; then
            echo "package.json 포맷팅 변경사항 패치를 적용합니다..."
            # --check 옵션으로 적용 가능 여부 확인
            if ! git apply --check package-json-changes.patch; then
              echo "::error::package-json-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              # 여기서 실패 처리 또는 경고 후 진행 결정 필요 (우선 실패 처리)
              exit 1
            fi
            # 실제 패치 적용
            git apply package-json-changes.patch
            echo "package.json 포맷팅 패치가 성공적으로 적용되었습니다."
            rm package-json-changes.patch
          else
            echo "적용할 package.json 포맷팅 변경사항이 없습니다."
          fi

      # 3. pnpm 설치 및 의존성 설치 (패치 적용 후)
      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
      - name: 의존성 설치
        run: pnpm install --prefer-offline # 패치 적용된 package.json/lock 기준

      # 4. 임시 커밋 생성 (패치 + 설치 후 상태 기준)
      - name: diff 비교를 위한 임시 커밋 생성
        run: |
          echo "--- 임시 커밋 생성 중 (번역 전) ---"
          git config user.name "GitHub Actions Temp"
          git config user.email "actions-temp@github.com"
          echo "임시 커밋 'git add .' 실행 전 상태:"
          git status --short
          git add . # 모든 변경사항 스테이징 (패치 적용 + install 결과 포함)
          echo "임시 커밋 'git add .' 실행 후, 'git commit' 실행 전 상태:"
          git status --short
          echo "임시 커밋을 위한 스테이징된 변경사항 diff 통계:"
          git diff --staged --stat # 스테이징된 내용 확인
          if ! git diff --staged --quiet; then
            git commit -m "Temporary commit after applying package-json patch and install"
            echo "임시 커밋이 생성되었습니다. HEAD는 이제 $(git rev-parse HEAD) 입니다."
          else
            echo "번역 전 임시로 커밋할 변경사항이 없습니다."
          fi
          echo "--- 임시 커밋 완료 ---"

      # # 5. 번역 실행
      # - name: 번역 실행
      #   run: |
      #     echo "--- 번역 실행 중 (pnpm run translate) ---"
      #     pnpm run translate
      #     echo "--- 번역 완료 ---"
      #     echo "'pnpm run translate' 실행 후 상태 (패치 생성 전):"
      #     git status --short # 번역 실행 직후 상태 확인 (새 파일이 untracked로 보여야 함)
      #   env:
      #     GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}

      # 6. 번역 변경사항 패치 생성 (임시 커밋 기준)
      - name: 번역 변경사항 확인 및 패치 생성
        id: check_translation_changes
        run: |
          echo "--- HEAD ($(git rev-parse HEAD)) 기준으로 번역 패치 생성 중 ---"
          echo "현재 상태 (번역으로 인한 untracked 파일 포함):"
          git status --short

          # 새로 생성된 파일(untracked files)을 포함하여 모든 변경 사항을 스테이징합니다.
          # 이것이 핵심 변경 사항입니다.
          echo "모든 변경사항 (untracked 파일 포함) 스테이징 영역에 추가 중..."
          git add -A # 또는 git add . (모든 변경사항 및 새 파일 추가)

          echo "'git add -A' 실행 후 상태:"
          git status --short # 스테이징 후 상태 확인

          # 이제 스테이징된 변경사항을 기준으로 diff를 생성합니다.
          # HEAD는 "Temporary commit after applying package-json patch and install" 커밋을 가리킵니다.
          # 따라서 이 diff는 번역 작업으로 인해 발생한 변경사항(새 파일 추가 포함)만을 포함하게 됩니다.
          echo "임시 커밋(HEAD) 대비 스테이징된 변경사항 diff 통계 실행 중:"
          git diff --stat --staged HEAD # 스테이징된 변경사항과 임시 커밋(HEAD) 비교

          if ! git diff --quiet --staged HEAD --exit-code; then # 스테이징된 변경사항과 임시 커밋(HEAD) 비교
            echo "번역 변경사항이 있습니다 (새 파일 포함)."
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff --staged HEAD > translation-changes.patch # 스테이징된 변경사항을 패치로 저장
            echo "translation-changes.patch 내용:"
            cat translation-changes.patch # 생성된 패치 내용 출력
          else
            echo "번역 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          echo "--- 번역 패치 생성 완료 ---"

      # 7. 번역 패치 업로드
      - name: 번역 패치 아티팩트 업로드
        if: steps.check_translation_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: translation-changes-patch
          path: translation-changes.patch

  fix-markdown:
    runs-on: ubuntu-latest
    needs: [path-filter, fix-package-json, update-translation]
    if: |
      needs.path-filter.outputs.markdown == 'true' && !failure() && !cancelled()
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # 1. package-json 패치 다운로드
      - name: package-json 패치 존재 여부 확인
        id: check_package_json_patch_fix_md
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "package-json-changes-patch"
            );
            return !!matchArtifact;

      - name: package-json 패치 아티팩트 다운로드
        if: steps.check_package_json_patch_fix_md.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      # 2. package-json 패치 적용
      - name: package-json 패치 적용
        if: steps.check_package_json_patch_fix_md.outputs.result == 'true'
        run: |
          if [ -f package-json-changes.patch ]; then
            echo "package.json 포맷팅 변경사항 패치를 적용합니다..."
            if ! git apply --check package-json-changes.patch; then
              echo "::error::package-json-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              exit 1
            fi
            git apply package-json-changes.patch
            echo "package.json 포맷팅 패치가 성공적으로 적용되었습니다."
            rm package-json-changes.patch
          else
            echo "적용할 package.json 포맷팅 변경사항이 없습니다."
          fi

      # 3. translation patch 다운로드
      - name: 번역 패치 존재 여부 확인
        id: check_translation_patch_fix_md
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "translation-changes-patch"
            );
            return !!matchArtifact;

      - name: 번역 패치 아티팩트 다운로드
        if: steps.check_translation_patch_fix_md.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: translation-changes-patch
          path: .

      # 4. translation patch 적용
      - name: 번역 패치 적용
        if: steps.check_translation_patch_fix_md.outputs.result == 'true'
        run: |
          if [ -f translation-changes.patch ]; then
            echo "번역 변경사항 패치를 적용합니다..."
            if ! git apply --check translation-changes.patch; then
              echo "::error::translation-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              exit 1
            fi
            git apply translation-changes.patch
            echo "번역 패치가 성공적으로 적용되었습니다."
            rm translation-changes.patch
          else
            echo "적용할 번역 변경사항이 없습니다."
          fi

      # 5. pnpm 설치 및 의존성 설치 (패치 적용 후)
      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
      - name: 의존성 설치
        run: pnpm install --prefer-offline # 패치 적용된 package.json/lock 기준

      # 6. 임시 커밋 생성 (패치 + 설치 후 상태 기준)
      - name: diff 비교를 위한 임시 커밋 생성
        run: |
          echo "--- 임시 커밋 생성 중 (마크다운 수정 전) ---"
          git config user.name "GitHub Actions Temp"
          git config user.email "actions-temp@github.com"
          git add . # 모든 변경사항 스테이징 (패치 적용 + install 결과 포함)
          if ! git diff --staged --quiet; then
            git commit -m "Temporary commit after applying package-json, translation patches and install"
            echo "임시 커밋 (마크다운 수정 전)이 생성되었습니다. HEAD는 이제 $(git rev-parse HEAD) 입니다."
          else
            echo "마크다운 수정 전 임시로 커밋할 변경사항이 없습니다."
          fi
          echo "--- 임시 커밋 (마크다운 수정 전) 완료 ---"

      # 7. 마크다운 수정 도구 실행
      - name: 마크다운 수정 (markdownlint)
        uses: DavidAnson/markdownlint-cli2-action@v19
        with:
          globs: |
            **/*.md
            **/*.mdx
            **/*.mdc
            !**/node_modules/**
          config: .markdownlint.json
          fix: true
        continue-on-error: true

      - name: 마크다운 파일 Lint 수정 (eslint-md)
        run: pnpm run eslint-md
        continue-on-error: true # ESLint 오류 시 워크플로우 중단 방지 (선택 사항)

      - name: 마크다운 파일 Stylelint 수정 (stylelint-md)
        run: pnpm run stylelint-md
        continue-on-error: true # Stylelint 오류 시 워크플로우 중단 방지 (선택 사항)

      - name: 마크다운 포맷팅 (prettier)
        run: pnpm run format-md

      # 8. 마크다운 변경사항 패치 생성 (임시 커밋 기준)
      - name: 마크다운 변경사항 확인 및 패치 생성
        id: check_markdown_changes
        run: |
          echo "--- HEAD ($(git rev-parse HEAD)) 기준으로 마크다운 패치 생성 중 ---"
          echo "현재 상태 (마크다운 수정 후):"
          git status --short
          echo "스테이징 전, 모든 변경사항 (untracked 파일 포함) 추가 중..."
          git add -A # 마크다운 수정 도구가 새 파일을 만들 수도 있으므로 추가
          echo "'git add -A' 실행 후 상태:"
          git status --short

          if ! git diff --quiet --staged HEAD --exit-code; then # 임시 커밋과 비교
            echo "markdown 변경사항이 있습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff --staged HEAD > markdown-changes.patch # 임시 커밋과의 스테이징된 차이 저장
            echo "markdown-changes.patch 내용:"
            cat markdown-changes.patch
          else
            echo "markdown 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          echo "--- 마크다운 패치 생성 완료 ---"

      # 9. 마크다운 패치 업로드
      - name: 마크다운 패치 아티팩트 업로드
        if: steps.check_markdown_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: markdown-changes-patch
          path: markdown-changes.patch

  lint-format:
    runs-on: ubuntu-latest
    needs: [path-filter, fix-package-json, update-translation, fix-markdown]
    if: |
      needs.path-filter.outputs.projects == 'true' && !failure() && !cancelled()
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      HUSKY: 0
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }} # 필요시 토큰 사용
          fetch-depth: 0 # diff를 위해

      # 1. package-json 패치 다운로드
      - name: package-json 패치 존재 여부 확인
        id: check_package_json_patch_lint_format
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "package-json-changes-patch"
            );
            return !!matchArtifact;

      - name: package-json 패치 아티팩트 다운로드
        if: steps.check_package_json_patch_lint_format.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      # 2. package-json 패치 적용
      - name: package-json 패치 적용
        if: steps.check_package_json_patch_lint_format.outputs.result == 'true'
        run: |
          if [ -f package-json-changes.patch ]; then
            echo "package.json 포맷팅 변경사항 패치를 적용합니다..."
            if ! git apply --check package-json-changes.patch; then
              echo "::error::package-json-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              exit 1
            fi
            git apply package-json-changes.patch
            echo "package.json 포맷팅 패치가 성공적으로 적용되었습니다."
            rm package-json-changes.patch
          else
            echo "적용할 package.json 포맷팅 변경사항이 없습니다."
          fi

      # 3. translation patch 다운로드
      - name: 번역 패치 존재 여부 확인
        id: check_translation_patch_lint_format
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "translation-changes-patch"
            );
            return !!matchArtifact;

      - name: 번역 패치 아티팩트 다운로드
        if: steps.check_translation_patch_lint_format.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: translation-changes-patch
          path: .

      # 4. translation patch 적용
      - name: 번역 패치 적용
        if: steps.check_translation_patch_lint_format.outputs.result == 'true'
        run: |
          if [ -f translation-changes.patch ]; then
            echo "번역 변경사항 패치를 적용합니다..."
            if ! git apply --check translation-changes.patch; then
              echo "::error::translation-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              exit 1
            fi
            git apply translation-changes.patch
            echo "번역 패치가 성공적으로 적용되었습니다."
            rm translation-changes.patch
          else
            echo "적용할 번역 변경사항이 없습니다."
          fi

      # 5. markdown patch 다운로드
      - name: 마크다운 패치 존재 여부 확인
        id: check_markdown_patch_lint_format
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "markdown-changes-patch"
            );
            return !!matchArtifact;

      - name: 마크다운 패치 아티팩트 다운로드
        if: steps.check_markdown_patch_lint_format.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: markdown-changes-patch
          path: .

      # 6. markdown patch 적용
      - name: 마크다운 패치 적용
        if: steps.check_markdown_patch_lint_format.outputs.result == 'true'
        run: |
          if [ -f markdown-changes.patch ]; then
            echo "markdown 변경사항 패치를 적용합니다..."
            if ! git apply --check markdown-changes.patch; then
              echo "::error::markdown-changes.patch 확인에 실패했습니다. 깔끔하게 적용할 수 없습니다."
              exit 1
            fi
            git apply markdown-changes.patch
            echo "markdown 패치가 성공적으로 적용되었습니다."
            rm markdown-changes.patch
          else
            echo "적용할 markdown 변경사항이 없습니다."
          fi

      # Node.js 및 pnpm 설정
      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      # 패치 적용 후 의존성 설치 (lint-fix 실행 위해)
      - name: 패치 적용 후 의존성 설치
        run: pnpm install --prefer-offline

      # 임시 커밋 생성 (git diff 기준점 마련)
      - name: diff 비교를 위한 임시 커밋 생성
        run: |
          echo "--- 임시 커밋 생성 중 (린트/포맷 실행 전) ---"
          git config user.name "GitHub Actions Temp"
          git config user.email "actions-temp@github.com"
          git add . # 모든 변경사항 스테이징
          # 변경사항이 있을 때만 커밋 시도
          if ! git diff --staged --quiet; then
            git commit -m "Temporary commit after applying all patches and install (before lint-fix)"
            echo "임시 커밋 (린트/포맷 실행 전)이 생성되었습니다. HEAD는 이제 $(git rev-parse HEAD) 입니다."
          else
            echo "임시로 커밋할 변경사항이 없습니다 (린트/포맷 실행 전)."
          fi
          echo "--- 임시 커밋 (린트/포맷 실행 전) 완료 ---"

      # 린트 실행
      - name: 린트 및 포맷 실행
        run: pnpm run lint-fix
        continue-on-error: true

      # changes.patch 생성 (임시 커밋 기준) 및 변경 유무 출력
      - name: 린트/포맷 변경사항 확인 및 changes.patch 생성
        id: create_changes_patch
        run: |
          echo "--- HEAD ($(git rev-parse HEAD)) 기준으로 린트/포맷 변경사항 패치 생성 중 ---"
          echo "현재 상태 (린트/포맷 실행 후):"
          git status --short
          echo "스테이징 전, 모든 변경사항 (untracked 파일 포함) 추가 중..."
          git add -A # 린트/포맷 도구가 새 파일을 만들 수도 있으므로 추가
          echo "'git add -A' 실행 후 상태:"
          git status --short

          if ! git diff --quiet --staged HEAD --exit-code; then # 임시 커밋과 비교
            echo "린트 및 포맷팅 후 변경사항 감지됨. changes.patch 생성 중..."
            git diff --staged HEAD > changes.patch
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changes.patch 내용:"
            cat changes.patch
          else
            echo "린트 및 포맷팅 후 추가 변경사항 없음."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          echo "--- 린트/포맷 변경사항 패치 생성 완료 ---"

      # patch 파일을 artifact로 업로드 (변경사항 있을 때만)
      - name: changes.patch 아티팩트 업로드
        uses: actions/upload-artifact@v4
        if: steps.create_changes_patch.outputs.has_changes == 'true'
        with:
          name: changes-patch
          path: changes.patch

  compress-images:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.images == 'true'
    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      - name: 이미지 압축
        uses: calibreapp/image-actions@main
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          compressOnly: true

      # 추가: 이미지 압축 후 수정사항을 patch 파일로 생성
      - name: 이미지 변경사항 확인
        id: check_image_changes
        run: |
          if git diff --quiet; then
            echo "이미지 압축 후 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "이미지 압축 후 변경사항이 감지되었습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff > images-changes.patch
          fi

      # 추가: patch 파일을 artifact로 업로드
      - name: 이미지 패치 아티팩트 업로드
        if: steps.check_image_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: images-changes-patch
          path: images-changes.patch

  push-and-labeled:
    needs: [path-filter, compress-images, lint-format, fix-package-json, fix-markdown, update-translation]
    if: needs.path-filter.result == 'success' && !failure() && !cancelled()
    runs-on: ubuntu-latest

    steps:
      # 저장소 체크아웃 단계
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0 # diff를 위해 전체 히스토리 가져오기

      - name: package-json 패치 존재 여부 확인
        id: check_package_json_patch_push
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            return !!artifacts.data.artifacts.find(artifact => artifact.name === "package-json-changes-patch");

      - name: package-json 패치 아티팩트 다운로드
        if: steps.check_package_json_patch_push.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      - name: 번역 패치 존재 여부 확인
        id: check_translation_patch_push
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "translation-changes-patch"
            );
            return !!matchArtifact;

      - name: 번역 패치 아티팩트 다운로드
        if: steps.check_translation_patch_push.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: translation-changes-patch
          path: .

      - name: 마크다운 패치 존재 여부 확인
        id: check_markdown_patch_push
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "markdown-changes-patch"
            );
            return !!matchArtifact;

      - name: 마크다운 패치 아티팩트 다운로드
        if: steps.check_markdown_patch_push.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: markdown-changes-patch
          path: .

      - name: changes.patch (린트/포맷) 존재 여부 확인
        id: check_changes_patch_push
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "changes-patch"
            );
            return !!matchArtifact;

      - name: changes.patch (린트/포맷) 아티팩트 다운로드
        if: steps.check_changes_patch_push.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: changes-patch
          path: .

      - name: 이미지 패치 존재 여부 확인
        id: check_images_patch_push
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "images-changes-patch"
            );
            return !!matchArtifact;

      - name: 이미지 패치 아티팩트 다운로드
        if: steps.check_images_patch_push.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: images-changes-patch
          path: .

      # 추가: 다운로드한 patch 적용
      - name: 패치 적용
        run: |
          echo "--- 패치 적용 시작 ---"
          apply_patch() {
            local patch_file="$1"
            local patch_name="$2"
            if [ -f "$patch_file" ]; then
              echo "$patch_name 패치 ($patch_file) 적용 중..."
              if git apply --3way "$patch_file"; then
                 echo "$patch_name 패치가 3-way 병합으로 성공적으로 적용되었습니다."
              elif git apply --check "$patch_file"; then
                git apply "$patch_file"
                if [ $? -eq 0 ]; then
                  echo "$patch_name 패치가 성공적으로 적용되었습니다."
                else
                  echo "::error::$patch_name 패치 ($patch_file) 적용 실패 (확인 후에도). 수동 충돌 해결이 필요할 수 있습니다."
                fi
              else
                echo "::warning::$patch_name 패치 ($patch_file) 확인 실패. 충돌이 있을 수 있습니다."
              fi
              rm "$patch_file" || echo "$patch_file 삭제 불가"
              echo "$patch_name 패치 적용 후 현재 상태:"
              git status --short
            else
              echo "적용할 $patch_name 패치 ($patch_file) 없음."
            fi
            echo "------------------------"
          }

          apply_patch "images-changes.patch" "이미지 압축"
          apply_patch "package-json-changes.patch" "Package.json 포맷팅"
          apply_patch "translation-changes.patch" "번역"
          apply_patch "markdown-changes.patch" "마크다운 포맷팅"
          apply_patch "changes.patch" "코드 포맷팅 (린트/스타일)"

          echo "--- 모든 패치 적용 완료 ---"
          echo "모든 패치 적용 후 최종 상태 (스테이징 전):"
          git status --short
          echo "모든 패치 적용 후 상세 diff 통계 (스테이징 전):"
          git diff --stat

      - name: 모든 패치 적용 후 변경사항 스테이징
        run: |
          echo "--- 모든 변경사항 스테이징 중 ---"
          echo "'git add -A' 실행 전 상태:"
          git status --short

          git add -A
          echo "'git add -A' 실행 후 상태:"
          git status --short

          echo "스테이징된 변경사항 diff 통계:"
          git diff --staged --stat
          echo "--- 스테이징 완료 ---"

      # 커밋 시도
      - name: 변경사항 커밋
        id: auto-commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '[automated-mutation]'
          # 디버깅을 위해 커밋 액션의 로그를 더 자세히 보려면:
          # skip_dirty_check: true
          # skip_fetch: true
          # dry_run: true # 실제 커밋은 안하고 결과만 볼 때 (테스트용)
          # file_pattern: . # 명시적으로 모든 파일을 대상으로 지정

      # 커밋 결과 출력
      - name: 커밋 결과 출력
        run: |
          if [ "${{ steps.auto-commit.outputs.changes_detected }}" == "true" ]; then
            echo "변경사항이 감지되어 자동으로 커밋되었습니다."
            echo "커밋 ID: ${{ steps.auto-commit.outputs.commit_hash }}"
          else
            echo "커밋할 변경사항이 없습니다. 모든 코드가 이미 정상적으로 포맷팅되어 있거나 이미지가 이미 최적화되어 있습니다."
          fi

      # Add a Label to PR 1
      - name: PR에 라벨 추가 1 (mutated)
        if: steps.auto-commit.outputs.changes_detected == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mutated']
            })

      # 라벨 추가
      - name: PR에 라벨 추가 2 (mutation-finished)
        env:
          GH_TOKEN: ${{ secrets.TOKEN1 }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          echo "Adding label mutation-finished to PR #$PR_NUMBER in repo $REPO"
          gh issue edit $PR_NUMBER --add-label "mutation-finished" --repo $REPO
          echo "Label addition command executed."
