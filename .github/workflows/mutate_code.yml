name: Mutate Code

on:
  pull_request:
    types: [opened, synchronize, labeled]

env:
  HUSKY: 0

permissions:
  pull-requests: write # Necessary to comment on PRs
  issues: read # Necessary to read issue comments
  contents: write

jobs:
  # 공통 경로 필터링 job
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.images }}
      markdown: ${{ steps.filter.outputs.markdown }}
      package-json: ${{ steps.filter.outputs.package-json }}
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'restart') ||
      (github.event.action != 'labeled' &&
        !contains(github.event.pull_request.labels.*.name, 'mutation-completed') &&
        !contains(github.event.head_commit.message, '[automated-mutation]'))

    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            images:
              - '**.jpg'
              - '**.jpeg'
              - '**.png'
              - '**.webp'
            markdown:
              - '**/*.md'
              - '**/*.mdx'
            package-json:
              - 'package.json'
              - '**/package.json'

      - name: Remove Label
        if: github.event.label.name == 'restart'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            try {
              github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'restart'
              });
              console.log('Label restart removed successfully');
            } catch (error) {
              console.log('Error removing label or label not found:', error);
            }

  fix-package-json:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.package-json == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # pnpm 설치 (packageManager 버전과 일치)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1
          run_install: false

      # Node.js 환경 설정 (package.json의 engines.node 버전과 일치)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.5.0
          cache: pnpm

      # 의존성 설치 최적화
      - name: Install dependencies 1
        run: pnpm install --prefer-offline

      - name: Fix Mismatches Versions
        run: pnpm run fix-mismatches

      - name: Check for Package.json changes 1
        id: check_package_json_changes
        run: |
          if git diff --quiet; then
            echo "Package.json 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Package.json 변경사항이 있습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies 2
        if: steps.check_package_json_changes.outputs.has_changes == 'true'
        run: pnpm install --no-frozen-lockfile

      - name: Check for Package.json changes 2 & Save .patch file
        run: git diff > package-json-changes.patch

      - name: Upload patch artifact
        if: steps.check_package_json_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: package-json-changes-patch
          path: package-json-changes.patch

  fix-markdown:
    runs-on: ubuntu-latest
    needs: [path-filter, fix-package-json]
    if: needs.path-filter.outputs.markdown == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      - name: Check if package-json patch exists
        id: check_package_json_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "package-json-changes-patch"
            );
            return !!matchArtifact;

      - name: Download package-json patch artifact
        if: steps.check_package_json_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      # 추가: 다운로드한 patch 적용
      - name: Apply patches
        if: steps.check_package_json_patch.outputs.result == 'true'
        run: |
          # package.json 패치 적용
          if [ -f package-json-changes.patch ]; then
            echo "Applying package.json formatting changes patch..."
            if ! git apply package-json-changes.patch; then
              echo "::warning::Failed to apply package.json formatting patch. The patch may have conflicts."
              exit 1 # 실패 시 워크플로우 중단
            else
              echo "package.json formatting patch applied successfully."
            fi
            # 패치 파일 삭제
            rm package-json-changes.patch
          else
            echo "No package.json formatting changes to apply."
          fi

      # --> 추가: 임시 커밋 생성 (git diff 기준점 마련)
      - name: Create temporary commit for diff base
        run: |
          git config user.name "GitHub Actions Temp"
          git config user.email "actions-temp@github.com"
          git add . # 모든 변경사항 스테이징 (패치 적용 및 install 결과 포함)
          # 변경사항이 있을 때만 커밋 시도
          if ! git diff --staged --quiet; then
            git commit -m "Temporary commit before fixing markdown"
          else
            echo "No changes to commit temporarily before fixing markdown."
          fi

      - name: Fix Markdown
        uses: DavidAnson/markdownlint-cli2-action@v19
        with:
          globs: |
            **/*.md
            **/*.mdx
          config: .markdownlint.json
          fix: true
        continue-on-error: true

      # pnpm 설치 (packageManager 버전과 일치)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1
          run_install: false

      # Node.js 환경 설정 (package.json의 engines.node 버전과 일치)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.5.0
          cache: pnpm

      # 의존성 설치 최적화
      - name: Install dependencies
        run: pnpm install --prefer-offline

      - name: Format Markdown
        run: pnpm run format-all-path '**/*.md'

      - name: Check for Markdown changes
        id: check_markdown_changes
        run: |
          # --> 수정: git diff HEAD 사용하여 패치 생성
          if ! git diff --quiet HEAD; then # HEAD (임시 커밋)와 비교
            echo "Markdown 변경사항이 있습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff HEAD > markdown-changes.patch # 임시 커밋과의 차이 저장
          else
            echo "Markdown 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
            # 변경사항 없을 시 빈 패치 생성 또는 업로드 스킵
            touch markdown-changes.patch
          fi

      - name: Upload patch artifact
        if: steps.check_markdown_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: markdown-changes-patch
          path: markdown-changes.patch

  compress-images:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.images == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      - name: Compress Images
        uses: calibreapp/image-actions@main
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          compressOnly: true

      # 추가: 이미지 압축 후 수정사항을 patch 파일로 생성
      - name: Check for image changes
        id: check_image_changes
        run: |
          if git diff --quiet; then
            echo "이미지 압축 후 변경사항이 없습니다."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "이미지 압축 후 변경사항이 감지되었습니다."
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff > images-changes.patch
          fi

      # 추가: patch 파일을 artifact로 업로드
      - name: Upload patch artifact
        if: steps.check_image_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: images-changes-patch
          path: images-changes.patch

  lint-format:
    runs-on: ubuntu-latest
    # fix-package-json 잡이 완료된 후 실행되도록 명시적 의존성 추가
    needs: [path-filter, fix-package-json]
    # 실행 조건은 기존 로직 유지 또는 필요에 따라 조정
    if: needs.path-filter.result == 'success' # 예시 조건
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      HUSKY: 0

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }} # 필요시 토큰 사용
          fetch-depth: 0 # diff를 위해

      # Node.js 및 pnpm 설정
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.5.0
          cache: pnpm

      # package-json 패치 다운로드 및 적용
      - name: Check if package-json patch exists
        id: check_package_json_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({ owner: context.repo.owner, repo: context.repo.repo, run_id: context.runId });
            return !!artifacts.data.artifacts.find(artifact => artifact.name === "package-json-changes-patch");
      - name: Download package-json patch artifact
        if: steps.check_package_json_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      - name: Apply package-json patch
        if: steps.check_package_json_patch.outputs.result == 'true'
        run: |
          if [ -f package-json-changes.patch ]; then
            echo "Applying package.json formatting changes patch..."
            # 적용 전 확인, 실패 시 에러
            if ! git apply --check package-json-changes.patch; then
              echo "::error::package-json-changes.patch check failed. Cannot apply."
              exit 1
            fi
            git apply package-json-changes.patch
            echo "package.json formatting patch applied successfully."
            rm package-json-changes.patch
          else
            echo "No package.json formatting changes to apply."
          fi

      # 패치 적용 후 의존성 설치 (lint-fix 실행 위해)
      - name: Install dependencies after patch
        # 패치가 적용되었거나, 원래 package.json 변경 감지 시 실행 (필요 따라 조건 조정)
        run: pnpm install --no-frozen-lockfile

      # 임시 커밋 생성 (git diff 기준점 마련)
      - name: Create temporary commit for diff base
        run: |
          git config user.name "GitHub Actions Temp"
          git config user.email "actions-temp@github.com"
          git add . # 모든 변경사항 스테이징
          # 변경사항이 있을 때만 커밋 시도
          if ! git diff --staged --quiet; then
            git commit -m "Temporary commit after applying package-json patch"
          else
            echo "No changes to commit temporarily."
          fi

      # 린트 실행
      - name: Run Lint & Format
        run: pnpm run lint-fix

      # changes.patch 생성 (임시 커밋 기준)
      - name: Create changes.patch based on temporary commit
        run: |
          # lint-fix로 변경사항이 생겼는지 확인
          if ! git diff --quiet; then
            echo "린트 및 포맷팅 후 변경사항 감지됨. Creating changes.patch..."
            # HEAD (임시 커밋) 와 현재 작업 디렉토리의 차이를 패치 파일로 저장
            git diff HEAD > changes.patch
          else
            echo "린트 및 포맷팅 후 추가 변경사항 없음."
            # 빈 패치 파일 생성 또는 아티팩트 업로드 스킵 로직 추가 가능
            touch changes.patch # 빈 파일 생성 예시
          fi

      # patch 파일을 artifact로 업로드
      - name: Upload changes.patch artifact
        uses: actions/upload-artifact@v4
        with:
          name: changes-patch
          path: changes.patch

  push-and-labeled:
    needs: [path-filter, compress-images, lint-format, fix-package-json, fix-markdown]
    if: needs.path-filter.result == 'success' && !failure() && !cancelled()
    runs-on: ubuntu-latest

    steps:
      # 저장소 체크아웃 단계
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN1 }}
          fetch-depth: 0

      # 추가: 이전 job에서 생성한 patch artifact를 다운로드
      - name: Check if changes patch exists
        id: check_changes_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "changes-patch"
            );
            return !!matchArtifact;

      - name: Download patch artifact
        if: steps.check_changes_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: changes-patch
          path: .

      - name: Check if markdown patch exists
        id: check_markdown_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "markdown-changes-patch"
            );
            return !!matchArtifact;

      - name: Download markdown patch artifact
        if: steps.check_markdown_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: markdown-changes-patch
          path: .

      - name: Check if package-json patch exists
        id: check_package_json_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            return !!artifacts.data.artifacts.find(artifact => artifact.name === "package-json-changes-patch");

      - name: Download package-json patch artifact
        if: steps.check_package_json_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: package-json-changes-patch
          path: .

      # 추가: 이미지 압축 결과 patch artifact를 다운로드
      - name: Check if images patch exists
        id: check_images_patch
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "images-changes-patch"
            );
            return !!matchArtifact;

      - name: Download images patch artifact
        if: steps.check_images_patch.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: images-changes-patch
          path: .

      # 추가: 다운로드한 patch 적용
      - name: Apply patches
        run: |
          # 이미지 압축 패치 적용
          if [ -f images-changes.patch ]; then
            echo "Applying image compression changes patch..."
            if ! git apply images-changes.patch; then
              echo "::warning::Failed to apply image compression patch. The patch may have conflicts."
              exit 1 # 실패 시 워크플로우 중단
            else
              echo "Image compression patch applied successfully."
            fi
            # 패치 파일 삭제
            rm images-changes.patch
          else
            echo "No image compression changes to apply."
          fi

          # package.json 패치 적용
          if [ -f package-json-changes.patch ]; then
            echo "Applying package.json formatting changes patch..."
            if ! git apply package-json-changes.patch; then
              echo "::warning::Failed to apply package.json formatting patch. The patch may have conflicts."
              exit 1 # 실패 시 워크플로우 중단
            else
              echo "package.json formatting patch applied successfully."
            fi
            # 패치 파일 삭제
            rm package-json-changes.patch
          else
            echo "No package.json formatting changes to apply."
          fi

          # 마크다운 패치 적용
          if [ -f markdown-changes.patch ]; then
            echo "Applying markdown formatting changes patch..."
            if ! git apply markdown-changes.patch; then
              echo "::warning::Failed to apply markdown formatting patch. The patch may have conflicts."
              exit 1 # 실패 시 워크플로우 중단
            else
              echo "Markdown formatting patch applied successfully."
            fi
            # 패치 파일 삭제
            rm markdown-changes.patch
          else
            echo "No markdown formatting changes to apply."
          fi

          # 코드 포맷팅 패치 적용
          if [ -f changes.patch ]; then
            echo "Applying code formatting changes patch..."
            if ! git apply changes.patch; then
              echo "::warning::Failed to apply code formatting patch. The patch may have conflicts."
              exit 1 # 실패 시 워크플로우 중단
            else
              echo "Code formatting patch applied successfully."
            fi
            # 패치 파일 삭제
            rm changes.patch
          else
            echo "No code formatting changes to apply."
          fi

      # 커밋 시도
      - name: Commit Changes
        id: auto-commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '[automated-mutation]'

      # 커밋 결과 출력
      - name: Print Commit Result
        run: |
          if [ "${{ steps.auto-commit.outputs.changes_detected }}" == "true" ]; then
            echo "변경사항이 감지되어 자동으로 커밋되었습니다."
          else
            echo "커밋할 변경사항이 없습니다. 모든 코드가 이미 정상적으로 포맷팅되어 있거나 이미지가 이미 최적화되어 있습니다."
          fi

      # Add a Label to PR 1
      - name: Add a Label to PR 1
        if: steps.auto-commit.outputs.changes_detected == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mutated']
            })

      # 라벨 추가
      - name: Add a Label to PR 2
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN1 }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['mutation-completed']
            })
