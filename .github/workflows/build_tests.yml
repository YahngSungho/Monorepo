name: Build & Tests

on:
  workflow_call: {}

# explicitly configure permissions, in case your GITHUB_TOKEN workflow permissions are set to read-only in repository settings
permissions:
  pull-requests: write # Necessary to comment on PRs
  issues: read # Necessary to read issue commentsds
  contents: read # Necessary to access the repo content
  actions: read
  checks: write

jobs:
  build:
    name: Build & Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
          token: ${{ secrets.TOKEN1 }}

      - name: Install dotenvx
        run: curl -sfS https://dotenvx.sh/install.sh | sh

      - name: Load and mask only .env keys into job env
        shell: bash
        run: |
          # 1) .env 파일들에서 "키 이름"만 추출(주석/공백 라인 무시)
          awk -F= '!/^#/ && NF { gsub(/^[ \t]+|[ \t]+$/,"",$1); print $1 }' .env.public .env.private \
            | sort -u > .env.masklist

          # 1.5) DOTENV_PRIVATE_KEY_PRIVATE 키도 목록에 포함(중복 방지)
          if [ -n "$DOTENV_PRIVATE_KEY_PRIVATE" ]; then
            grep -qxF DOTENV_PRIVATE_KEY_PRIVATE .env.masklist || echo DOTENV_PRIVATE_KEY_PRIVATE >> .env.masklist
          fi

          # 2) dotenvx 컨텍스트에서 해당 키들만 값을 읽어 마스킹 + GITHUB_ENV 등록
          dotenvx run -f .env.private -f .env.public -- bash -lc '
            while IFS= read -r key; do
              v="${!key}"
              [ -z "$v" ] && continue
              echo "::add-mask::$v"
              if printf "%s" "$v" | grep -q $'\''\n'\''; then
                echo "$key<<EOF" >> "$GITHUB_ENV"
                printf "%s\n" "$v" >> "$GITHUB_ENV"
                echo "EOF" >> "$GITHUB_ENV"
              else
                printf "%s=%s\n" "$key" "$v" >> "$GITHUB_ENV"
              fi
            done < .env.masklist
          '
          rm -f .env.masklist || true
        env:
          DOTENV_PRIVATE_KEY_PRIVATE: ${{ secrets.DOTENV_PRIVATE_KEY_PRIVATE }}

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Cache Playwright Page State
        uses: actions/cache@v4
        id: playwright-page-cache
        with:
          path: storybook/.cache
          key: ${{ runner.os }}-playwright-page-cache-${{ hashFiles('storybook/e2e/**') }}
          restore-keys: |
            ${{ runner.os }}-playwright-page-cache-

      # pnpm 설치 (packageManager 버전과 일치)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm

      # 최적화된 설치 명령
      - name: Install dependencies
        run: pnpm install --prefer-offline

      - name: Get installed Playwright version
        id: playwright-version
        # pnpm list 명령어를 사용하여 설치된 @playwright/test 버전을 가져옵니다.
        # --json 옵션으로 JSON 출력을 받고, jq를 사용하여 버전 번호만 추출합니다.
        # jq '.[] | select(.name == "@playwright/test") | .version' 패턴은 JSON 배열에서 name이 "@playwright/test"인 객체를 찾아 version 값을 추출합니다.
        # 결과는 PLAYWRIGHT_VERSION 환경 변수에 저장됩니다.
        run: echo "PLAYWRIGHT_VERSION=$(pnpm list --depth=0 --json @playwright/test | jq -r '.[] | select(.name == "@playwright/test") | .version')" >> $GITHUB_ENV

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          # Playwright 브라우저가 설치되는 기본 경로입니다. (Linux 기준)
          path: ~/.cache/ms-playwright
          # 캐시 키는 운영체제와 Playwright 버전으로 구성하여 버전 변경 시 캐시를 무효화합니다.
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          # 정확한 버전 키가 없을 경우 이전 버전의 캐시를 복원하도록 설정합니다.
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Ensure Playwright Browsers and Dependencies
        run: pnpm exec playwright install --with-deps

      - name: Test
        run: pnpm run test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        continue-on-error: true
        with:
          name: Vitest Report # Name of the check run which will be created
          path: '**/vitest-report/**' # Path to test results
          reporter: jest-junit # Format of test results

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        continue-on-error: true
        with:
          name: Playwright Report # Name of the check run which will be created
          path: '**/playwright-report/**' # Path to test results
          reporter: jest-junit # Format of test results

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        continue-on-error: true
        with:
          name: Playwright Results # Name of the check run which will be created
          path: '**/test-results/**' # Path to test results
          reporter: jest-junit # Format of test results

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-reports
          path: '**/playwright-report/'
          retention-days: 30

      # 테스트 별로 trace.zip을 파일로 얻기 위해
      # - uses: actions/upload-artifact@v4
      #   if: ${{ !cancelled() }}
      #   with:
      #     name: playwright-test-results
      #     path: '**/test-results/'
      #     retention-days: 30
