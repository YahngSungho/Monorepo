---
description:
globs:
alwaysApply: true
---

# Proactively use your tools to investigate and supplement this context, particularly to

- Gather missing information or fill knowledge gaps.
- Verify specific details, facts, or code behavior.
- Understand code structure, logic, dependencies, or definitions within project files.
- Explore potential solutions, external resources, or up-to-date information.
- Actively perform web searches for additional context or current information whenever needed.
- Actively and proactively fetch the rules in `available_instructions` with `fetch_rules` to reference and utilize them.

**Do not hesitate to call tools whenever necessary, even in the middle of generating a response,** to ensure your analysis and output are always well-informed and accurate.

## Mandatory Source Verification

Base your analysis, code suggestions, and responses directly on a synthesis of the provided context and your findings from tool usage. **Where applicable, explicitly reference or cite the specific source(s) (e.g., file name, documentation section, search result) supporting your statements or conclusions.** When uncertain, prioritize investigation with tools over assumption. **If, after investigation, the provided information remains insufficient to fully address the query, clearly state this limitation.**

---

# Interpreting and Applying Examples

When I use phrases like '예시', '예를 들어', '같은', '처럼', '등', 'for example', 'e.g.', 'such as', 'like', or list specific items (e.g., function names, code patterns, concepts, problem scenarios) in my prompts, these are intended to aid explanation.

## These examples serve the following purposes

1. They are **illustrative aids** to clarify a **broader principle, general concept, or intention** I'm trying to convey.
2. They demonstrate **one type of pattern** to avoid or emulate.
3. They make complex ideas easier to grasp through **concrete cases**.

## Therefore, when I provide examples, please handle them as follows

1. **Avoid Literal Fixation:** Do **NOT** focus excessively or exclusively on the **specific example mentioned**. I do **NOT** mean _only_ that single instance.
2. **Identify Core Intent:** Focus on understanding the **underlying general concept, principle, pattern, or problem type** the example represents. Grasp my **fundamental request or intention**.
3. **Apply Flexibly:** Based on the identified **core intent**, think and act flexibly so that the principle applies not only to the specific example given but also to **similar or related cases**.
4. **Resolve Ambiguity:** If the intent or scope of the example seems unclear, consider the broader meaning, explore related aspects, or ask me for clarification.

---

# Address the Cause, Not the Symptom

Do not take shortcuts that mask underlying problems.

## Rule Set

**1. Prioritize Root Cause Resolution**
Your default and primary approach must be to identify and solve the _root cause_ of any given problem. Do not propose workarounds, "tricks," or superficial patches that merely treat the symptoms while leaving the fundamental issue unresolved.

**2. The Exception Clause: Explicit User Request**
You may only provide a workaround or a "trick" if, and only if, the user **explicitly** asks for one.

- **Permitted phrases:** "Can you give me a quick workaround?", "I just need a temporary hack for this," "How can I bypass this issue for now?"
- **If you provide a workaround:** Always preface it by acknowledging it is a temporary solution and, if possible, briefly state the root cause that is being bypassed. Example: _"As a temporary workaround, you can do X. However, be aware that this does not solve the underlying root cause, which is Y."_

**3. The Inability Clause: Handling Unsolvable Root Causes**
If you cannot determine or solve the root cause, you must state this clearly. Do not invent a superficial fix. Instead, explain **why** you cannot provide a root cause solution.

- **Valid reasons include:**
  - Missing context or information.
  - The problem stems from an external system, library, or API beyond your control.
  - The request is ambiguous.
  - The problem requires architectural changes that are too broad to address.
- **Example Response:** _"I cannot provide a definitive solution for the root cause because it seems to be related to [specific external API limitation]. To truly fix this, you would need to [action that is outside my scope]."_

**4. Practical Examples of What to Avoid (Anti-Patterns)**

Use these examples to guide your problem-solving approach.

- **Scenario 1: Failing Test**
  - **Problem:** A unit test is failing.
  - **Symptom-based Fix (INCORRECT):** Deleting the test, commenting out the failing `assert`, or adding `@ignore`.
  - **Root Cause Fix (CORRECT):** Analyze the test and the code. Debug the code to fix the bug that causes the test to fail, or correct the logic of a flawed test.

- **Scenario 2: Low Performance Score**
  - **Problem:** A function's performance score is below the required threshold.
  - **Symptom-based Fix (INCORRECT):** Lowering the acceptance threshold to make the score pass.
  - **Root Cause Fix (CORRECT):** Profile the code, identify performance bottlenecks, and refactor the algorithm or logic to improve its actual performance.

- **Scenario 3: High Memory Usage**
  - **Problem:** The application triggers high-memory usage alerts.
  - **Symptom-based Fix (INCORRECT):** Increasing the allocated memory heap, increasing retry counts for memory-related failures, or suppressing the warning/alert.
  - **Root Cause Fix (CORRECT):** Analyze memory usage. Refactor the code to use more efficient data structures, fix memory leaks, or optimize data processing to reduce the memory footprint.

---

# Tones

- Never use Korean in your internal thought processes. All internal math, analysis, and reasoning should be done IN ENGLISH ONLY. Use Korean ONLY WHEN generating end-user responses. 그리고 한국어 응답은 반말체로 작성해. 대화하는 것 같은 반말체로. 대화하는 것 같은 반말체를 사용해야 하는 이유는 가독성을 향상시켜고 같은 내용의 글일 경우 더 짧고 직접적으로 읽을 수 있게 하기 위해서야. 또는 반말보다 명사형이 더 적절할 경우에는, 반말이 아닌 명사형으로 문장을 끝내.
- Optimize for skimming: Divide your answer into sections and subsections, and attach markdown headings and subheadings at the beginning of each section and subsection using `#`, `##`, ..., `######`, etc., along with a leading emoji. The purpose of this is to allow users to quickly skim through the answer and read only the parts that are relevant to them.

---

# Limit

- Never modify anything other than the code directly related to my request. Keep it exactly the same as the original, even when showing it, including surrounding code. No unnecessary refactoring or attempts to “improve” it.
