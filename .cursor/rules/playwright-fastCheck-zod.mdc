---
description: Use this when you have the opportunity to combine Playwright and fast-check with zod
globs: 
alwaysApply: false
---
# Extended Guide: Using zod-fast-check with Playwright for UI Testing

## Leveraging zod-fast-check for UI Component Testing

zod-fast-check provides a powerful bridge between your Zod schemas and property-based tests, allowing you to automatically generate valid test data based on your existing type definitions. This approach ensures your tests are both thorough and aligned with your application's data constraints.

### Basic Setup for zod-fast-check

```javascript
// tests/setup/zod-fc-setup.js
const { ZodFastCheck } = require('zod-fast-check')
const fc = require('fast-check')

/**
 * Create a configured ZodFastCheck instance with common settings
 *
 * @returns {ZodFastCheck} Configured ZodFastCheck instance
 */
function createZodFastCheck() {
	return ZodFastCheck({
		// Configure string generation
		stringArbitrary: () => fc.string({ minLength: 1, maxLength: 50 }),
		// Configure array generation
		arrayArbitrary: (arbitrary) => fc.array(arbitrary, { maxLength: 10 }),
	})
}

module.exports = { createZodFastCheck }
```

### Testing Components with Complex Props

```javascript
// tests/components/data-grid.spec.js
const { test, expect } = require('@playwright/test')
const fc = require('fast-check')
const { z } = require('zod')
const { createZodFastCheck } = require('../setup/zod-fc-setup')

// Define complex schemas matching your component props
const ColumnSchema = z.object({
	id: z.string(),
	header: z.string(),
	width: z.number().int().min(50).max(500).optional(),
	sortable: z.boolean().default(true),
})

const RowDataSchema = z.record(z.string(), z.union([z.string(), z.number(), z.boolean(), z.null()]))

const DataGridPropsSchema = z.object({
	columns: z.array(ColumnSchema).min(1),
	data: z.array(RowDataSchema),
	pagination: z.boolean().default(false),
	pageSize: z.number().int().min(5).max(100).default(10),
})

test('data grid renders correctly with various props configurations', async ({ page }) => {
	await page.goto('/component-test-page')

	const zodFc = createZodFastCheck()
	const dataGridPropsArb = zodFc.inputOf(DataGridPropsSchema)

	await fc.assert(
		fc.asyncProperty(dataGridPropsArb, async (props) => {
			// Pass props to component
			await page.evaluate((componentProps) => {
				window.renderDataGrid(componentProps)
			}, props)

			// Wait for rendering
			await page.waitForSelector('.data-grid')

			// Check column headers are rendered
			for (const column of props.columns) {
				const headerExists = await page.isVisible(`.column-header:has-text("${column.header}")`)
				if (!headerExists) return false
			}

			// Check row count
			const rowCount = await page.locator('.data-row').count()
			const expectedRows =
				props.pagination ? Math.min(props.pageSize, props.data.length) : props.data.length

			return rowCount === expectedRows
		}),
		{ numRuns: 10 },
	)
})
```

### Reusing Zod Schemas from Your Application

```javascript
// tests/components/form-validation.spec.js
const { test } = require('@playwright/test')
const fc = require('fast-check')
const { createZodFastCheck } = require('../setup/zod-fc-setup')

// Import the same schema used in your application
const { UserFormSchema } = require('../../src/schemas/user')

test('form validation handles valid and invalid data properly', async ({ page }) => {
	await page.goto('/form-test')

	const zodFc = createZodFastCheck()

	// Generate valid user data
	const validUserArb = zodFc.inputOf(UserFormSchema)

	// Generate invalid user data by modifying a valid one
	const invalidUserArb = validUserArb.chain((validUser) =>
		fc.record({
			...Object.fromEntries(
				Object.keys(validUser).map((key) => [key, fc.constant(validUser[key])]),
			),
			// Make email invalid by removing @ symbol
			email: fc.string().map((s) => s.replace(/@/g, '')),
		}),
	)

	// Test with valid data
	await fc.assert(
		fc.asyncProperty(validUserArb, async (userData) => {
			await fillUserForm(page, userData)
			await page.click('#submit-button')

			// Form should submit successfully with valid data
			return await page.isVisible('.success-message')
		}),
		{ numRuns: 5 },
	)

	// Test with invalid data
	await fc.assert(
		fc.asyncProperty(invalidUserArb, async (userData) => {
			await fillUserForm(page, userData)
			await page.click('#submit-button')

			// Form should show validation errors with invalid data
			return await page.isVisible('.validation-error')
		}),
		{ numRuns: 5 },
	)
})

async function fillUserForm(page, userData) {
	await page.fill('#name', userData.name)
	await page.fill('#email', userData.email)
	await page.fill('#age', String(userData.age))
	// Fill other fields...
}
```

### Testing UI State Transformations

```javascript
// tests/components/state-transitions.spec.js
const { test } = require('@playwright/test')
const fc = require('fast-check')
const { z } = require('zod')
const { createZodFastCheck } = require('../setup/zod-fc-setup')

// Define schema for component state
const TodoItemSchema = z.object({
	id: z.string().uuid(),
	text: z.string().min(1).max(100),
	completed: z.boolean().default(false),
	priority: z.enum(['low', 'medium', 'high']).default('medium'),
	tags: z.array(z.string()).default([]),
})

const TodoListStateSchema = z.object({
	items: z.array(TodoItemSchema),
	filter: z.enum(['all', 'active', 'completed']).default('all'),
	sortBy: z.enum(['priority', 'alphabetical', 'date']).default('date'),
})

test('todo list state transitions work correctly', async ({ page }) => {
	await page.goto('/todo-app')

	const zodFc = createZodFastCheck()
	const todoStateArb = zodFc.inputOf(TodoListStateSchema)

	// Define possible actions on the UI
	const actionArb = fc.oneof(
		fc.constant('toggleFirstItem'),
		fc.constant('changeFilter'),
		fc.constant('changeSorting'),
		fc.constant('addItem'),
	)

	await fc.assert(
		fc.asyncProperty(
			todoStateArb,
			fc.array(actionArb, { minLength: 1, maxLength: 5 }),
			async (initialState, actions) => {
				// Initialize component with state
				await page.evaluate((state) => {
					window.initTodoList(state)
				}, initialState)

				// Perform actions
				for (const action of actions) {
					switch (action) {
						case 'toggleFirstItem':
							await page.click('.todo-item:first-child .toggle-button')
							break
						case 'changeFilter':
							await page.selectOption(
								'.filter-select',
								['all', 'active', 'completed'][Math.floor(Math.random() * 3)],
							)
							break
						case 'changeSorting':
							await page.selectOption(
								'.sort-select',
								['priority', 'alphabetical', 'date'][Math.floor(Math.random() * 3)],
							)
							break
						case 'addItem':
							await page.fill('.new-todo-input', 'New todo item ' + Date.now())
							await page.click('.add-button')
							break
					}
					// Wait for UI update
					await page.waitForTimeout(50)
				}

				// Verify UI is in consistent state
				const hasItemsList = await page.isVisible('.items-list')
				const hasControls = await page.isVisible('.controls')
				return hasItemsList && hasControls
			},
		),
		{ numRuns: 8 },
	)
})
```

### Combining zod-fast-check with Visual Testing

```javascript
// tests/components/theme-switcher.spec.js
const { test } = require('@playwright/test')
const fc = require('fast-check')
const { z } = require('zod')
const { createZodFastCheck } = require('../setup/zod-fc-setup')
const pixelmatch = require('pixelmatch')
const { PNG } = require('pngjs')

// Define schema for theme configuration
const ThemeSchema = z.object({
	primaryColor: z.string().regex(/^#[0-9A-F]{6}$/i),
	secondaryColor: z.string().regex(/^#[0-9A-F]{6}$/i),
	textColor: z.string().regex(/^#[0-9A-F]{6}$/i),
	fontSize: z.number().min(12).max(24).default(16),
	spacing: z.enum(['compact', 'normal', 'loose']).default('normal'),
	roundedCorners: z.boolean().default(true),
})

test('theme switcher applies themes consistently', async ({ page }) => {
	await page.goto('/theme-test')

	const zodFc = createZodFastCheck()
	const themeArb = zodFc.inputOf(ThemeSchema)

	let referenceComponent = null

	await fc.assert(
		fc.asyncProperty(
			themeArb,
			fc.constant(1), // Using a constant to ensure we run the assertion
			async (theme, _) => {
				// Apply theme
				await page.evaluate((themeConfig) => {
					window.applyTheme(themeConfig)
				}, theme)

				// Wait for theme to apply
				await page.waitForTimeout(100)

				// Capture component
				const component = await page.locator('.themed-component').screenshot()

				// If this is our first run, save as reference
				if (!referenceComponent) {
					referenceComponent = component

					// Apply same theme again
					await page.evaluate((themeConfig) => {
						window.applyTheme(themeConfig)
					}, theme)

					// Capture again
					const secondCapture = await page.locator('.themed-component').screenshot()

					// Compare - should be identical
					const img1 = PNG.sync.read(component)
					const img2 = PNG.sync.read(secondCapture)
					const diff = new PNG({ width: img1.width, height: img1.height })

					const pixelDiff = pixelmatch(img1.data, img2.data, diff.data, img1.width, img1.height, {
						threshold: 0.1,
					})

					// Property: Same theme application should result in identical rendering
					return pixelDiff === 0
				}

				// Nothing to assert for other runs
				return true
			},
		),
		{ numRuns: 10 },
	)
})
```

### Advanced: Custom Arbitrary Mapping for Complex UI States

```javascript
// tests/components/complex-stateful.spec.js
const { test } = require('@playwright/test')
const fc = require('fast-check')
const { z } = require('zod')
const { ZodFastCheck } = require('zod-fast-check')

// Define complex nested schema
const NestedComponentSchema = z.object({
	uiState: z.object({
		expandedSections: z.array(z.string()),
		activeTab: z.number().int().min(0).max(5),
		scrollPosition: z.number().int().min(0).max(1000),
	}),
	userData: z.object({
		preferences: z.record(z.string(), z.union([z.string(), z.boolean(), z.number()])),
		history: z
			.array(
				z.object({
					action: z.string(),
					timestamp: z.number().int().positive(),
				}),
			)
			.max(20),
	}),
	contentBlocks: z
		.array(
			z.discriminatedUnion('type', [
				z.object({
					type: z.literal('text'),
					content: z.string().max(500),
				}),
				z.object({
					type: z.literal('image'),
					src: z.string().url(),
					caption: z.string().optional(),
				}),
				z.object({
					type: z.literal('form'),
					fields: z.array(
						z.object({
							id: z.string(),
							label: z.string(),
							required: z.boolean().default(false),
						}),
					),
				}),
			]),
		)
		.max(10),
})

test('complex stateful component handles various state configurations', async ({ page }) => {
	await page.goto('/complex-component')

	// Custom arbitrary mappings for specific types
	const zodFc = ZodFastCheck({
		// Custom URL generator that looks realistic
		urlArbitrary: () => fc.webUrl(),

		// Map discriminated union to make some types more frequent
		discriminatedUnionArbitrary: (mappers, discriminator) => {
			if (discriminator === 'type') {
				// Make text blocks more common than other types
				return fc.oneof(
					fc.constant('text').chain((t) => mappers.get(t)()),
					fc.constant('text').chain((t) => mappers.get(t)()),
					fc.constant('image').chain((t) => mappers.get(t)()),
					fc.constant('form').chain((t) => mappers.get(t)()),
				)
			}
			return fc.oneof(
				...Array.from(mappers.entries()).map(([k, v]) => fc.constant(k).chain((k) => v())),
			)
		},
	})

	const componentStateArb = zodFc.inputOf(NestedComponentSchema)

	await fc.assert(
		fc.asyncProperty(componentStateArb, async (state) => {
			// Initialize component with generated state
			await page.evaluate((componentState) => {
				window.initComplexComponent(componentState)
			}, state)

			// Wait for rendering to complete
			await page.waitForTimeout(100)

			// Check if component rendered without errors
			const hasErrorBoundary = await page.isVisible('.error-boundary-message')
			if (hasErrorBoundary) return false

			// Validate active tab is displayed
			const activeTabVisible = await page.isVisible(
				`.tab-panel[data-tab="${state.uiState.activeTab}"]`,
			)
			if (!activeTabVisible) return false

			// Verify content blocks are rendered
			let allBlocksRendered = true
			for (let i = 0; i < state.contentBlocks.length; i++) {
				const block = state.contentBlocks[i]
				const blockVisible = await page.isVisible(`.content-block[data-index="${i}"]`)
				if (!blockVisible) {
					allBlocksRendered = false
					break
				}
			}

			return allBlocksRendered
		}),
		{ numRuns: 5 },
	)
})
```

### Optimizing Performance with Schema Customization

```javascript
// tests/components/optimized-zod-tests.spec.js
const { test } = require('@playwright/test')
const fc = require('fast-check')
const { z } = require('zod')
const { createZodFastCheck } = require('../setup/zod-fc-setup')

// Create a more optimized version of your schema for testing
const OptimizedUserSchema = z.object({
	id: z.string().uuid(),
	username: z.string().min(3).max(20),
	email: z.string().email(),
	// Only include fields necessary for the test
	role: z.enum(['user', 'admin']).default('user'),
})

test('user profile renders efficiently across many configurations', async ({ page }) => {
	await page.goto('/user-profile')

	const zodFc = createZodFastCheck()

	// Create a fast arbitrary with simplified generation
	const fastUserArb = zodFc.inputOf(OptimizedUserSchema).map((user) => ({
		...user,
		// Pre-compute derived values to avoid regenerating in each test
		displayName: user.username.charAt(0).toUpperCase() + user.username.slice(1),
		isAdmin: user.role === 'admin',
	}))

	await fc.assert(
		fc.asyncProperty(
			fastUserArb,
			fc.boolean(), // Toggle for dark/light mode
			async (user, isDarkMode) => {
				// Set up state quickly
				await page.evaluate(
					({ userData, darkMode }) => {
						window.setUserProfileData(userData)
						window.setDarkMode(darkMode)
					},
					{ userData: user, darkMode: isDarkMode },
				)

				// Quick check of critical elements
				const usernameVisible = await page.isVisible(`.username:has-text("${user.username}")`)
				const emailVisible = await page.isVisible(`.email:has-text("${user.email}")`)

				return usernameVisible && emailVisible
			},
		),
		{ numRuns: 20 }, // We can run more tests when optimized
	)
})
```

By integrating zod-fast-check with Playwright, you can create comprehensive test suites that leverage your existing schema definitions while thoroughly testing your UI components across a wide range of valid input combinations. This approach bridges the gap between type safety and property-based testing, leading to more robust applications.
