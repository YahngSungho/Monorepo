---
description:
globs: *.js,*.ts,*.mjs,*.cjs,*.mts,*.cts,*.svelte,*.svx
alwaysApply: false
---

# Functional Programming Principles & Guidelines

FOLLOW FUNCTIONAL PROGRAMMING PRINCIPLES. USE FUNCTIONAL PROGRAMMING TECHNIQUES WHENEVER POSSIBLE.

## Core Principles

1. **Code Separation:** Clearly distinguish and manage code into the following three types:

   1. Data
   2. 계산 (= Pure Functions )
   3. 액션 (= Impure Functions, Side Effects)

	 Keep in mind that in this codebase, we call pure code "계산(computation or calculation)" and impure code "액션(action)".

2. **Preference Order:** **Data > 계산  > 액션**

   - Whenever possible, implement logic as 계산. Consider if 계산 can be represented as data.
   - Use 액션 only when necessary. Isolate 액션 by extracting as much logic as possible into 계산, minimizing and isolating the code sections with 액션.

3. **Managing 액션:**

   - **Isolation:** Manage functions containing 액션 so they are clearly identifiable (e.g., grouped in specific modules, using naming conventions).
   - **Naming:** **Consider** suffixing the names of functions with 액션 with `_action` (e.g., `updateDOM_action`, `fetchData_action`).

4. **Immutability:** Do not modify data structures (objects, arrays) directly. When changes are needed, create and return new data structures. This improves predictability and simplifies state management.

5. **Function Composition:** Build complex functionality by combining smaller, reusable functions. This enhances code reuse and helps separate logic clearly (e.g., using `R.pipe`).

6. **Currying:** A technique of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. It can improve function reusability and composition (e.g., using `R.curry`).

## Library Usage

- **Rambda / Ramda (via `@library/helpers/R`):** Utility library for functional programming.

  - **Primary Use:** Utilize the `R` object imported from `@library/helpers/R` for functional programming tasks. This export is the primary source for utility functions in this project.
  - **Import:** `import { R } from '@library/helpers/R'`
  - **Features & Philosophy:** This `R` object provides functions inspired by Rambda/Ramda, focusing on TypeScript compatibility and clarity. Key utilities like `pipe` (for composition) and `curry` (for partial application) are available. The guiding philosophy, aligned with Rambda, is to:
    - **Prioritize `R.pipe`:** Structure data transformations as a clear sequence of functions within `pipe`.
    - **Favor Simple, Obvious Functions:** Prefer functions whose behavior is clear from their name and signature. Avoid overly generic or "magic" functions that require significant context or documentation lookup (e.g., complex conditional logic handlers like `cond`/`ifElse`, or ambiguous functions like `where`/`update` if they exist in `R`). Complex logic or branching is often clearer handled outside the main pipe.
    - **Avoid Input Order Dependency:** Be mindful of functions where the order of arguments significantly changes behavior and requires memorization (like Ramda's `difference`). Prefer functions with clearer argument roles.
    - **Specific Notations (Rambda Influence):** The `R` object may offer convenient notations for certain functions, inspired by Rambda:
      - `R.path`: Allows **dot notation** (e.g., `R.path('a.b.c')`) as an alternative to array paths (`R.path(['a', 'b', 'c'])`) for accessing nested properties. Note: Use array notation for keys that are purely numeric (e.g., `['a', '1', 'b']` not `'a.1.b'`).
      - `R.pick` / `R.omit`: Allows **comma notation** (e.g., `R.pick('a,b,c', obj)`) as an alternative to array of keys (`R.pick(['a', 'b', 'c'], obj)`). Ensure there are no spaces within the comma-separated string.
  - **Usage Pattern:** Functions within `R` often follow a curried style consistent with Rambda's approach, promoting use within `R.pipe`:
    - Functions expecting 2 arguments are typically called like: `R.someFunction(arg1)(arg2)`
    - Functions expecting 3 arguments are typically called like: `R.someFunction(arg1, arg2)(arg3)`
    - This pattern facilitates partial application and composition.
  - **Example:** Use `R.pipe` for composition and `R.curry` for currying. Employ clear, single-purpose functions like `R.map`, `R.filter`, `R.prop`, `R.concat` from the `R` object within pipes. Handle complex conditional logic or side effects primarily before or after the pipe for better readability.

- **Mutative:** A library to help modify objects or arrays while maintaining immutability.

  - **When to Use:** Consider using `mutative` when Ramda doesn't provide a simple method, when the Ramda equivalent is complicated or just unpopular, or when dealing with deeply nested objects that need immutable updates.
  - **Import:** `import { create } from '@library/helpers/mutative'`
  - **Example:**

    ```javascript
    import { create } from '@library/helpers/mutative' // Path verification needed

    const baseState = { count: 0, items: [] }
    const nextState = create(baseState, (draft) => {
    	draft.count++
    	draft.items.push('new')
    })
    // baseState remains unchanged
    ```

## Practical Examples

### Example 1: State Update with Immutability

```javascript
// Before (mutation)
function addItem_action(cart, item) {
	// Assume calculateTotal exists and is 계산
	cart.items.push(item) // Side effect: modifies original array
	cart.total = calculateTotal(cart.items) // Side effect: modifies original object
	return cart
}

// After (immutability + 계산)
import { R } from '@library/helpers/R' // Example using Ramda

// Assume calculateTotal exists and is 계산, e.g.:
const calculateTotal = (items) => R.sum(R.pluck('price', items || []))

const addItem = (cart, item) => {
	const currentItems = cart.items || []
	const newItems = R.append(item, currentItems) // Creates a new array using R from @library/helpers/R
	return {
		// Creates a new object
		...cart, // Copy existing properties
		items: newItems,
		total: calculateTotal(newItems), // Uses 계산 with R functions
	}
}

// Example Usage:
// const cart1 = { items: [{ name: 'apple', price: 1 }], total: 1 }
// const item1 = { name: 'banana', price: 2 }
// const cart2 = addItem(cart1, item1)
// console.log(cart1) // { items: [{ name: 'apple', price: 1 }], total: 1 } (unchanged)
// console.log(cart2) // { items: [{ name: 'apple', price: 1 }, { name: 'banana', price: 2 }], total: 3 }
```

### Example 2: Data Processing with Function Composition

```javascript
// Before (imperative)
// Assume fetchUser_action(userId) performs a side effect (e.g., API call)
// Assume formatName(name) is a 계산
function processUserData_action(userId) {
	try {
		const user = fetchUser_action(userId) // Side effect
		if (user && user.isActive) {
			const formattedName = formatName(user.name) // 계산 call
			console.log(`Active user: ${formattedName}`) // Side effect
			return formattedName // Returns data but also had 액션
		}
		return null
	} catch (error) {
		console.error('Failed to process user data:', error) // Side effect (error logging)
		return null
	}
}

// After (function composition + Maybe concept)
import { R } from '@library/helpers/R'

// Assume fetchUser_action exists
// Assume formatName exists, e.g., const formatName = (name) => String(name).toUpperCase()

// Function returning a Maybe-like result (conceptual example using simple object)
const fetchActiveUser = (userId) => {
	try {
		const user = fetchUser_action(userId) // Side effect is isolated here
		// Return a consistent structure indicating success/failure or value presence
		return user && user.isActive ? { type: 'Just', value: user } : { type: 'Nothing' }
	} catch (error) {
		console.error('fetchActiveUser failed:', error) // Keep error side effect contained if desired
		return { type: 'Nothing' } // Represent failure as Nothing
	}
}

// Helper to work with our Maybe-like structure
const mapMaybe = R.curry((fn, maybe) =>
	maybe.type === 'Just' ? { type: 'Just', value: fn(maybe.value) } : maybe,
)

const logUserInfo = R.pipe(
	fetchActiveUser, // userId => Maybe<User>
	mapMaybe(R.prop('name')), // Maybe<User> => Maybe<string> (Clear purpose: get 'name')
	mapMaybe(formatName), // Maybe<string> => Maybe<string> (Clear purpose: format)
	// Final step: Handle the outcome. Conditional logic/side effect outside the main transformation pipe.
	(maybeFormattedName) => {
		if (maybeFormattedName.type === 'Just') {
			console.log(`Active user: ${maybeFormattedName.value}`);
		}
		return maybeFormattedName;
	}
)

// Example Usage:
// logUserInfo(123) // Side effect (logging or nothing) occurs upon execution
```

## Style Guide

- **Function Composition:** Use `R.pipe` (left-to-right) from `@library/helpers/R` to build clear, sequential data transformations. Pass the initial data first, followed by focused, single-purpose functions. Avoid embedding complex conditional logic (e.g., `ifElse`, `cond`) or functions with unclear side effects directly within pipes. Handle conditions and side effects primarily before or after the pipe, or by refactoring the flow into separate, clear steps.

  ```javascript
  import { R } from '@library/helpers/R';

  const numbers = [1, 2, 3, 4, 5];

  // Example: Filter numbers greater than 2, then multiply each by 10
  const processNumbers = R.pipe(
  	numbers, // Initial data
  	R.filter((x) => x > 2), // Function 1 (assuming Rambda-style currying: R.filter(predicate)(data))
  	R.map((x) => x * 10)     // Function 2 (assuming Rambda-style currying: R.map(fn)(data))
  );
  // processNumbers will be [30, 40, 50]
  console.log(processNumbers);
  ```

- **Naming:** Use clear names that reveal the function's role. 계산 should indicate the relationship between input and output (e.g., `calculateTotal`, `formatUserName`). Functions with 액션 should indicate what effect they cause (e.g., `saveUser_action`, `logMessage_action`), especially if not immediately obvious from context.
- **Conciseness:** Avoid unnecessary abstractions or overly complex functional techniques where simpler imperative or object-oriented approaches are more readable and maintainable. Functional programming is a tool, not a dogma. Prioritize clarity using the utilities provided by `R` from `@library/helpers/R`. Favor simple, obvious functions over complex or ambiguous ones, especially within `pipe`.
