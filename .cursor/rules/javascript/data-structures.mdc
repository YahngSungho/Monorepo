---
description:
globs:
alwaysApply: false
---

# Functional Data Structure Concepts

In this codebase, 'Functor', 'Monad', 'Monoid' are simulated using class structures, sometimes referred to as 'Functor Class', 'Monad Class', or 'Monoid Class'.

## Guidelines for choosing the appropriate structure

- For Class-like data structures encapsulating a value: Consider using a **Functor Class**.
- For nestable or chainable computations, especially when dealing with context (e.g., potential absence of value, 액션) where basic Array/Object structures are insufficient: Consider using a **Monad Class**.
- For combining or aggregating values of the same type, particularly when a neutral "empty" value exists and basic Array/Object combination is insufficient: Consider using a **Monoid Class**.

## Examples

The code examples provided below illustrate how such classes could be structured to simulate these concepts. They are generic examples intended solely to illustrate these ideas.

### Functor Class Concept Example

"Functor Class" implements immutability and a static constructor (`of`), using regular methods to operate on the internal value instead of strictly requiring a `map` method as in the formal definition.

```javascript
// Example: A simple Functor implementation concept (as per rule's description)
class MyFunctor {
	constructor(value) {
		this._value = value // Use underscore for internal value convention
	}

	// 'of' is a common way to put a value into the Functor context
	static of(value) {
		return new MyFunctor(value)
	}

	// Instead of map, we use regular methods that return new instances
	// This method operates on the internal value and returns a new MyFunctor
	add(newValue) {
		// Returns a new MyFunctor instance, doesn't modify the original
		return MyFunctor.of(this._value + newValue)
	}

	// A way to extract the value if needed
	getValue() {
		return this._value
	}

	// Another example immutable method
	multiply(factor) {
		return MyFunctor.of(this._value * factor)
	}
}
```

### Monad Class Concept Examples

Monads typically provide a way to `chain` computations within a context or `join` nested contexts.

```javascript
// Example: Maybe Monad concept
class Maybe {
	get isJust() {
		return !this.isNothing
	}
	get isNothing() {
		return this.$value === null || this.$value === undefined
	}

	constructor(x) {
		this.$value = x
	}
	static of(x) {
		return new Maybe(x)
	} // Pointed

	// Example for Applicative Functor (optional concept)
	ap(f) {
		// f should be a Maybe containing a function
		return this.isNothing || !(f instanceof Maybe) || f.isNothing ?
				Maybe.of(null)
			:	this.map(f.$value)
	}

	chain(fn) {
		// Monad part - map then join
		// The function 'fn' should return a Maybe
		return this.map(fn).join()
	}

	getOrElse(defaultValue) {
		return this.isNothing ? defaultValue : this.$value
	}

	join() {
		// Monad part - removes one level of nesting
		return this.isNothing ? this : this.$value
	}

	map(fn) {
		// Functor part
		return this.isNothing ? this : Maybe.of(fn(this.$value))
	}

	// Example for logging/inspection
	[Symbol.for('nodejs.util.inspect.custom')]() {
		// For Node.js inspect
		return this.isNothing ? 'Nothing' : (
				`Just(${typeof this.$value === 'function' ? this.$value : JSON.stringify(this.$value)})`
			)
	}
	toString() {
		// Fallback toString
		return this.isNothing ? 'Nothing' : `Just(${this.$value})`
	}
}

// Example: IO Monad concept
class IO {
	constructor(fn) {
		if (typeof fn !== 'function') {
			throw new TypeError('IO requires a function')
		}
		// The function fn represents the effectful computation
		this.unsafePerformIO = fn
	}
	static of(x) {
		return new IO(() => x)
	} // Pointed

	// Example for Applicative Functor (optional concept)
	ap(f) {
		// f should be an IO containing a function
		return this.chain((value) => f.map((fn) => fn(value)))
	}

	chain(fn) {
		// Monad part
		// fn must return an IO instance
		// Equivalent to map(fn).join()
		return IO.of(() => {
			const value = this.unsafePerformIO()
			const nextIO = fn(value)
			if (!(nextIO instanceof IO)) {
				throw new TypeError('Cannot chain: Function did not return an IO instance.')
			}
			return nextIO.unsafePerformIO()
		})
		// Or conceptually: return this.map(fn).join()
	}

	join() {
		// Monad part
		// Returns a IO.of that performs the outer IO to get the inner IO, then performs the inner IO
		// Requires the result of the outer IO to be another IO instance
		return IO.of(() => {
			const innerIO = this.unsafePerformIO()
			if (!(innerIO instanceof IO)) {
				throw new TypeError('Cannot join: Outer IO did not return an IO instance.')
			}
			return innerIO.unsafePerformIO()
		})
	}

	map(fn) {
		// Functor part
		// Creates a new IO where the effect is composed: perform original IO, then apply fn
		return IO.of(compose(fn, this.unsafePerformIO))
	}

	// Example for logging/inspection
	[Symbol.for('nodejs.util.inspect.custom')]() {
		return 'IO(?)'
	}
	toString() {
		return 'IO(?)'
	}

	// Execution is separate and explicitly marked as "unsafe"
	// const result = ioInstance.unsafePerformIO()
}
```

### Monoid Class Concept Example

A Monoid provides a way to `concat` two values of the same type and has an `empty` value (identity element).

```javascript
// Example: List Monoid concept
class List {
	constructor(xs) {
		this.$value = Array.isArray(xs) ? xs : []
	}
	// Monoid part:
	static empty() {
		return List.of([])
	} // Identity element

	static of(x) {
		return new List(x === undefined || x === null ? [] : [x])
	} // Pointed
	concat(otherList) {
		// Binary operation
		// Ensure the argument is a List instance for safety and extract its value
		const otherValue = otherList instanceof List ? otherList.$value : []
		return List.of(this.$value.concat(otherValue))
	}

	// Functor part:
	map(fn) {
		return List.of(this.$value.map(fn))
	}

	// Example for logging/inspection
	[Symbol.for('nodejs.util.inspect.custom')]() {
		return `List(${this.$value.map((v) => (typeof v === 'function' ? v : JSON.stringify(v))).join(', ')})`
	}
	toString() {
		return `List(${this.$value})`
	}
	// ... other potential methods like sequence, traverse (more advanced concepts) ...
}
```
