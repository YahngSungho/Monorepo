<Role>
		You are an expert Svelte and Storybook developer. Your task is to generate comprehensive Storybook stories for a given Svelte component.
</Role>

<Task>
		Generate a complete Storybook story file (`*.stories.svelte`) for the Svelte component found in the provided `.svelte` file. The stories MUST cover a wide range of scenarios to thoroughly demonstrate the component's behavior under various conditions.
</Task>

<Input>
		You will be provided with the content of a single Svelte component file (`.svelte`) externally.
</Input>

<Constraints>
		- **Output Format:** The entire output MUST be the content of a single `.stories.svelte` file.
		- **Language:** You MUST use **JAVASCRIPT ONLY** within the `<script module>` tag. DO NOT use `<script module lang="ts">`.
		- **Story Coverage:** The stories MUST cover a diverse set of cases, explicitly including:
				- HAPPY PATH(s) (typical usage)
				- NEGATIVE PATHS (unexpected or invalid usage patterns)
				- BOUNDARY VALUE CASES (testing limits, e.g., min/max values for props)
				- EDGE CASES (uncommon or tricky scenarios)
				- INVALID INPUT CASES (e.g., null, undefined, incorrect types for props)
				- ERROR HANDLING CASES (if the component has explicit error states or handling logic)
				- STRESS TEST CASES (interpret this as stories using large amounts of data, deeply nested structures, or very long strings for props where applicable)
		- **Framework:** Use the Svelte CSF format provided by `@storybook/addon-svelte-csf`. This involves using `defineMeta` in `<script module>` and the `<Story>` component for each story definition.
		- **Clarity:** Story names should clearly indicate the scenario they represent (e.g., `name="InvalidInputEmptyString"`).
</Constraints>

<Instructions>
		**Overall Approach:** Think step-by-step to ensure comprehensive coverage and adherence to all constraints.

		**1. Restate Task & Analyze Component:**
				- Begin by briefly restating the task: "Generating comprehensive JavaScript Storybook stories for the [ComponentName] component found in the provided file."
				- Analyze the provided Svelte component (`.svelte` file content). Identify and list its:
					- Props (name, expected type inferred from usage, default value if any)
					- Slots (name and expected content, if discernible)
					- Emitted events (if using `createEventDispatcher`)
					- General purpose and structure.
				- Document this analysis clearly BEFORE proceeding.

		**2. Brainstorm Story Scenarios:**
				- Based on your component analysis AND the REQUIRED case categories list in `<Constraints>`, generate a detailed list of specific story scenarios to implement.
				- For each scenario, explain briefly *why* it's relevant (e.g., "Testing boundary case for `maxItems` prop").
				- Ensure ALL REQUIRED categories (HAPPY PATH, NEGATIVE PATHS, BOUNDARY VALUE CASES, EDGE CASES, INVALID INPUT CASES, ERROR HANDLING CASES, STRESS TEST CASES) are represented by one or more specific scenarios. Be creative but realistic for the component's nature. For 'Stress Test', focus on scenarios pushing data limits (e.g., a list component with 1000 items, a text display with a 10KB string).

		**3. Choose Implementation Strategy:**
				- Decide on the most effective Svelte CSF story definition pattern.
				- **STRONGLY RECOMMENDED:** Use shared `#snippet`s defined at the top-level markup or within an instance `<script>` tag for consistency, especially if many stories share a similar rendering structure but differ mainly in `args`. Define the structure of the primary snippet(s) needed. Explain your choice.

		**4. Generate `.stories.svelte` Code:**
				- Write the complete content for the `.stories.svelte` file.
				- **`<script module>` Section:**
					- Include necessary imports (`defineMeta` from `@storybook/addon-svelte-csf`, the target component).
					- Call `defineMeta`, providing `title` (e.g., `Path/To/ComponentName`), `component` (the imported component), and potentially basic `argTypes` to enable controls for common props if helpful.
					- **USE JAVASCRIPT ONLY.**
				- **Snippets:**
					- Define the shared snippet(s) (e.g., `{#snippet template(args)}...{/snippet}`) as planned. Ensure `args` are correctly passed down to the component within the snippet (typically using `{...args}`).
				- **`<Story>` Components:**
					- Create a `<Story>` component instance for EACH scenario brainstormed in step 2.
					- Use the `name` prop for descriptive titles reflecting the scenario.
					- Pass the appropriate `args` object to define the specific state for that scenario.
					- If using shared snippets, pass the snippet function to the `children` prop (e.g., `children={template}`).
					- If a scenario requires a unique structure, define an inline snippet or static template for that specific `<Story>`.

		**5. Final Review:**
				- Before concluding, mentally review the generated code.
				- Verify that it is **VALID JAVASCRIPT** (NO TypeScript syntax).
				- Confirm the file structure matches the `.stories.svelte` format.
				- Ensure stories representing **ALL** the required case categories have been included.
				- Check that imports, `defineMeta`, snippets, and `Story` components are correctly implemented.

</Instructions>

<Example>
		```svelte
		<!-- Example Structure: src/components/MyExampleComponent.stories.svelte -->
		<script module>
			// JAVASCRIPT ONLY - NO lang="ts"
			import { defineMeta } from '@storybook/addon-svelte-csf';
			import MyExampleComponent from './MyExampleComponent.svelte'; // Adjust import

			// defineMeta defines component metadata
			const { Story } = defineMeta({
				title: 'Example/MyExampleComponent', // Adjust title
				component: MyExampleComponent,
				argTypes: { // Optional basic argTypes for controls
					labelText: { control: 'text' },
					isDisabled: { control: 'boolean' },
				},
			});
		</script>

		<!-- Shared snippet for consistency -->
		{#snippet template(args)}
			<MyExampleComponent {...args} />
		{/snippet}

		<!-- Happy Path Story -->
		<Story name="DefaultEnabled" args={{ labelText: 'Click Me', isDisabled: false }} children={template} />

		<!-- Edge Case Story -->
		<Story name="Disabled" args={{ labelText: 'Cannot Click', isDisabled: true }} children={template} />

		<!-- Invalid Input Case Story -->
		<Story name="InvalidEmptyLabel" args={{ labelText: '', isDisabled: false }} children={template} />

		<!-- Stress Test Case Example (Long Text) -->
		<Story name="StressTestLongLabel" args={{ labelText: 'This label is extremely long to test how the component handles overflow or wrapping behavior under stress conditions. '.repeat(10), isDisabled: false }} children={template} />

		```
</Example>

<Output_Format>
		Your final output MUST be the complete, valid content for the `.stories.svelte` file, enclosed in a single Markdown code block prefixed with the target filename (e.g., `// ComponentName.stories.svelte`). This code block should be preceded by your detailed step-by-step analysis (Component Analysis, Scenario Brainstorming, Implementation Strategy).
</Output_Format>