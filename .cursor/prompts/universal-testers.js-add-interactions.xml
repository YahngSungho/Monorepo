<Original_Prompt_Analysis>
    <Goal>The Original Prompt is a detailed markdown document serving as a guide for developers. Its primary objective is to explain the step-by-step process for adding new user interaction types (e.g., `doubleClick`, `dragDrop`) to the `storybook/e2e/universal-testers.js` file.</Goal>
    <Intent>The intent is educational and procedural: to ensure developers understand the existing testing framework (Playwright + fast-check for PBT), follow a specific methodology for adding new interactions, and critically, maintain the integrity of the fast-check "shrinking" mechanism, which is vital for debugging failed property-based tests.</Intent>
    <Inputs>The guide implicitly requires the developer (or an LLM acting as one) to have access to the `universal-testers.js` file, understand JavaScript, Playwright API, fast-check concepts (Arbitrary, shrinking), and the specific structure of the existing testing functions (`discoverInteractions`, `getInteractionsFromElementInfo`, `executeInteractionByType`, `createInteractionSequenceArbitrary`, `_getValueArbitraryForType`). It also requires knowledge of the *new* interaction type to be added (its name, logic, parameters).</Inputs>
    <Constraints>
        - Modifications must follow a precise 4-step process: 1. Update `Interaction` type (if needed), 2. Modify discovery logic (`getInteractionsFromElementInfo`), 3. Implement execution logic (`executeInteractionByType`), 4. Integrate into fast-check arbitrary generation (`createInteractionSequenceArbitrary`).
        - **CRITICAL**: The fast-check shrinking mechanism MUST be preserved. This involves using specific patterns in `createInteractionSequenceArbitrary` depending on whether the interaction involves a shrinkable *value* (like text input) or just an *action* on a target element (like click). The guide details these patterns (`fc.nat`+`fc.record`+`fc.map` vs. `for`+`_getValueArbitraryForType`+`fc.tuple`+`fc.map`).
        - Code additions must handle Playwright's asynchronous nature, use appropriate timeouts, and include robust error handling within the execution step.
        - The provided `doubleClick` example logic (implicitly contained within the guide's steps/explanations) should be used as a template.
        - User's custom instructions add constraints: Use KOREAN for comments/text, use JSDoc (not TypeScript) in JS files, only modify relevant code, show output with context.
    </Constraints>
    <Ambiguities_and_Difficulties>
        - Translating the explanatory guide content into a self-contained, actionable prompt requires careful restructuring and embedding of detailed information without making the prompt overwhelming.
        - The concept of fast-check shrinking and the specific patterns to maintain it are complex and crucial. The Action Prompt must convey these requirements unambiguously and provide the necessary patterns directly.
        - The LLM needs to correctly identify and modify multiple functions within `universal-testers.js` based *only* on the instructions within this prompt.
        - The prompt needs to handle the fact that the specific *new* interaction to be added isn't defined internally; this needs to be treated as an input parameter.
    </Ambiguities_and_Difficulties>
    <Internal_RaR>The task is to create a *self-contained* prompt that instructs an LLM to modify the `universal-testers.js` file to add a new, user-specified interaction type. The LLM must meticulously follow the 4-step process, applying the critical fast-check shrinking patterns (which will be provided *within* this prompt), using the logic exemplified by `doubleClick` (also described within the prompt) as a reference. The LLM must adhere to all coding standards (JSDoc, Korean comments) and output constraints. No external guide file is available.</Internal_RaR>
</Original_Prompt_Analysis>

<Relevant_Data_Summary>
    - **`universal-testers.js-add-interactions.md` (Original Prompt/Guide):** All relevant information from this guide needs to be extracted and embedded into the Action Prompt. Key elements include:
        - The 4-step methodology (Type, Discovery, Execution, Arbitrary).
        - Explanations of the existing functions and their roles (`discoverInteractions`, `getInteractionsFromElementInfo`, `executeInteractionByType`, `createInteractionSequenceArbitrary`, `_getValueArbitraryForType`).
        - The critical explanation of fast-check shrinking and its importance.
        - The **explicit code patterns** for implementing arbitraries in `createInteractionSequenceArbitrary` to preserve shrinking for both value-less and value-based interactions.
        - The logic/code snippets demonstrating how `doubleClick` was implemented across the 4 steps.
        - Warnings about async timing, Playwright waits, error handling.
        - Best practices (minimize filter/chain).
    - **`meta-prompt.xml`:** Same relevance as before (output structure, technique documentation, constraints).
    - **User Custom Instructions:** Same relevance as before (Korean, JSDoc, output format, modify only relevant).
    - **`universal-testers.js` (Attached File):** The target file for modification. The prompt needs to accurately describe the structure and purpose of the functions within this file that the LLM will modify.
</Relevant_Data_Summary>

<Action_Prompt_Plan>
    <Goal>To generate a *self-contained* Action Prompt that instructs an LLM to modify `universal-testers.js` to add a new user interaction type, embedding all necessary methodology, code patterns, and examples directly within the prompt.</Goal>
    <Techniques>
        - **Role Persona:** Same as before.
        - **Rephrase and Respond (RaR) (for final LLM):** Same as before.
        - **Structured Steps / CoT:** Same 4-step process, but instructions for each step will now include more detailed explanations and code examples extracted from the guide.
        - **Embedded Explanations & Examples:** Key concepts (like shrinking) and the `doubleClick` logic will be explained directly within the prompt's instructions. Crucial code patterns for arbitrary generation will be presented verbatim.
        - **Code Pattern Application:** Same emphasis, but the patterns will be provided *inside* the prompt.
        - **Emphasis (ALL CAPS):** Same usage for critical instructions.
        - **Parameterization:** Same `{NEW_INTERACTION_DETAILS}` placeholder.
        - **Output Formatting:** Same specific output format requirements.
        - **Self-Contained Structure:** Remove reliance on the external guide file. Add background context about the framework and shrinking within the prompt.
    </Techniques>
    <Action_Output_Format>Same as before: Modified code blocks with Korean comments, JSDoc, context lines, and `// 파일명` headers.
    </Action_Output_Format>
    <Action_Prompt_Structure>
        1.  `<Role>`: Define the expert role.
        2.  `<Task>`: State the main goal - modify `universal-testers.js` to add a new interaction defined by `{NEW_INTERACTION_DETAILS}`.
        3.  `<Input_Parameter>`: Define `{NEW_INTERACTION_DETAILS}`. Instruct LLM to request if missing.
        4.  `<Background_Context>`: Explain the purpose of `universal-testers.js` (PBT for Storybook using Playwright & fast-check). Briefly describe the key functions involved (`discoverInteractions`, `getInteractionsFromElementInfo`, `executeInteractionByType`, `createInteractionSequenceArbitrary`, `_getValueArbitraryForType`). **Explain the concept and CRITICAL IMPORTANCE of fast-check shrinking** for debugging PBT failures.
        5.  `<Mandatory_Verification_Step>`: Same RaR step for the LLM.
        6.  `<Core_Methodology>`: Mandate the 4-step process.
        7.  `<Step_Instructions>`: Detail requirements for each step, **embedding necessary explanations and code patterns from the guide**.
            -   **Step 1 (Type):** Update `Interaction` JSDoc typedef if needed. Include the existing typedef structure for reference.
            -   **Step 2 (Discovery):** Explain `getInteractionsFromElementInfo`'s role (evaluates elements, checks tags/attrs/roles, generates `Interaction` objects). Instruct to add logic based on `discoveryLogic`. Provide the structural example for adding `doubleClick` *within* this instruction.
            -   **Step 3 (Execution):** Explain `executeInteractionByType` (switch statement, Playwright actions). Instruct to add a `case` for the new type, use Playwright actions from `executionLogic`, include timeouts, robust `try...catch`, and Korean messages. Provide the structural example for the `doubleClick` case *within* this instruction. Include warnings about async issues and recommend explicit waits (`locator.waitFor`, `expect().toBeVisible`).
            -   **Step 4 (Arbitrary):** Explain `createInteractionSequenceArbitrary`'s role (generating random sequences for PBT). **CRITICAL:** Explain the need to preserve shrinking. **Provide the EXACT code patterns** for both value-less and value-based interactions *within* this instruction. Instruct to choose the correct pattern based on `takesValue`. Explain *why* the patterns work (target shrinking vs. value shrinking). Reference `doubleClick` as using the value-less pattern and `fill`/`select` as using the value-based pattern. Explain the role of `_getValueArbitraryForType`. Warn against complex arbitraries.
        8.  `<Output_Constraints>`: Same requirements (code blocks, comments, context, KOREAN, JSDoc, modify only relevant).
    </Action_Prompt_Structure>
</Action_Prompt_Plan>

<Generated_Action_Prompt>
```xml
<Action_Prompt>
    <Role>
        You are an expert JavaScript developer specializing in automated testing with Playwright and property-based testing (PBT) with fast-check. You are meticulous, follow instructions precisely, and are skilled at modifying complex testing frameworks while preserving core functionalities like test shrinking. You are proficient in Korean.
    </Role>

    <Task>
        Your primary task is to modify the `storybook/e2e/universal-testers.js` file to add support for a NEW user interaction type. You will be given details about this new interaction. You MUST follow the methodology, code patterns, and constraints outlined within this prompt precisely. This prompt is self-contained; no external guide is needed.
    </Task>

    <Input_Parameter>
        <Name>{NEW_INTERACTION_DETAILS}</Name>
        <Description>You need the details of the new interaction to add. This MUST include:
            1.  `interactionType`: The unique string identifier for the new interaction (e.g., 'dragDrop', 'customKeyPress').
            2.  `takesValue`: A boolean indicating if this interaction requires a dynamically generated value (like 'fill' or 'select') or is just an action (like 'click' or 'doubleClick').
            3.  `discoveryLogic`: A clear description of the conditions under which this interaction should be discovered by `getInteractionsFromElementInfo` (e.g., "elements with `data-draggable='true'`", "input elements of type 'date'").
            4.  `executionLogic`: A description of how to perform the interaction using Playwright actions (e.g., "use `locator.dragTo(targetLocator)`", "use `locator.press('Enter')`").
            5.  `requiredTypedefFields` (Optional): Any new fields needed in the `Interaction` JSDoc typedef (e.g., `targetSelector` for dragDrop).
        </Description>
        <Action>IF `{NEW_INTERACTION_DETAILS}` are not provided in the request, you MUST explicitly ask the user to provide them before proceeding.</Action>
    </Input_Parameter>

    <Background_Context>
        <FileToModify> `storybook/e2e/universal-testers.js` </FileToModify>
        <Framework_Overview>
            - The `universal-testers.js` file implements a framework for Property-Based Testing (PBT) on Storybook UI components using Playwright for browser automation and fast-check for generating random test inputs (interaction sequences).
            - Key functions involved:
                - `discoverInteractions`: Scans the component in the browser to find all potential interactive elements and their properties.
                - `getInteractionsFromElementInfo`: Determines possible `Interaction` objects (like `{type: 'click', selector: '...'}`) for each discovered element based on its tag, type, role, etc.
                - `executeInteraction`: Takes a single `Interaction` object and attempts to perform it on the page using Playwright. Handles visibility/state checks and basic error catching.
                - `executeInteractionByType`: Called by `executeInteraction`; contains a `switch` statement to call the correct Playwright action (e.g., `page.click`, `locator.fill`) based on the `interaction.type`.
                - `createInteractionSequenceArbitrary`: The core of the PBT generation. Uses fast-check (`fc`) to define how to randomly generate sequences of `Interaction` objects based on those discovered. This function MUST be modified carefully.
                - `_getValueArbitraryForType`: A helper for `createInteractionSequenceArbitrary` that provides fast-check "Arbitraries" for generating and shrinking different types of values (strings, numbers, emails, options from a list).
        </Framework_Overview>
        <Critical_Concept_FastCheck_Shrinking>
            - **WHAT IT IS**: When a PBT test fails with a complex input (e.g., a long sequence of interactions, a long random string), fast-check automatically tries to find the *simplest possible input* that still causes the failure. This is called "shrinking". For example, it might reduce a 10-step interaction sequence that fails down to the single 1 or 2 interactions that are the root cause. It might reduce a failing long text input to an empty string or a single character.
            - **WHY IT'S CRITICAL**: Shrinking makes debugging PBT failures manageable. Without effective shrinking, identifying the root cause of a failure in a random sequence would be extremely difficult.
            - **YOUR RESPONSIBILITY**: When adding a new interaction, you MUST ensure that the way you integrate it into `createInteractionSequenceArbitrary` (Step 4) allows fast-check to shrink effectively for both the *target* of the interaction and any *value* it might use. **FAILURE TO PRESERVE SHRINKING SEVERELY DAMAGES THE UTILITY OF THIS TESTING FRAMEWORK.**
        </Critical_Concept_FastCheck_Shrinking>
    </Background_Context>

    <Mandatory_Verification_Step>
        <Instruction>BEFORE generating any code modifications, you MUST:
            1. Restate the specific `interactionType` you are adding based on `{NEW_INTERACTION_DETAILS}`.
            2. Confirm whether it `takesValue` (True/False).
            3. Briefly list the 4 core steps you will follow (Type Def, Discovery, Execution, Arbitrary).
            4. List the specific functions within `universal-testers.js` you plan to modify for each step.
            5. Acknowledge the critical constraints: PRESERVING SHRINKING, using KOREAN comments/text, JSDOC types ONLY, and adhering to the output format.
        </Instruction>
        <Purpose>This step ensures you have correctly understood the task and the requirements before proceeding.</Purpose>
    </Mandatory_Verification_Step>

    <Core_Methodology>
        <Instruction>You MUST implement the new interaction by following this 4-step process IN SEQUENCE.</Instruction>
        <Steps>
            <Step_1>Update Type Definition (if necessary)</Step_1>
            <Step_2>Modify Interaction Discovery Logic</Step_2>
            <Step_3>Implement Interaction Execution Logic</Step_3>
            <Step_4>Integrate into Fast-check Arbitrary Generation (CRITICAL)</Step_4>
        </Steps>
    </Core_Methodology>

    <Step_Instructions>
        <Step_1_Type>
            <Target>JSDoc `@typedef Interaction` at the top of `universal-testers.js`.</Target>
            <Instruction>If `{NEW_INTERACTION_DETAILS}` specifies `requiredTypedefFields`, add them to the `Interaction` `@typedef` using JSDoc syntax. If no new fields are needed, skip this step's modification.
            ```javascript
            // Reference Structure:
            /**
             * 인터랙션 타입 정의
             * @typedef {Object} Interaction
             * @property {string} type - 인터랙션 타입 (click, fill, select 등)
             * @property {string} selector - 대상 요소의 셀렉터
             * @property {any} [value] - 인터랙션에 필요한 값 (fill, select 등에 사용)
             * // ... other existing fields ...
             * @property {string} [newField] - // 필요한 새 필드 추가 (JSDoc 사용)
             */
            ```
            </Instruction>
        </Step_1_Type>

        <Step_2_Discovery>
            <TargetFunction>`getInteractionsFromElementInfo`</TargetFunction>
            <Explanation>This function receives information about a single HTML element found within the component (`elementInfo`) and decides which interactions are possible for it. It checks `elementInfo.tagName`, `elementInfo.type`, `elementInfo.role`, `elementInfo.disabled`, etc.</Explanation>
            <Instruction>Based on the `discoveryLogic` from `{NEW_INTERACTION_DETAILS}`, add conditional logic (e.g., `if (elementInfo.tagName === '...' && elementInfo.hasAttribute('...'))`) within this function. When the condition is met, `push` a new `Interaction` object onto the `interactions` array. Ensure the object has the correct `type` (your new `interactionType`), `selector`, and any other required fields defined in Step 1.
            ```javascript
            // Example Structure (like adding 'doubleClick' for buttons):
            function getInteractionsFromElementInfo(elementInfo) {
                const interactions = [];
                const { tagName, selector, role, disabled /*, ... other properties */ } = elementInfo;

                if (disabled) return [];

                // ... existing logic for other types ...

                // Add logic for the NEW interaction type here:
                // Example based on discoveryLogic: "if element is a button"
                if (tagName === 'button' || role === 'button') {
                    // Add the new interaction
                    // Make sure not to add duplicates if logic overlaps
                    if (!interactions.some(i => i.type === '{NEW_INTERACTION_DETAILS.interactionType}' && i.selector === selector)) {
                       interactions.push({
                           type: '{NEW_INTERACTION_DETAILS.interactionType}',
                           selector: selector
                           // Add other required fields if defined in Step 1
                       });
                       // console.log(`[Interaction Discovery] Added '{NEW_INTERACTION_DETAILS.interactionType}' for: ${selector}`); // 디버깅용 로그 (한국어)
                    }
                }

                return interactions;
            }
            ```
            </Instruction>
        </Step_2_Discovery>

        <Step_3_Execution>
            <TargetFunction>`executeInteractionByType`</TargetFunction>
            <Explanation>This function receives an `Interaction` object and uses a `switch` statement based on `interaction.type` to execute the corresponding Playwright action. It's called within `executeInteraction` which already handles locator creation and initial visibility/disabled checks, but it's good practice to be robust here too.</Explanation>
            <Instruction>Add a new `case` to the `switch` statement for your `interactionType`.
                - Implement the interaction using the Playwright actions described in `executionLogic`. Use `page.locator(interaction.selector)` to get the element locator.
                - **CRITICAL**: WRAP the specific Playwright action call(s) (e.g., `locator.dblclick()`, `locator.dragTo()`) inside a `try...catch` block within your `case`.
                - Set appropriate `timeout` options on Playwright actions (e.g., `{ timeout: 5000 }`).
                - In the `try` block, after successful execution, set `result.message = '실행 성공 메시지 (한국어)'`.
                - In the `catch (actionError)` block:
                    - Log the error using `console.error` (한국어 메시지 포함).
                    - Set `result.errorMessage = \`{interactionType} 실패: $\{actionError.message}\``.
                    - Set `result.errorStack = actionError.stack;`.
                    - Set `result.error = actionError;`.
                    - Set `result.success = false;`.
                    - **`return;`** // IMPORTANT: Exit the function immediately after handling the error in the catch block.
                - If the `try` block completes without error, the `result.success = true;` line after the `switch` statement will handle marking it as successful.
                - Add a `break;` at the end of your `case`.
            ```javascript
            // Example Structure (like adding 'doubleClick'):
            async function executeInteractionByType(page, interaction, result) {
                try {
                    switch (interaction.type) {
                        // ... existing cases ...

                        case '{NEW_INTERACTION_DETAILS.interactionType}': {
                            const locator = page.locator(interaction.selector);
                            try {
                                // --- Implement executionLogic using Playwright ---
                                // Example: await locator.dblclick({ timeout: 5000 });
                                await locator.{PLAYWRIGHT_ACTION}({/* options, timeout */});
                                // -------------------------------------------------
                                result.message = '{한국어 성공 메시지}'; // 예: '더블 클릭'
                            } catch (actionError) {
                                console.error(`{interactionType} 액션 실패 (${interaction.selector}): ${actionError.message}`);
                                result.errorMessage = `{interactionType} 실패: ${actionError.message}`;
                                result.errorStack = actionError.stack;
                                result.error = actionError;
                                result.success = false;
                                return; // Exit on action error
                            }
                            break; // End of case
                        }

                        default:
                            // ... existing default case ...
                    }
                    // If no error occurred in the case block, mark as successful
                    result.success = true;
                } catch (error) {
                   // General error handling (less likely to be hit if cases handle errors)
                   // ... existing catch block ...
                   result.success = false;
                }
            }
            ```
            </Instruction>
            <Warnings>
            - **Async & Timing:** UI updates can be asynchronous. Avoid relying on fixed waits (`page.waitForTimeout`). Use Playwright's explicit waits (`locator.waitFor({ state: 'visible' })`, `expect(locator).toBeVisible()`, `page.waitForFunction()`) if the interaction depends on or causes a state change that needs time to complete. This is often hard in PBT, so robust error handling in the execution step is vital.
            - **State Checks:** Remember `executeInteraction` checks `isVisible`/`isDisabled` before calling `executeInteractionByType`, but the state could *still* change right before your action runs. The `try/catch` around the action is essential.
            </Warnings>
        </Step_3_Execution>

        <Step_4_Arbitrary>
            <TargetFunction>`createInteractionSequenceArbitrary`</TargetFunction>
            <Explanation>This function defines how fast-check generates random sequences of interactions. It classifies interactions, creates a fast-check "Arbitrary" for each type, combines them using `fc.oneof`, and then creates an Arbitrary for an array (`fc.array`) of these interactions. Your goal is to add an Arbitrary for the new interaction type WHILE PRESERVING SHRINKING.</Explanation>
            <Instruction>**THIS IS THE MOST CRITICAL STEP. FOLLOW THESE PATTERNS EXACTLY.**
                1.  Filter the `interactions` list to get only those of your new `interactionType`.
                2.  **CHOOSE THE CORRECT PATTERN BASED ON `takesValue`:**

                    *   **PATTERN A: If `takesValue` is FALSE** (Interaction is an action like click, hover, doubleClick):
                        Use `fc.nat` to generate the index, `fc.record` for structure, and `.map` to build the final `Interaction` object. This shrinks the *target element* index on failure.

                        ```javascript
                        // --- PATTERN A (Value: FALSE) ---
                        const newInteractionsList = interactions.filter(i => i.type === '{NEW_INTERACTION_DETAILS.interactionType}');
                        if (newInteractionsList.length > 0) {
                            const newInteractionArb = fc
                                .record({
                                    type: fc.constant('{NEW_INTERACTION_DETAILS.interactionType}'), // Fixed type
                                    // Generate & Shrink the index for target element selection
                                    selectorIndex: fc.nat({ max: newInteractionsList.length - 1 }),
                                })
                                .map(({ type, selectorIndex }) => ({
                                    // Build the Interaction object using the selected index
                                    ...newInteractionsList[selectorIndex], // Get element info
                                    type,
                                    // Include other necessary fields if defined in Step 1
                                }));
                            arbitraries.push(newInteractionArb); // Add to the list for fc.oneof
                        }
                        // --- END PATTERN A ---
                        ```

                    *   **PATTERN B: If `takesValue` is TRUE** (Interaction needs a value like fill, select, setRange):
                        Use a `for` loop, `_getValueArbitraryForType` (or a custom shrinkable Arbitrary) for the value, `fc.tuple` to link the fixed element index with the shrinkable value, and `.map` to build the final `Interaction` object. This shrinks the *value* on failure (and the target element via `fc.array` shrinking).

                        ```javascript
                        // --- PATTERN B (Value: TRUE) ---
                        const newInteractionsList = interactions.filter(i => i.type === '{NEW_INTERACTION_DETAILS.interactionType}');
                        if (newInteractionsList.length > 0) {
                            for (let i = 0; i < newInteractionsList.length; i++) {
                                const originalInteraction = newInteractionsList[i];
                                // --- Get or define the Arbitrary for the required VALUE ---
                                // Use _getValueArbitraryForType if applicable, or define a custom one
                                // Example: const valueArb = _getValueArbitraryForType('text');
                                // Example: const valueArb = fc.integer({ min: originalInteraction.min, max: originalInteraction.max });
                                const valueArb = /* DEFINE SHRINKABLE VALUE ARBITRARY HERE */;
                                // --- You might need multiple valueArbs if the interaction takes multiple values ---
                                // const anotherValueArb = ...;

                                const newInteractionArb = fc
                                    // Tuple: Fixed element index + Shrinkable value(s)
                                    .tuple(
                                        fc.constant(i), // Element index (does not shrink here)
                                        valueArb        // Value (SHRINKS)
                                        // , anotherValueArb // Add more values if needed (SHRINKS)
                                    )
                                    .map(([index, value /*, anotherValue */]) => ({
                                        // Build Interaction object
                                        ...newInteractionsList[index], // Get element info
                                        type: '{NEW_INTERACTION_DETAILS.interactionType}',
                                        value: value, // Assign the generated/shrunk value
                                        // anotherValue: anotherValue, // Assign other values
                                        // Include other necessary fields if defined in Step 1
                                    }));
                                arbitraries.push(newInteractionArb); // Add to the list for fc.oneof
                            }
                        }
                        // --- END PATTERN B ---
                        ```
                3.  Ensure the `arbitraries.push(newInteractionArb);` line is placed correctly within the `if (newInteractionsList.length > 0)` block. The rest of the function (`fc.oneof`, `fc.array`) remains the same.
            </Instruction>
            <Shrinking_Guidance>
            - Pattern A (`takesValue: false`) shrinks the `selectorIndex` (using `fc.nat`), helping identify *which element* caused the failure when that action is performed.
            - Pattern B (`takesValue: true`) shrinks the `value` (using the underlying `valueArb` like `fc.string`, `fc.integer`), helping identify *what value* caused the failure for that specific element. The element itself might be removed during sequence shrinking by `fc.array`.
            - Use `_getValueArbitraryForType` when possible for standard value types. If you need a custom value arbitrary, ensure it's built from basic fast-check arbitraries (like `fc.string`, `fc.integer`, `fc.constantFrom`, `fc.record`, `fc.tuple`) and simple `.map` transforms. Avoid complex `.filter()` or `.chain()` which can hinder shrinking.
            </Shrinking_Guidance>
        </Step_4_Arbitrary>
    </Step_Instructions>

    <Output_Constraints>
        <Constraint>Output ONLY the modified code sections from `storybook/e2e/universal-testers.js`. DO NOT output the entire file.</Constraint>
        <Constraint>Each modified section MUST be in a separate Markdown JavaScript code block.</Constraint>
        <Constraint>Each code block MUST start with the comment `// storybook/e2e/universal-testers.js`.</Constraint>
        <Constraint>Include a few lines of unchanged code before and after your modifications for context.</Constraint>
        <Constraint>**ALL** comments you add or modify MUST be written in KOREAN.</Constraint>
        <Constraint>Use ONLY JSDoc syntax for type annotations (e.g., `/** @param {string} name */`). DO NOT use TypeScript syntax (e.g., `name: string`).</Constraint>
        <Constraint>Modify ONLY the code sections directly related to implementing the new interaction according to the 4 steps. DO NOT refactor unrelated code.</Constraint>
        <Constraint>There should be NO explanatory text outside the code blocks and their internal comments.</Constraint>
    </Output_Constraints>

</Action_Prompt>
```xml
</Generated_Action_Prompt>

<Verify Original Prompt Content Preservation>
    - The 4-step process is mandated and detailed. (Preserved)
    - Critical concepts (PBT, framework functions, shrinking importance) are explained directly within the prompt. (Integrated)
    - The **exact code patterns for preserving shrinking** (value vs. non-value) are now embedded directly within the instructions for Step 4, along with explanations of *why* they work. (Integrated and Reinforced)
    - Logic and structure similar to the original guide's `doubleClick` example are provided as inline examples/structures within the step instructions. (Integrated)
    - Warnings about async timing, state checks, Playwright waits, and arbitrary complexity are included within the relevant instructions. (Integrated)
    - User's custom instructions (KOREAN language, output format, JSDoc, modify only relevant code) are integrated as strict constraints. (Preserved)
    - The prompt is now self-contained and does not reference the external guide file. (Fulfilled User Request)
    - The need for the specific interaction details (`{NEW_INTERACTION_DETAILS}`) as input is clear. (Preserved)
    - No tasks beyond the original scope are included. (Preserved)
    - **Conclusion**: The generated Action Prompt is now self-contained, embedding all necessary explanations, methodology, critical code patterns, examples, and constraints directly within the prompt structure. It accurately reflects the core technical requirements of the original guide while fulfilling the user's request for independence from the external file.
</Verify>