.mermaid-container {
& p {
	font-size: 18px;
}

& foreignObject {
	overflow: visible;
}

& svg rect,
& svg circle,
& svg ellipse,
& svg polygon,
& svg line {
	stroke: var(--foreground) !important;
}

& svg rect,
& svg circle,
& svg ellipse,
& svg polygon {
	stroke-width: 2px !important;
}

& .node rect,
& .node circle,
& .node ellipse,
& .node polygon,
& .node path {
	stroke-width: 4px !important;
}

& .label rect {
	background-color: var(--background) !important;
	stroke: none !important;
}

& .flowchart-link {
	/* stroke-dasharray: 4, 4 !important; 기존 점선 정의 주석 처리 */
	stroke-dasharray: 10, 5 !important;
	stroke-width: 2px !important;
	animation: flow-highlight 1.5s linear infinite; /* 새 애니메이션 적용 */
}

}

.mermaid-container .mermaid-dim {
	opacity: 0.3 !important; /* 흐리게 만들기 (값 조절 가능) */
	transition: opacity 0.2s ease-in-out; /* 부드러운 전환 효과 */
}

/* 기본 상태 및 전환 효과 */
.mermaid-container svg.flowchart g.node,
.mermaid-container svg.flowchart path.flowchart-link {
	opacity: 1; /* 기본 투명도는 1 */
	transition: opacity 0.2s ease-in-out; /* 마우스 아웃 시 부드러운 전환 */
}

.mermaid-container .marker {
	overflow: visible !important;
}

.mermaid-container .arrowMarkerPath {
	transform: scale(1.5, 2) translateX(-7px) translateY(-2.5px);
}


/* 기존 flow 키프레임 대신 새로운 키프레임 정의 */
@keyframes flow-highlight {
	from {
		/* 전체 대시 패턴 길이(15 + 30 = 45)만큼 오프셋 시작 */
		stroke-dashoffset: 15;
	}

	to {
		stroke-dashoffset: 0; /* 오프셋을 0으로 만들어 한 패턴 이동 완료 */
	}
}

/* 기존 @keyframes flow 는 주석 처리하거나 삭제합니다. */
/*
@keyframes flow {
	from {
		stroke-dashoffset: 8;
	}
	to {
		stroke-dashoffset: 0;
	}
}
*/
